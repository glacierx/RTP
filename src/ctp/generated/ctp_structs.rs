/* automatically generated by rust-bindgen 0.70.1 */

pub const THOST_FTDC_EXP_Normal: u8 = 48u8;
pub const THOST_FTDC_EXP_GenOrderByTrade: u8 = 49u8;
pub const THOST_FTDC_ICT_EID: u8 = 48u8;
pub const THOST_FTDC_ICT_IDCard: u8 = 49u8;
pub const THOST_FTDC_ICT_OfficerIDCard: u8 = 50u8;
pub const THOST_FTDC_ICT_PoliceIDCard: u8 = 51u8;
pub const THOST_FTDC_ICT_SoldierIDCard: u8 = 52u8;
pub const THOST_FTDC_ICT_HouseholdRegister: u8 = 53u8;
pub const THOST_FTDC_ICT_Passport: u8 = 54u8;
pub const THOST_FTDC_ICT_TaiwanCompatriotIDCard: u8 = 55u8;
pub const THOST_FTDC_ICT_HomeComingCard: u8 = 56u8;
pub const THOST_FTDC_ICT_LicenseNo: u8 = 57u8;
pub const THOST_FTDC_ICT_TaxNo: u8 = 65u8;
pub const THOST_FTDC_ICT_HMMainlandTravelPermit: u8 = 66u8;
pub const THOST_FTDC_ICT_TwMainlandTravelPermit: u8 = 67u8;
pub const THOST_FTDC_ICT_DrivingLicense: u8 = 68u8;
pub const THOST_FTDC_ICT_SocialID: u8 = 70u8;
pub const THOST_FTDC_ICT_LocalID: u8 = 71u8;
pub const THOST_FTDC_ICT_BusinessRegistration: u8 = 72u8;
pub const THOST_FTDC_ICT_HKMCIDCard: u8 = 73u8;
pub const THOST_FTDC_ICT_AccountsPermits: u8 = 74u8;
pub const THOST_FTDC_ICT_FrgPrmtRdCard: u8 = 75u8;
pub const THOST_FTDC_ICT_CptMngPrdLetter: u8 = 76u8;
pub const THOST_FTDC_ICT_HKMCTwResidencePermit: u8 = 77u8;
pub const THOST_FTDC_ICT_UniformSocialCreditCode: u8 = 78u8;
pub const THOST_FTDC_ICT_CorporationCertNo: u8 = 79u8;
pub const THOST_FTDC_ICT_OtherCard: u8 = 120u8;
pub const THOST_FTDC_IR_All: u8 = 49u8;
pub const THOST_FTDC_IR_Group: u8 = 50u8;
pub const THOST_FTDC_IR_Single: u8 = 51u8;
pub const THOST_FTDC_DR_All: u8 = 49u8;
pub const THOST_FTDC_DR_Group: u8 = 50u8;
pub const THOST_FTDC_DR_Single: u8 = 51u8;
pub const THOST_FTDC_DS_Asynchronous: u8 = 49u8;
pub const THOST_FTDC_DS_Synchronizing: u8 = 50u8;
pub const THOST_FTDC_DS_Synchronized: u8 = 51u8;
pub const THOST_FTDC_BDS_Synchronized: u8 = 49u8;
pub const THOST_FTDC_BDS_Synchronizing: u8 = 50u8;
pub const THOST_FTDC_ECS_NoConnection: u8 = 49u8;
pub const THOST_FTDC_ECS_QryInstrumentSent: u8 = 50u8;
pub const THOST_FTDC_ECS_GotInformation: u8 = 57u8;
pub const THOST_FTDC_TCS_NotConnected: u8 = 49u8;
pub const THOST_FTDC_TCS_Connected: u8 = 50u8;
pub const THOST_FTDC_TCS_QryInstrumentSent: u8 = 51u8;
pub const THOST_FTDC_TCS_SubPrivateFlow: u8 = 52u8;
pub const THOST_FTDC_FC_DataAsync: u8 = 49u8;
pub const THOST_FTDC_FC_ForceUserLogout: u8 = 50u8;
pub const THOST_FTDC_FC_UserPasswordUpdate: u8 = 51u8;
pub const THOST_FTDC_FC_BrokerPasswordUpdate: u8 = 52u8;
pub const THOST_FTDC_FC_InvestorPasswordUpdate: u8 = 53u8;
pub const THOST_FTDC_FC_OrderInsert: u8 = 54u8;
pub const THOST_FTDC_FC_OrderAction: u8 = 55u8;
pub const THOST_FTDC_FC_SyncSystemData: u8 = 56u8;
pub const THOST_FTDC_FC_SyncBrokerData: u8 = 57u8;
pub const THOST_FTDC_FC_BachSyncBrokerData: u8 = 65u8;
pub const THOST_FTDC_FC_SuperQuery: u8 = 66u8;
pub const THOST_FTDC_FC_ParkedOrderInsert: u8 = 67u8;
pub const THOST_FTDC_FC_ParkedOrderAction: u8 = 68u8;
pub const THOST_FTDC_FC_SyncOTP: u8 = 69u8;
pub const THOST_FTDC_FC_DeleteOrder: u8 = 70u8;
pub const THOST_FTDC_FC_ExitEmergency: u8 = 71u8;
pub const THOST_FTDC_BFC_ForceUserLogout: u8 = 49u8;
pub const THOST_FTDC_BFC_UserPasswordUpdate: u8 = 50u8;
pub const THOST_FTDC_BFC_SyncBrokerData: u8 = 51u8;
pub const THOST_FTDC_BFC_BachSyncBrokerData: u8 = 52u8;
pub const THOST_FTDC_BFC_OrderInsert: u8 = 53u8;
pub const THOST_FTDC_BFC_OrderAction: u8 = 54u8;
pub const THOST_FTDC_BFC_AllQuery: u8 = 55u8;
pub const THOST_FTDC_BFC_log: u8 = 97u8;
pub const THOST_FTDC_BFC_BaseQry: u8 = 98u8;
pub const THOST_FTDC_BFC_TradeQry: u8 = 99u8;
pub const THOST_FTDC_BFC_Trade: u8 = 100u8;
pub const THOST_FTDC_BFC_Virement: u8 = 101u8;
pub const THOST_FTDC_BFC_Risk: u8 = 102u8;
pub const THOST_FTDC_BFC_Session: u8 = 103u8;
pub const THOST_FTDC_BFC_RiskNoticeCtl: u8 = 104u8;
pub const THOST_FTDC_BFC_RiskNotice: u8 = 105u8;
pub const THOST_FTDC_BFC_BrokerDeposit: u8 = 106u8;
pub const THOST_FTDC_BFC_QueryFund: u8 = 107u8;
pub const THOST_FTDC_BFC_QueryOrder: u8 = 108u8;
pub const THOST_FTDC_BFC_QueryTrade: u8 = 109u8;
pub const THOST_FTDC_BFC_QueryPosition: u8 = 110u8;
pub const THOST_FTDC_BFC_QueryMarketData: u8 = 111u8;
pub const THOST_FTDC_BFC_QueryUserEvent: u8 = 112u8;
pub const THOST_FTDC_BFC_QueryRiskNotify: u8 = 113u8;
pub const THOST_FTDC_BFC_QueryFundChange: u8 = 114u8;
pub const THOST_FTDC_BFC_QueryInvestor: u8 = 115u8;
pub const THOST_FTDC_BFC_QueryTradingCode: u8 = 116u8;
pub const THOST_FTDC_BFC_ForceClose: u8 = 117u8;
pub const THOST_FTDC_BFC_PressTest: u8 = 118u8;
pub const THOST_FTDC_BFC_RemainCalc: u8 = 119u8;
pub const THOST_FTDC_BFC_NetPositionInd: u8 = 120u8;
pub const THOST_FTDC_BFC_RiskPredict: u8 = 121u8;
pub const THOST_FTDC_BFC_DataExport: u8 = 122u8;
pub const THOST_FTDC_BFC_RiskTargetSetup: u8 = 65u8;
pub const THOST_FTDC_BFC_MarketDataWarn: u8 = 66u8;
pub const THOST_FTDC_BFC_QryBizNotice: u8 = 67u8;
pub const THOST_FTDC_BFC_CfgBizNotice: u8 = 68u8;
pub const THOST_FTDC_BFC_SyncOTP: u8 = 69u8;
pub const THOST_FTDC_BFC_SendBizNotice: u8 = 70u8;
pub const THOST_FTDC_BFC_CfgRiskLevelStd: u8 = 71u8;
pub const THOST_FTDC_BFC_TbCommand: u8 = 72u8;
pub const THOST_FTDC_BFC_DeleteOrder: u8 = 74u8;
pub const THOST_FTDC_BFC_ParkedOrderInsert: u8 = 75u8;
pub const THOST_FTDC_BFC_ParkedOrderAction: u8 = 76u8;
pub const THOST_FTDC_BFC_ExecOrderNoCheck: u8 = 77u8;
pub const THOST_FTDC_BFC_Designate: u8 = 78u8;
pub const THOST_FTDC_BFC_StockDisposal: u8 = 79u8;
pub const THOST_FTDC_BFC_BrokerDepositWarn: u8 = 81u8;
pub const THOST_FTDC_BFC_CoverWarn: u8 = 83u8;
pub const THOST_FTDC_BFC_PreExecOrder: u8 = 84u8;
pub const THOST_FTDC_BFC_ExecOrderRisk: u8 = 80u8;
pub const THOST_FTDC_BFC_PosiLimitWarn: u8 = 85u8;
pub const THOST_FTDC_BFC_QryPosiLimit: u8 = 86u8;
pub const THOST_FTDC_BFC_FBSign: u8 = 87u8;
pub const THOST_FTDC_BFC_FBAccount: u8 = 88u8;
pub const THOST_FTDC_OAS_Submitted: u8 = 97u8;
pub const THOST_FTDC_OAS_Accepted: u8 = 98u8;
pub const THOST_FTDC_OAS_Rejected: u8 = 99u8;
pub const THOST_FTDC_OST_AllTraded: u8 = 48u8;
pub const THOST_FTDC_OST_PartTradedQueueing: u8 = 49u8;
pub const THOST_FTDC_OST_PartTradedNotQueueing: u8 = 50u8;
pub const THOST_FTDC_OST_NoTradeQueueing: u8 = 51u8;
pub const THOST_FTDC_OST_NoTradeNotQueueing: u8 = 52u8;
pub const THOST_FTDC_OST_Canceled: u8 = 53u8;
pub const THOST_FTDC_OST_Unknown: u8 = 97u8;
pub const THOST_FTDC_OST_NotTouched: u8 = 98u8;
pub const THOST_FTDC_OST_Touched: u8 = 99u8;
pub const THOST_FTDC_OSS_InsertSubmitted: u8 = 48u8;
pub const THOST_FTDC_OSS_CancelSubmitted: u8 = 49u8;
pub const THOST_FTDC_OSS_ModifySubmitted: u8 = 50u8;
pub const THOST_FTDC_OSS_Accepted: u8 = 51u8;
pub const THOST_FTDC_OSS_InsertRejected: u8 = 52u8;
pub const THOST_FTDC_OSS_CancelRejected: u8 = 53u8;
pub const THOST_FTDC_OSS_ModifyRejected: u8 = 54u8;
pub const THOST_FTDC_PSD_Today: u8 = 49u8;
pub const THOST_FTDC_PSD_History: u8 = 50u8;
pub const THOST_FTDC_PDT_UseHistory: u8 = 49u8;
pub const THOST_FTDC_PDT_NoUseHistory: u8 = 50u8;
pub const THOST_FTDC_ER_Broker: u8 = 49u8;
pub const THOST_FTDC_ER_Host: u8 = 50u8;
pub const THOST_FTDC_ER_Maker: u8 = 51u8;
pub const THOST_FTDC_PC_Futures: u8 = 49u8;
pub const THOST_FTDC_PC_Options: u8 = 50u8;
pub const THOST_FTDC_PC_Combination: u8 = 51u8;
pub const THOST_FTDC_PC_Spot: u8 = 52u8;
pub const THOST_FTDC_PC_EFP: u8 = 53u8;
pub const THOST_FTDC_PC_SpotOption: u8 = 54u8;
pub const THOST_FTDC_PC_TAS: u8 = 55u8;
pub const THOST_FTDC_PC_MI: u8 = 73u8;
pub const THOST_FTDC_APC_FutureSingle: u8 = 49u8;
pub const THOST_FTDC_APC_OptionSingle: u8 = 50u8;
pub const THOST_FTDC_APC_Futures: u8 = 51u8;
pub const THOST_FTDC_APC_Options: u8 = 52u8;
pub const THOST_FTDC_APC_TradingComb: u8 = 53u8;
pub const THOST_FTDC_APC_UnTradingComb: u8 = 54u8;
pub const THOST_FTDC_APC_AllTrading: u8 = 55u8;
pub const THOST_FTDC_APC_All: u8 = 56u8;
pub const THOST_FTDC_IP_NotStart: u8 = 48u8;
pub const THOST_FTDC_IP_Started: u8 = 49u8;
pub const THOST_FTDC_IP_Pause: u8 = 50u8;
pub const THOST_FTDC_IP_Expired: u8 = 51u8;
pub const THOST_FTDC_D_Buy: u8 = 48u8;
pub const THOST_FTDC_D_Sell: u8 = 49u8;
pub const THOST_FTDC_PT_Net: u8 = 49u8;
pub const THOST_FTDC_PT_Gross: u8 = 50u8;
pub const THOST_FTDC_PD_Net: u8 = 49u8;
pub const THOST_FTDC_PD_Long: u8 = 50u8;
pub const THOST_FTDC_PD_Short: u8 = 51u8;
pub const THOST_FTDC_SS_NonActive: u8 = 49u8;
pub const THOST_FTDC_SS_Startup: u8 = 50u8;
pub const THOST_FTDC_SS_Operating: u8 = 51u8;
pub const THOST_FTDC_SS_Settlement: u8 = 52u8;
pub const THOST_FTDC_SS_SettlementFinished: u8 = 53u8;
pub const THOST_FTDC_RA_Trade: u8 = 48u8;
pub const THOST_FTDC_RA_Settlement: u8 = 49u8;
pub const THOST_FTDC_HF_Speculation: u8 = 49u8;
pub const THOST_FTDC_HF_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_HF_Hedge: u8 = 51u8;
pub const THOST_FTDC_HF_MarketMaker: u8 = 53u8;
pub const THOST_FTDC_HF_SpecHedge: u8 = 54u8;
pub const THOST_FTDC_HF_HedgeSpec: u8 = 55u8;
pub const THOST_FTDC_BHF_Speculation: u8 = 49u8;
pub const THOST_FTDC_BHF_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_BHF_Hedge: u8 = 51u8;
pub const THOST_FTDC_CIDT_Speculation: u8 = 49u8;
pub const THOST_FTDC_CIDT_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_CIDT_Hedge: u8 = 51u8;
pub const THOST_FTDC_CIDT_MarketMaker: u8 = 53u8;
pub const THOST_FTDC_OPT_AnyPrice: u8 = 49u8;
pub const THOST_FTDC_OPT_LimitPrice: u8 = 50u8;
pub const THOST_FTDC_OPT_BestPrice: u8 = 51u8;
pub const THOST_FTDC_OPT_LastPrice: u8 = 52u8;
pub const THOST_FTDC_OPT_LastPricePlusOneTicks: u8 = 53u8;
pub const THOST_FTDC_OPT_LastPricePlusTwoTicks: u8 = 54u8;
pub const THOST_FTDC_OPT_LastPricePlusThreeTicks: u8 = 55u8;
pub const THOST_FTDC_OPT_AskPrice1: u8 = 56u8;
pub const THOST_FTDC_OPT_AskPrice1PlusOneTicks: u8 = 57u8;
pub const THOST_FTDC_OPT_AskPrice1PlusTwoTicks: u8 = 65u8;
pub const THOST_FTDC_OPT_AskPrice1PlusThreeTicks: u8 = 66u8;
pub const THOST_FTDC_OPT_BidPrice1: u8 = 67u8;
pub const THOST_FTDC_OPT_BidPrice1PlusOneTicks: u8 = 68u8;
pub const THOST_FTDC_OPT_BidPrice1PlusTwoTicks: u8 = 69u8;
pub const THOST_FTDC_OPT_BidPrice1PlusThreeTicks: u8 = 70u8;
pub const THOST_FTDC_OPT_FiveLevelPrice: u8 = 71u8;
pub const THOST_FTDC_OF_Open: u8 = 48u8;
pub const THOST_FTDC_OF_Close: u8 = 49u8;
pub const THOST_FTDC_OF_ForceClose: u8 = 50u8;
pub const THOST_FTDC_OF_CloseToday: u8 = 51u8;
pub const THOST_FTDC_OF_CloseYesterday: u8 = 52u8;
pub const THOST_FTDC_OF_ForceOff: u8 = 53u8;
pub const THOST_FTDC_OF_LocalForceClose: u8 = 54u8;
pub const THOST_FTDC_FCC_NotForceClose: u8 = 48u8;
pub const THOST_FTDC_FCC_LackDeposit: u8 = 49u8;
pub const THOST_FTDC_FCC_ClientOverPositionLimit: u8 = 50u8;
pub const THOST_FTDC_FCC_MemberOverPositionLimit: u8 = 51u8;
pub const THOST_FTDC_FCC_NotMultiple: u8 = 52u8;
pub const THOST_FTDC_FCC_Violation: u8 = 53u8;
pub const THOST_FTDC_FCC_Other: u8 = 54u8;
pub const THOST_FTDC_FCC_PersonDeliv: u8 = 55u8;
pub const THOST_FTDC_FCC_Notverifycapital: u8 = 56u8;
pub const THOST_FTDC_FCC_LocalLackDeposit: u8 = 57u8;
pub const THOST_FTDC_FCC_LocalViolationNocheck: u8 = 97u8;
pub const THOST_FTDC_FCC_LocalViolation: u8 = 98u8;
pub const THOST_FTDC_ORDT_Normal: u8 = 48u8;
pub const THOST_FTDC_ORDT_DeriveFromQuote: u8 = 49u8;
pub const THOST_FTDC_ORDT_DeriveFromCombination: u8 = 50u8;
pub const THOST_FTDC_ORDT_Combination: u8 = 51u8;
pub const THOST_FTDC_ORDT_ConditionalOrder: u8 = 52u8;
pub const THOST_FTDC_ORDT_Swap: u8 = 53u8;
pub const THOST_FTDC_ORDT_DeriveFromBlockTrade: u8 = 54u8;
pub const THOST_FTDC_ORDT_DeriveFromEFPTrade: u8 = 55u8;
pub const THOST_FTDC_TC_IOC: u8 = 49u8;
pub const THOST_FTDC_TC_GFS: u8 = 50u8;
pub const THOST_FTDC_TC_GFD: u8 = 51u8;
pub const THOST_FTDC_TC_GTD: u8 = 52u8;
pub const THOST_FTDC_TC_GTC: u8 = 53u8;
pub const THOST_FTDC_TC_GFA: u8 = 54u8;
pub const THOST_FTDC_VC_AV: u8 = 49u8;
pub const THOST_FTDC_VC_MV: u8 = 50u8;
pub const THOST_FTDC_VC_CV: u8 = 51u8;
pub const THOST_FTDC_CC_Immediately: u8 = 49u8;
pub const THOST_FTDC_CC_Touch: u8 = 50u8;
pub const THOST_FTDC_CC_TouchProfit: u8 = 51u8;
pub const THOST_FTDC_CC_ParkedOrder: u8 = 52u8;
pub const THOST_FTDC_CC_LastPriceGreaterThanStopPrice: u8 = 53u8;
pub const THOST_FTDC_CC_LastPriceGreaterEqualStopPrice: u8 = 54u8;
pub const THOST_FTDC_CC_LastPriceLesserThanStopPrice: u8 = 55u8;
pub const THOST_FTDC_CC_LastPriceLesserEqualStopPrice: u8 = 56u8;
pub const THOST_FTDC_CC_AskPriceGreaterThanStopPrice: u8 = 57u8;
pub const THOST_FTDC_CC_AskPriceGreaterEqualStopPrice: u8 = 65u8;
pub const THOST_FTDC_CC_AskPriceLesserThanStopPrice: u8 = 66u8;
pub const THOST_FTDC_CC_AskPriceLesserEqualStopPrice: u8 = 67u8;
pub const THOST_FTDC_CC_BidPriceGreaterThanStopPrice: u8 = 68u8;
pub const THOST_FTDC_CC_BidPriceGreaterEqualStopPrice: u8 = 69u8;
pub const THOST_FTDC_CC_BidPriceLesserThanStopPrice: u8 = 70u8;
pub const THOST_FTDC_CC_BidPriceLesserEqualStopPrice: u8 = 72u8;
pub const THOST_FTDC_AF_Delete: u8 = 48u8;
pub const THOST_FTDC_AF_Modify: u8 = 51u8;
pub const THOST_FTDC_TR_Allow: u8 = 48u8;
pub const THOST_FTDC_TR_CloseOnly: u8 = 49u8;
pub const THOST_FTDC_TR_Forbidden: u8 = 50u8;
pub const THOST_FTDC_OSRC_Participant: u8 = 48u8;
pub const THOST_FTDC_OSRC_Administrator: u8 = 49u8;
pub const THOST_FTDC_TRDT_SplitCombination: u8 = 35u8;
pub const THOST_FTDC_TRDT_Common: u8 = 48u8;
pub const THOST_FTDC_TRDT_OptionsExecution: u8 = 49u8;
pub const THOST_FTDC_TRDT_OTC: u8 = 50u8;
pub const THOST_FTDC_TRDT_EFPDerived: u8 = 51u8;
pub const THOST_FTDC_TRDT_CombinationDerived: u8 = 52u8;
pub const THOST_FTDC_TRDT_BlockTrade: u8 = 53u8;
pub const THOST_FTDC_SPOST_Common: u8 = 35u8;
pub const THOST_FTDC_SPOST_Tas: u8 = 48u8;
pub const THOST_FTDC_PSRC_LastPrice: u8 = 48u8;
pub const THOST_FTDC_PSRC_Buy: u8 = 49u8;
pub const THOST_FTDC_PSRC_Sell: u8 = 50u8;
pub const THOST_FTDC_PSRC_OTC: u8 = 51u8;
pub const THOST_FTDC_IS_BeforeTrading: u8 = 48u8;
pub const THOST_FTDC_IS_NoTrading: u8 = 49u8;
pub const THOST_FTDC_IS_Continous: u8 = 50u8;
pub const THOST_FTDC_IS_AuctionOrdering: u8 = 51u8;
pub const THOST_FTDC_IS_AuctionBalance: u8 = 52u8;
pub const THOST_FTDC_IS_AuctionMatch: u8 = 53u8;
pub const THOST_FTDC_IS_Closed: u8 = 54u8;
pub const THOST_FTDC_IS_TransactionProcessing: u8 = 55u8;
pub const THOST_FTDC_IER_Automatic: u8 = 49u8;
pub const THOST_FTDC_IER_Manual: u8 = 50u8;
pub const THOST_FTDC_IER_Fuse: u8 = 51u8;
pub const THOST_FTDC_BS_NoUpload: u8 = 49u8;
pub const THOST_FTDC_BS_Uploaded: u8 = 50u8;
pub const THOST_FTDC_BS_Failed: u8 = 51u8;
pub const THOST_FTDC_RS_All: u8 = 49u8;
pub const THOST_FTDC_RS_ByProduct: u8 = 50u8;
pub const THOST_FTDC_RP_ByVolume: u8 = 49u8;
pub const THOST_FTDC_RP_ByFeeOnHand: u8 = 50u8;
pub const THOST_FTDC_RL_Level1: u8 = 49u8;
pub const THOST_FTDC_RL_Level2: u8 = 50u8;
pub const THOST_FTDC_RL_Level3: u8 = 51u8;
pub const THOST_FTDC_RL_Level4: u8 = 52u8;
pub const THOST_FTDC_RL_Level5: u8 = 53u8;
pub const THOST_FTDC_RL_Level6: u8 = 54u8;
pub const THOST_FTDC_RL_Level7: u8 = 55u8;
pub const THOST_FTDC_RL_Level8: u8 = 56u8;
pub const THOST_FTDC_RL_Level9: u8 = 57u8;
pub const THOST_FTDC_RSD_ByPeriod: u8 = 49u8;
pub const THOST_FTDC_RSD_ByStandard: u8 = 50u8;
pub const THOST_FTDC_MT_Out: u8 = 48u8;
pub const THOST_FTDC_MT_In: u8 = 49u8;
pub const THOST_FTDC_ISPI_MortgageRatio: u8 = 52u8;
pub const THOST_FTDC_ISPI_MarginWay: u8 = 53u8;
pub const THOST_FTDC_ISPI_BillDeposit: u8 = 57u8;
pub const THOST_FTDC_ESPI_MortgageRatio: u8 = 49u8;
pub const THOST_FTDC_ESPI_OtherFundItem: u8 = 50u8;
pub const THOST_FTDC_ESPI_OtherFundImport: u8 = 51u8;
pub const THOST_FTDC_ESPI_CFFEXMinPrepa: u8 = 54u8;
pub const THOST_FTDC_ESPI_CZCESettlementType: u8 = 55u8;
pub const THOST_FTDC_ESPI_ExchDelivFeeMode: u8 = 57u8;
pub const THOST_FTDC_ESPI_DelivFeeMode: u8 = 48u8;
pub const THOST_FTDC_ESPI_CZCEComMarginType: u8 = 65u8;
pub const THOST_FTDC_ESPI_DceComMarginType: u8 = 66u8;
pub const THOST_FTDC_ESPI_OptOutDisCountRate: u8 = 97u8;
pub const THOST_FTDC_ESPI_OptMiniGuarantee: u8 = 98u8;
pub const THOST_FTDC_SPI_InvestorIDMinLength: u8 = 49u8;
pub const THOST_FTDC_SPI_AccountIDMinLength: u8 = 50u8;
pub const THOST_FTDC_SPI_UserRightLogon: u8 = 51u8;
pub const THOST_FTDC_SPI_SettlementBillTrade: u8 = 52u8;
pub const THOST_FTDC_SPI_TradingCode: u8 = 53u8;
pub const THOST_FTDC_SPI_CheckFund: u8 = 54u8;
pub const THOST_FTDC_SPI_CommModelRight: u8 = 55u8;
pub const THOST_FTDC_SPI_MarginModelRight: u8 = 57u8;
pub const THOST_FTDC_SPI_IsStandardActive: u8 = 56u8;
pub const THOST_FTDC_SPI_UploadSettlementFile: u8 = 85u8;
pub const THOST_FTDC_SPI_DownloadCSRCFile: u8 = 68u8;
pub const THOST_FTDC_SPI_SettlementBillFile: u8 = 83u8;
pub const THOST_FTDC_SPI_CSRCOthersFile: u8 = 67u8;
pub const THOST_FTDC_SPI_InvestorPhoto: u8 = 80u8;
pub const THOST_FTDC_SPI_CSRCData: u8 = 82u8;
pub const THOST_FTDC_SPI_InvestorPwdModel: u8 = 73u8;
pub const THOST_FTDC_SPI_CFFEXInvestorSettleFile: u8 = 70u8;
pub const THOST_FTDC_SPI_InvestorIDType: u8 = 97u8;
pub const THOST_FTDC_SPI_FreezeMaxReMain: u8 = 114u8;
pub const THOST_FTDC_SPI_IsSync: u8 = 65u8;
pub const THOST_FTDC_SPI_RelieveOpenLimit: u8 = 79u8;
pub const THOST_FTDC_SPI_IsStandardFreeze: u8 = 88u8;
pub const THOST_FTDC_SPI_CZCENormalProductHedge: u8 = 66u8;
pub const THOST_FTDC_TPID_EncryptionStandard: u8 = 69u8;
pub const THOST_FTDC_TPID_RiskMode: u8 = 82u8;
pub const THOST_FTDC_TPID_RiskModeGlobal: u8 = 71u8;
pub const THOST_FTDC_TPID_modeEncode: u8 = 80u8;
pub const THOST_FTDC_TPID_tickMode: u8 = 84u8;
pub const THOST_FTDC_TPID_SingleUserSessionMaxNum: u8 = 83u8;
pub const THOST_FTDC_TPID_LoginFailMaxNum: u8 = 76u8;
pub const THOST_FTDC_TPID_IsAuthForce: u8 = 65u8;
pub const THOST_FTDC_TPID_IsPosiFreeze: u8 = 70u8;
pub const THOST_FTDC_TPID_IsPosiLimit: u8 = 77u8;
pub const THOST_FTDC_TPID_ForQuoteTimeInterval: u8 = 81u8;
pub const THOST_FTDC_TPID_IsFuturePosiLimit: u8 = 66u8;
pub const THOST_FTDC_TPID_IsFutureOrderFreq: u8 = 67u8;
pub const THOST_FTDC_TPID_IsExecOrderProfit: u8 = 72u8;
pub const THOST_FTDC_TPID_IsCheckBankAcc: u8 = 73u8;
pub const THOST_FTDC_TPID_PasswordDeadLine: u8 = 74u8;
pub const THOST_FTDC_TPID_IsStrongPassword: u8 = 75u8;
pub const THOST_FTDC_TPID_BalanceMorgage: u8 = 97u8;
pub const THOST_FTDC_TPID_MinPwdLen: u8 = 79u8;
pub const THOST_FTDC_TPID_LoginFailMaxNumForIP: u8 = 85u8;
pub const THOST_FTDC_TPID_PasswordPeriod: u8 = 86u8;
pub const THOST_FTDC_TPID_PwdHistoryCmp: u8 = 88u8;
pub const THOST_FTDC_FI_SettlementFund: u8 = 70u8;
pub const THOST_FTDC_FI_Trade: u8 = 84u8;
pub const THOST_FTDC_FI_InvestorPosition: u8 = 80u8;
pub const THOST_FTDC_FI_SubEntryFund: u8 = 79u8;
pub const THOST_FTDC_FI_CZCECombinationPos: u8 = 67u8;
pub const THOST_FTDC_FI_CSRCData: u8 = 82u8;
pub const THOST_FTDC_FI_CZCEClose: u8 = 76u8;
pub const THOST_FTDC_FI_CZCENoClose: u8 = 78u8;
pub const THOST_FTDC_FI_PositionDtl: u8 = 68u8;
pub const THOST_FTDC_FI_OptionStrike: u8 = 83u8;
pub const THOST_FTDC_FI_SettlementPriceComparison: u8 = 77u8;
pub const THOST_FTDC_FI_NonTradePosChange: u8 = 66u8;
pub const THOST_FTDC_FUT_Settlement: u8 = 48u8;
pub const THOST_FTDC_FUT_Check: u8 = 49u8;
pub const THOST_FTDC_FFT_Txt: u8 = 48u8;
pub const THOST_FTDC_FFT_Zip: u8 = 49u8;
pub const THOST_FTDC_FFT_DBF: u8 = 50u8;
pub const THOST_FTDC_FUS_SucceedUpload: u8 = 49u8;
pub const THOST_FTDC_FUS_FailedUpload: u8 = 50u8;
pub const THOST_FTDC_FUS_SucceedLoad: u8 = 51u8;
pub const THOST_FTDC_FUS_PartSucceedLoad: u8 = 52u8;
pub const THOST_FTDC_FUS_FailedLoad: u8 = 53u8;
pub const THOST_FTDC_TD_Out: u8 = 48u8;
pub const THOST_FTDC_TD_In: u8 = 49u8;
pub const THOST_FTDC_SC_NoSpecialRule: u8 = 48u8;
pub const THOST_FTDC_SC_NoSpringFestival: u8 = 49u8;
pub const THOST_FTDC_IPT_LastSettlement: u8 = 49u8;
pub const THOST_FTDC_IPT_LaseClose: u8 = 50u8;
pub const THOST_FTDC_PLP_Active: u8 = 49u8;
pub const THOST_FTDC_PLP_NonActive: u8 = 50u8;
pub const THOST_FTDC_PLP_Canceled: u8 = 51u8;
pub const THOST_FTDC_DM_CashDeliv: u8 = 49u8;
pub const THOST_FTDC_DM_CommodityDeliv: u8 = 50u8;
pub const THOST_FTDC_FIOT_FundIO: u8 = 49u8;
pub const THOST_FTDC_FIOT_Transfer: u8 = 50u8;
pub const THOST_FTDC_FIOT_SwapCurrency: u8 = 51u8;
pub const THOST_FTDC_FT_Deposite: u8 = 49u8;
pub const THOST_FTDC_FT_ItemFund: u8 = 50u8;
pub const THOST_FTDC_FT_Company: u8 = 51u8;
pub const THOST_FTDC_FT_InnerTransfer: u8 = 52u8;
pub const THOST_FTDC_FD_In: u8 = 49u8;
pub const THOST_FTDC_FD_Out: u8 = 50u8;
pub const THOST_FTDC_FS_Record: u8 = 49u8;
pub const THOST_FTDC_FS_Check: u8 = 50u8;
pub const THOST_FTDC_FS_Charge: u8 = 51u8;
pub const THOST_FTDC_PS_None: u8 = 49u8;
pub const THOST_FTDC_PS_Publishing: u8 = 50u8;
pub const THOST_FTDC_PS_Published: u8 = 51u8;
pub const THOST_FTDC_ES_NonActive: u8 = 49u8;
pub const THOST_FTDC_ES_Startup: u8 = 50u8;
pub const THOST_FTDC_ES_Initialize: u8 = 51u8;
pub const THOST_FTDC_ES_Initialized: u8 = 52u8;
pub const THOST_FTDC_ES_Close: u8 = 53u8;
pub const THOST_FTDC_ES_Closed: u8 = 54u8;
pub const THOST_FTDC_ES_Settlement: u8 = 55u8;
pub const THOST_FTDC_STS_Initialize: u8 = 48u8;
pub const THOST_FTDC_STS_Settlementing: u8 = 49u8;
pub const THOST_FTDC_STS_Settlemented: u8 = 50u8;
pub const THOST_FTDC_STS_Finished: u8 = 51u8;
pub const THOST_FTDC_CT_Person: u8 = 48u8;
pub const THOST_FTDC_CT_Company: u8 = 49u8;
pub const THOST_FTDC_CT_Fund: u8 = 50u8;
pub const THOST_FTDC_CT_SpecialOrgan: u8 = 51u8;
pub const THOST_FTDC_CT_Asset: u8 = 52u8;
pub const THOST_FTDC_BT_Trade: u8 = 48u8;
pub const THOST_FTDC_BT_TradeSettle: u8 = 49u8;
pub const THOST_FTDC_FAS_Low: u8 = 49u8;
pub const THOST_FTDC_FAS_Normal: u8 = 50u8;
pub const THOST_FTDC_FAS_Focus: u8 = 51u8;
pub const THOST_FTDC_FAS_Risk: u8 = 52u8;
pub const THOST_FTDC_FAS_ByTrade: u8 = 49u8;
pub const THOST_FTDC_FAS_ByDeliv: u8 = 50u8;
pub const THOST_FTDC_FAS_None: u8 = 51u8;
pub const THOST_FTDC_FAS_FixFee: u8 = 52u8;
pub const THOST_FTDC_PWDT_Trade: u8 = 49u8;
pub const THOST_FTDC_PWDT_Account: u8 = 50u8;
pub const THOST_FTDC_AG_All: u8 = 49u8;
pub const THOST_FTDC_AG_OnlyLost: u8 = 50u8;
pub const THOST_FTDC_AG_OnlyGain: u8 = 51u8;
pub const THOST_FTDC_AG_None: u8 = 52u8;
pub const THOST_FTDC_ICP_Include: u8 = 48u8;
pub const THOST_FTDC_ICP_NotInclude: u8 = 50u8;
pub const THOST_FTDC_AWT_Enable: u8 = 48u8;
pub const THOST_FTDC_AWT_Disable: u8 = 50u8;
pub const THOST_FTDC_AWT_NoHoldEnable: u8 = 51u8;
pub const THOST_FTDC_FPWD_UnCheck: u8 = 48u8;
pub const THOST_FTDC_FPWD_Check: u8 = 49u8;
pub const THOST_FTDC_TT_BankToFuture: u8 = 48u8;
pub const THOST_FTDC_TT_FutureToBank: u8 = 49u8;
pub const THOST_FTDC_TVF_Invalid: u8 = 48u8;
pub const THOST_FTDC_TVF_Valid: u8 = 49u8;
pub const THOST_FTDC_TVF_Reverse: u8 = 50u8;
pub const THOST_FTDC_RN_CD: u8 = 48u8;
pub const THOST_FTDC_RN_ZT: u8 = 49u8;
pub const THOST_FTDC_RN_QT: u8 = 50u8;
pub const THOST_FTDC_SEX_None: u8 = 48u8;
pub const THOST_FTDC_SEX_Man: u8 = 49u8;
pub const THOST_FTDC_SEX_Woman: u8 = 50u8;
pub const THOST_FTDC_UT_Investor: u8 = 48u8;
pub const THOST_FTDC_UT_Operator: u8 = 49u8;
pub const THOST_FTDC_UT_SuperUser: u8 = 50u8;
pub const THOST_FTDC_RATETYPE_MarginRate: u8 = 50u8;
pub const THOST_FTDC_NOTETYPE_TradeSettleBill: u8 = 49u8;
pub const THOST_FTDC_NOTETYPE_TradeSettleMonth: u8 = 50u8;
pub const THOST_FTDC_NOTETYPE_CallMarginNotes: u8 = 51u8;
pub const THOST_FTDC_NOTETYPE_ForceCloseNotes: u8 = 52u8;
pub const THOST_FTDC_NOTETYPE_TradeNotes: u8 = 53u8;
pub const THOST_FTDC_NOTETYPE_DelivNotes: u8 = 54u8;
pub const THOST_FTDC_SBS_Day: u8 = 49u8;
pub const THOST_FTDC_SBS_Volume: u8 = 50u8;
pub const THOST_FTDC_ST_Day: u8 = 48u8;
pub const THOST_FTDC_ST_Month: u8 = 49u8;
pub const THOST_FTDC_URT_Logon: u8 = 49u8;
pub const THOST_FTDC_URT_Transfer: u8 = 50u8;
pub const THOST_FTDC_URT_EMail: u8 = 51u8;
pub const THOST_FTDC_URT_Fax: u8 = 52u8;
pub const THOST_FTDC_URT_ConditionOrder: u8 = 53u8;
pub const THOST_FTDC_MPT_PreSettlementPrice: u8 = 49u8;
pub const THOST_FTDC_MPT_SettlementPrice: u8 = 50u8;
pub const THOST_FTDC_MPT_AveragePrice: u8 = 51u8;
pub const THOST_FTDC_MPT_OpenPrice: u8 = 52u8;
pub const THOST_FTDC_BGS_None: u8 = 48u8;
pub const THOST_FTDC_BGS_NoGenerated: u8 = 49u8;
pub const THOST_FTDC_BGS_Generated: u8 = 50u8;
pub const THOST_FTDC_AT_HandlePositionAlgo: u8 = 49u8;
pub const THOST_FTDC_AT_FindMarginRateAlgo: u8 = 50u8;
pub const THOST_FTDC_HPA_Base: u8 = 49u8;
pub const THOST_FTDC_HPA_DCE: u8 = 50u8;
pub const THOST_FTDC_HPA_CZCE: u8 = 51u8;
pub const THOST_FTDC_FMRA_Base: u8 = 49u8;
pub const THOST_FTDC_FMRA_DCE: u8 = 50u8;
pub const THOST_FTDC_FMRA_CZCE: u8 = 51u8;
pub const THOST_FTDC_HTAA_Base: u8 = 49u8;
pub const THOST_FTDC_HTAA_DCE: u8 = 50u8;
pub const THOST_FTDC_HTAA_CZCE: u8 = 51u8;
pub const THOST_FTDC_PST_Order: u8 = 49u8;
pub const THOST_FTDC_PST_Open: u8 = 50u8;
pub const THOST_FTDC_PST_Fund: u8 = 51u8;
pub const THOST_FTDC_PST_Settlement: u8 = 52u8;
pub const THOST_FTDC_PST_Company: u8 = 53u8;
pub const THOST_FTDC_PST_Corporation: u8 = 54u8;
pub const THOST_FTDC_PST_LinkMan: u8 = 55u8;
pub const THOST_FTDC_PST_Ledger: u8 = 56u8;
pub const THOST_FTDC_PST_Trustee: u8 = 57u8;
pub const THOST_FTDC_PST_TrusteeCorporation: u8 = 65u8;
pub const THOST_FTDC_PST_TrusteeOpen: u8 = 66u8;
pub const THOST_FTDC_PST_TrusteeContact: u8 = 67u8;
pub const THOST_FTDC_PST_ForeignerRefer: u8 = 68u8;
pub const THOST_FTDC_PST_CorporationRefer: u8 = 69u8;
pub const THOST_FTDC_QIR_All: u8 = 49u8;
pub const THOST_FTDC_QIR_Group: u8 = 50u8;
pub const THOST_FTDC_QIR_Single: u8 = 51u8;
pub const THOST_FTDC_IRS_Normal: u8 = 49u8;
pub const THOST_FTDC_IRS_Warn: u8 = 50u8;
pub const THOST_FTDC_IRS_Call: u8 = 51u8;
pub const THOST_FTDC_IRS_Force: u8 = 52u8;
pub const THOST_FTDC_IRS_Exception: u8 = 53u8;
pub const THOST_FTDC_UET_Login: u8 = 49u8;
pub const THOST_FTDC_UET_Logout: u8 = 50u8;
pub const THOST_FTDC_UET_Trading: u8 = 51u8;
pub const THOST_FTDC_UET_TradingError: u8 = 52u8;
pub const THOST_FTDC_UET_UpdatePassword: u8 = 53u8;
pub const THOST_FTDC_UET_Authenticate: u8 = 54u8;
pub const THOST_FTDC_UET_SubmitSysInfo: u8 = 55u8;
pub const THOST_FTDC_UET_Transfer: u8 = 56u8;
pub const THOST_FTDC_UET_Other: u8 = 57u8;
pub const THOST_FTDC_UET_UpdateTradingAccountPassword: u8 = 97u8;
pub const THOST_FTDC_ICS_Close: u8 = 48u8;
pub const THOST_FTDC_ICS_CloseToday: u8 = 49u8;
pub const THOST_FTDC_SM_Non: u8 = 48u8;
pub const THOST_FTDC_SM_Instrument: u8 = 49u8;
pub const THOST_FTDC_SM_Product: u8 = 50u8;
pub const THOST_FTDC_SM_Investor: u8 = 51u8;
pub const THOST_FTDC_PAOS_NotSend: u8 = 49u8;
pub const THOST_FTDC_PAOS_Send: u8 = 50u8;
pub const THOST_FTDC_PAOS_Deleted: u8 = 51u8;
pub const THOST_FTDC_VDS_Dealing: u8 = 49u8;
pub const THOST_FTDC_VDS_DeaclSucceed: u8 = 50u8;
pub const THOST_FTDC_ORGS_Standard: u8 = 48u8;
pub const THOST_FTDC_ORGS_ESunny: u8 = 49u8;
pub const THOST_FTDC_ORGS_KingStarV6: u8 = 50u8;
pub const THOST_FTDC_VTS_NaturalDeal: u8 = 48u8;
pub const THOST_FTDC_VTS_SucceedEnd: u8 = 49u8;
pub const THOST_FTDC_VTS_FailedEND: u8 = 50u8;
pub const THOST_FTDC_VTS_Exception: u8 = 51u8;
pub const THOST_FTDC_VTS_ManualDeal: u8 = 52u8;
pub const THOST_FTDC_VTS_MesException: u8 = 53u8;
pub const THOST_FTDC_VTS_SysException: u8 = 54u8;
pub const THOST_FTDC_VBAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_VBAT_BankCard: u8 = 50u8;
pub const THOST_FTDC_VBAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_VMS_Natural: u8 = 48u8;
pub const THOST_FTDC_VMS_Canceled: u8 = 57u8;
pub const THOST_FTDC_VAA_NoAvailAbility: u8 = 48u8;
pub const THOST_FTDC_VAA_AvailAbility: u8 = 49u8;
pub const THOST_FTDC_VAA_Repeal: u8 = 50u8;
pub const THOST_FTDC_GEN_Program: u8 = 48u8;
pub const THOST_FTDC_GEN_HandWork: u8 = 49u8;
pub const THOST_FTDC_CFMMCKK_REQUEST: u8 = 82u8;
pub const THOST_FTDC_CFMMCKK_AUTO: u8 = 65u8;
pub const THOST_FTDC_CFMMCKK_MANUAL: u8 = 77u8;
pub const THOST_FTDC_CFT_IDCard: u8 = 48u8;
pub const THOST_FTDC_CFT_Passport: u8 = 49u8;
pub const THOST_FTDC_CFT_OfficerIDCard: u8 = 50u8;
pub const THOST_FTDC_CFT_SoldierIDCard: u8 = 51u8;
pub const THOST_FTDC_CFT_HomeComingCard: u8 = 52u8;
pub const THOST_FTDC_CFT_HouseholdRegister: u8 = 53u8;
pub const THOST_FTDC_CFT_LicenseNo: u8 = 54u8;
pub const THOST_FTDC_CFT_InstitutionCodeCard: u8 = 55u8;
pub const THOST_FTDC_CFT_TempLicenseNo: u8 = 56u8;
pub const THOST_FTDC_CFT_NoEnterpriseLicenseNo: u8 = 57u8;
pub const THOST_FTDC_CFT_OtherCard: u8 = 120u8;
pub const THOST_FTDC_CFT_SuperDepAgree: u8 = 97u8;
pub const THOST_FTDC_FBC_Others: u8 = 48u8;
pub const THOST_FTDC_FBC_TransferDetails: u8 = 49u8;
pub const THOST_FTDC_FBC_CustAccStatus: u8 = 50u8;
pub const THOST_FTDC_FBC_AccountTradeDetails: u8 = 51u8;
pub const THOST_FTDC_FBC_FutureAccountChangeInfoDetails: u8 = 52u8;
pub const THOST_FTDC_FBC_CustMoneyDetail: u8 = 53u8;
pub const THOST_FTDC_FBC_CustCancelAccountInfo: u8 = 54u8;
pub const THOST_FTDC_FBC_CustMoneyResult: u8 = 55u8;
pub const THOST_FTDC_FBC_OthersExceptionResult: u8 = 56u8;
pub const THOST_FTDC_FBC_CustInterestNetMoneyDetails: u8 = 57u8;
pub const THOST_FTDC_FBC_CustMoneySendAndReceiveDetails: u8 = 97u8;
pub const THOST_FTDC_FBC_CorporationMoneyTotal: u8 = 98u8;
pub const THOST_FTDC_FBC_MainbodyMoneyTotal: u8 = 99u8;
pub const THOST_FTDC_FBC_MainPartMonitorData: u8 = 100u8;
pub const THOST_FTDC_FBC_PreparationMoney: u8 = 101u8;
pub const THOST_FTDC_FBC_BankMoneyMonitorData: u8 = 102u8;
pub const THOST_FTDC_CEC_Exchange: u8 = 49u8;
pub const THOST_FTDC_CEC_Cash: u8 = 50u8;
pub const THOST_FTDC_YNI_Yes: u8 = 48u8;
pub const THOST_FTDC_YNI_No: u8 = 49u8;
pub const THOST_FTDC_BLT_CurrentMoney: u8 = 48u8;
pub const THOST_FTDC_BLT_UsableMoney: u8 = 49u8;
pub const THOST_FTDC_BLT_FetchableMoney: u8 = 50u8;
pub const THOST_FTDC_BLT_FreezeMoney: u8 = 51u8;
pub const THOST_FTDC_GD_Unknown: u8 = 48u8;
pub const THOST_FTDC_GD_Male: u8 = 49u8;
pub const THOST_FTDC_GD_Female: u8 = 50u8;
pub const THOST_FTDC_FPF_BEN: u8 = 48u8;
pub const THOST_FTDC_FPF_OUR: u8 = 49u8;
pub const THOST_FTDC_FPF_SHA: u8 = 50u8;
pub const THOST_FTDC_PWKT_ExchangeKey: u8 = 48u8;
pub const THOST_FTDC_PWKT_PassWordKey: u8 = 49u8;
pub const THOST_FTDC_PWKT_MACKey: u8 = 50u8;
pub const THOST_FTDC_PWKT_MessageKey: u8 = 51u8;
pub const THOST_FTDC_PWT_Query: u8 = 48u8;
pub const THOST_FTDC_PWT_Fetch: u8 = 49u8;
pub const THOST_FTDC_PWT_Transfer: u8 = 50u8;
pub const THOST_FTDC_PWT_Trade: u8 = 51u8;
pub const THOST_FTDC_EM_NoEncry: u8 = 48u8;
pub const THOST_FTDC_EM_DES: u8 = 49u8;
pub const THOST_FTDC_EM_3DES: u8 = 50u8;
pub const THOST_FTDC_BRF_BankNotNeedRepeal: u8 = 48u8;
pub const THOST_FTDC_BRF_BankWaitingRepeal: u8 = 49u8;
pub const THOST_FTDC_BRF_BankBeenRepealed: u8 = 50u8;
pub const THOST_FTDC_BRORF_BrokerNotNeedRepeal: u8 = 48u8;
pub const THOST_FTDC_BRORF_BrokerWaitingRepeal: u8 = 49u8;
pub const THOST_FTDC_BRORF_BrokerBeenRepealed: u8 = 50u8;
pub const THOST_FTDC_TS_Bank: u8 = 48u8;
pub const THOST_FTDC_TS_Future: u8 = 49u8;
pub const THOST_FTDC_TS_Store: u8 = 50u8;
pub const THOST_FTDC_LF_Yes: u8 = 48u8;
pub const THOST_FTDC_LF_No: u8 = 49u8;
pub const THOST_FTDC_BAS_Normal: u8 = 48u8;
pub const THOST_FTDC_BAS_Freeze: u8 = 49u8;
pub const THOST_FTDC_BAS_ReportLoss: u8 = 50u8;
pub const THOST_FTDC_MAS_Normal: u8 = 48u8;
pub const THOST_FTDC_MAS_Cancel: u8 = 49u8;
pub const THOST_FTDC_MSS_Point: u8 = 48u8;
pub const THOST_FTDC_MSS_PrePoint: u8 = 49u8;
pub const THOST_FTDC_MSS_CancelPoint: u8 = 50u8;
pub const THOST_FTDC_SYT_FutureBankTransfer: u8 = 48u8;
pub const THOST_FTDC_SYT_StockBankTransfer: u8 = 49u8;
pub const THOST_FTDC_SYT_TheThirdPartStore: u8 = 50u8;
pub const THOST_FTDC_TEF_NormalProcessing: u8 = 48u8;
pub const THOST_FTDC_TEF_Success: u8 = 49u8;
pub const THOST_FTDC_TEF_Failed: u8 = 50u8;
pub const THOST_FTDC_TEF_Abnormal: u8 = 51u8;
pub const THOST_FTDC_TEF_ManualProcessedForException: u8 = 52u8;
pub const THOST_FTDC_TEF_CommuFailedNeedManualProcess: u8 = 53u8;
pub const THOST_FTDC_TEF_SysErrorNeedManualProcess: u8 = 54u8;
pub const THOST_FTDC_PSS_NotProcess: u8 = 48u8;
pub const THOST_FTDC_PSS_StartProcess: u8 = 49u8;
pub const THOST_FTDC_PSS_Finished: u8 = 50u8;
pub const THOST_FTDC_CUSTT_Person: u8 = 48u8;
pub const THOST_FTDC_CUSTT_Institution: u8 = 49u8;
pub const THOST_FTDC_FBTTD_FromBankToFuture: u8 = 49u8;
pub const THOST_FTDC_FBTTD_FromFutureToBank: u8 = 50u8;
pub const THOST_FTDC_OOD_Open: u8 = 49u8;
pub const THOST_FTDC_OOD_Destroy: u8 = 48u8;
pub const THOST_FTDC_AVAF_Invalid: u8 = 48u8;
pub const THOST_FTDC_AVAF_Valid: u8 = 49u8;
pub const THOST_FTDC_AVAF_Repeal: u8 = 50u8;
pub const THOST_FTDC_OT_Bank: u8 = 49u8;
pub const THOST_FTDC_OT_Future: u8 = 50u8;
pub const THOST_FTDC_OT_PlateForm: u8 = 57u8;
pub const THOST_FTDC_OL_HeadQuarters: u8 = 49u8;
pub const THOST_FTDC_OL_Branch: u8 = 50u8;
pub const THOST_FTDC_PID_FutureProtocal: u8 = 48u8;
pub const THOST_FTDC_PID_ICBCProtocal: u8 = 49u8;
pub const THOST_FTDC_PID_ABCProtocal: u8 = 50u8;
pub const THOST_FTDC_PID_CBCProtocal: u8 = 51u8;
pub const THOST_FTDC_PID_CCBProtocal: u8 = 52u8;
pub const THOST_FTDC_PID_BOCOMProtocal: u8 = 53u8;
pub const THOST_FTDC_PID_FBTPlateFormProtocal: u8 = 88u8;
pub const THOST_FTDC_CM_ShortConnect: u8 = 48u8;
pub const THOST_FTDC_CM_LongConnect: u8 = 49u8;
pub const THOST_FTDC_SRM_ASync: u8 = 48u8;
pub const THOST_FTDC_SRM_Sync: u8 = 49u8;
pub const THOST_FTDC_BAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_BAT_SavingCard: u8 = 50u8;
pub const THOST_FTDC_BAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_FAT_BankBook: u8 = 49u8;
pub const THOST_FTDC_FAT_SavingCard: u8 = 50u8;
pub const THOST_FTDC_FAT_CreditCard: u8 = 51u8;
pub const THOST_FTDC_OS_Ready: u8 = 48u8;
pub const THOST_FTDC_OS_CheckIn: u8 = 49u8;
pub const THOST_FTDC_OS_CheckOut: u8 = 50u8;
pub const THOST_FTDC_OS_CheckFileArrived: u8 = 51u8;
pub const THOST_FTDC_OS_CheckDetail: u8 = 52u8;
pub const THOST_FTDC_OS_DayEndClean: u8 = 53u8;
pub const THOST_FTDC_OS_Invalid: u8 = 57u8;
pub const THOST_FTDC_CCBFM_ByAmount: u8 = 49u8;
pub const THOST_FTDC_CCBFM_ByMonth: u8 = 50u8;
pub const THOST_FTDC_CAPIT_Client: u8 = 49u8;
pub const THOST_FTDC_CAPIT_Server: u8 = 50u8;
pub const THOST_FTDC_CAPIT_UserApi: u8 = 51u8;
pub const THOST_FTDC_LS_Connected: u8 = 49u8;
pub const THOST_FTDC_LS_Disconnected: u8 = 50u8;
pub const THOST_FTDC_BPWDF_NoCheck: u8 = 48u8;
pub const THOST_FTDC_BPWDF_BlankCheck: u8 = 49u8;
pub const THOST_FTDC_BPWDF_EncryptCheck: u8 = 50u8;
pub const THOST_FTDC_SAT_AccountID: u8 = 49u8;
pub const THOST_FTDC_SAT_CardID: u8 = 50u8;
pub const THOST_FTDC_SAT_SHStockholderID: u8 = 51u8;
pub const THOST_FTDC_SAT_SZStockholderID: u8 = 52u8;
pub const THOST_FTDC_TRFS_Normal: u8 = 48u8;
pub const THOST_FTDC_TRFS_Repealed: u8 = 49u8;
pub const THOST_FTDC_SPTYPE_Broker: u8 = 48u8;
pub const THOST_FTDC_SPTYPE_Bank: u8 = 49u8;
pub const THOST_FTDC_REQRSP_Request: u8 = 48u8;
pub const THOST_FTDC_REQRSP_Response: u8 = 49u8;
pub const THOST_FTDC_FBTUET_SignIn: u8 = 48u8;
pub const THOST_FTDC_FBTUET_FromBankToFuture: u8 = 49u8;
pub const THOST_FTDC_FBTUET_FromFutureToBank: u8 = 50u8;
pub const THOST_FTDC_FBTUET_OpenAccount: u8 = 51u8;
pub const THOST_FTDC_FBTUET_CancelAccount: u8 = 52u8;
pub const THOST_FTDC_FBTUET_ChangeAccount: u8 = 53u8;
pub const THOST_FTDC_FBTUET_RepealFromBankToFuture: u8 = 54u8;
pub const THOST_FTDC_FBTUET_RepealFromFutureToBank: u8 = 55u8;
pub const THOST_FTDC_FBTUET_QueryBankAccount: u8 = 56u8;
pub const THOST_FTDC_FBTUET_QueryFutureAccount: u8 = 57u8;
pub const THOST_FTDC_FBTUET_SignOut: u8 = 65u8;
pub const THOST_FTDC_FBTUET_SyncKey: u8 = 66u8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccount: u8 = 67u8;
pub const THOST_FTDC_FBTUET_CancelReserveOpenAccount: u8 = 68u8;
pub const THOST_FTDC_FBTUET_ReserveOpenAccountConfirm: u8 = 69u8;
pub const THOST_FTDC_FBTUET_Other: u8 = 90u8;
pub const THOST_FTDC_DBOP_Insert: u8 = 48u8;
pub const THOST_FTDC_DBOP_Update: u8 = 49u8;
pub const THOST_FTDC_DBOP_Delete: u8 = 50u8;
pub const THOST_FTDC_SYNF_Yes: u8 = 48u8;
pub const THOST_FTDC_SYNF_No: u8 = 49u8;
pub const THOST_FTDC_SYNT_OneOffSync: u8 = 48u8;
pub const THOST_FTDC_SYNT_TimerSync: u8 = 49u8;
pub const THOST_FTDC_SYNT_TimerFullSync: u8 = 50u8;
pub const THOST_FTDC_FBEDIR_Settlement: u8 = 48u8;
pub const THOST_FTDC_FBEDIR_Sale: u8 = 49u8;
pub const THOST_FTDC_FBERES_Success: u8 = 48u8;
pub const THOST_FTDC_FBERES_InsufficientBalance: u8 = 49u8;
pub const THOST_FTDC_FBERES_UnknownTrading: u8 = 56u8;
pub const THOST_FTDC_FBERES_Fail: u8 = 120u8;
pub const THOST_FTDC_FBEES_Normal: u8 = 48u8;
pub const THOST_FTDC_FBEES_ReExchange: u8 = 49u8;
pub const THOST_FTDC_FBEFG_DataPackage: u8 = 48u8;
pub const THOST_FTDC_FBEFG_File: u8 = 49u8;
pub const THOST_FTDC_FBEAT_NotTrade: u8 = 48u8;
pub const THOST_FTDC_FBEAT_Trade: u8 = 49u8;
pub const THOST_FTDC_FBEUET_SignIn: u8 = 48u8;
pub const THOST_FTDC_FBEUET_Exchange: u8 = 49u8;
pub const THOST_FTDC_FBEUET_ReExchange: u8 = 50u8;
pub const THOST_FTDC_FBEUET_QueryBankAccount: u8 = 51u8;
pub const THOST_FTDC_FBEUET_QueryExchDetial: u8 = 52u8;
pub const THOST_FTDC_FBEUET_QueryExchSummary: u8 = 53u8;
pub const THOST_FTDC_FBEUET_QueryExchRate: u8 = 54u8;
pub const THOST_FTDC_FBEUET_CheckBankAccount: u8 = 55u8;
pub const THOST_FTDC_FBEUET_SignOut: u8 = 56u8;
pub const THOST_FTDC_FBEUET_Other: u8 = 90u8;
pub const THOST_FTDC_FBERF_UnProcessed: u8 = 48u8;
pub const THOST_FTDC_FBERF_WaitSend: u8 = 49u8;
pub const THOST_FTDC_FBERF_SendSuccess: u8 = 50u8;
pub const THOST_FTDC_FBERF_SendFailed: u8 = 51u8;
pub const THOST_FTDC_FBERF_WaitReSend: u8 = 52u8;
pub const THOST_FTDC_NC_NOERROR: u8 = 48u8;
pub const THOST_FTDC_NC_Warn: u8 = 49u8;
pub const THOST_FTDC_NC_Call: u8 = 50u8;
pub const THOST_FTDC_NC_Force: u8 = 51u8;
pub const THOST_FTDC_NC_CHUANCANG: u8 = 52u8;
pub const THOST_FTDC_NC_Exception: u8 = 53u8;
pub const THOST_FTDC_FCT_Manual: u8 = 48u8;
pub const THOST_FTDC_FCT_Single: u8 = 49u8;
pub const THOST_FTDC_FCT_Group: u8 = 50u8;
pub const THOST_FTDC_RNM_System: u8 = 48u8;
pub const THOST_FTDC_RNM_SMS: u8 = 49u8;
pub const THOST_FTDC_RNM_EMail: u8 = 50u8;
pub const THOST_FTDC_RNM_Manual: u8 = 51u8;
pub const THOST_FTDC_RNS_NotGen: u8 = 48u8;
pub const THOST_FTDC_RNS_Generated: u8 = 49u8;
pub const THOST_FTDC_RNS_SendError: u8 = 50u8;
pub const THOST_FTDC_RNS_SendOk: u8 = 51u8;
pub const THOST_FTDC_RNS_Received: u8 = 52u8;
pub const THOST_FTDC_RNS_Confirmed: u8 = 53u8;
pub const THOST_FTDC_RUE_ExportData: u8 = 48u8;
pub const THOST_FTDC_COST_LastPriceAsc: u8 = 48u8;
pub const THOST_FTDC_COST_LastPriceDesc: u8 = 49u8;
pub const THOST_FTDC_COST_AskPriceAsc: u8 = 50u8;
pub const THOST_FTDC_COST_AskPriceDesc: u8 = 51u8;
pub const THOST_FTDC_COST_BidPriceAsc: u8 = 52u8;
pub const THOST_FTDC_COST_BidPriceDesc: u8 = 53u8;
pub const THOST_FTDC_UOAST_NoSend: u8 = 48u8;
pub const THOST_FTDC_UOAST_Sended: u8 = 49u8;
pub const THOST_FTDC_UOAST_Generated: u8 = 50u8;
pub const THOST_FTDC_UOAST_SendFail: u8 = 51u8;
pub const THOST_FTDC_UOAST_Success: u8 = 52u8;
pub const THOST_FTDC_UOAST_Fail: u8 = 53u8;
pub const THOST_FTDC_UOAST_Cancel: u8 = 54u8;
pub const THOST_FTDC_UOACS_NoApply: u8 = 49u8;
pub const THOST_FTDC_UOACS_Submited: u8 = 50u8;
pub const THOST_FTDC_UOACS_Sended: u8 = 51u8;
pub const THOST_FTDC_UOACS_Success: u8 = 52u8;
pub const THOST_FTDC_UOACS_Refuse: u8 = 53u8;
pub const THOST_FTDC_UOACS_Cancel: u8 = 54u8;
pub const THOST_FTDC_QT_Radio: u8 = 49u8;
pub const THOST_FTDC_QT_Option: u8 = 50u8;
pub const THOST_FTDC_QT_Blank: u8 = 51u8;
pub const THOST_FTDC_BT_Request: u8 = 49u8;
pub const THOST_FTDC_BT_Response: u8 = 50u8;
pub const THOST_FTDC_BT_Notice: u8 = 51u8;
pub const THOST_FTDC_CRC_Success: u8 = 48u8;
pub const THOST_FTDC_CRC_Working: u8 = 49u8;
pub const THOST_FTDC_CRC_InfoFail: u8 = 50u8;
pub const THOST_FTDC_CRC_IDCardFail: u8 = 51u8;
pub const THOST_FTDC_CRC_OtherFail: u8 = 52u8;
pub const THOST_FTDC_CfMMCCT_All: u8 = 48u8;
pub const THOST_FTDC_CfMMCCT_Person: u8 = 49u8;
pub const THOST_FTDC_CfMMCCT_Company: u8 = 50u8;
pub const THOST_FTDC_CfMMCCT_Other: u8 = 51u8;
pub const THOST_FTDC_CfMMCCT_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_CfMMCCT_Asset: u8 = 53u8;
pub const THOST_FTDC_EIDT_SHFE: u8 = 83u8;
pub const THOST_FTDC_EIDT_CZCE: u8 = 90u8;
pub const THOST_FTDC_EIDT_DCE: u8 = 68u8;
pub const THOST_FTDC_EIDT_CFFEX: u8 = 74u8;
pub const THOST_FTDC_EIDT_INE: u8 = 78u8;
pub const THOST_FTDC_ECIDT_Hedge: u8 = 49u8;
pub const THOST_FTDC_ECIDT_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_ECIDT_Speculation: u8 = 51u8;
pub const THOST_FTDC_UF_NoUpdate: u8 = 48u8;
pub const THOST_FTDC_UF_Success: u8 = 49u8;
pub const THOST_FTDC_UF_Fail: u8 = 50u8;
pub const THOST_FTDC_UF_TCSuccess: u8 = 51u8;
pub const THOST_FTDC_UF_TCFail: u8 = 52u8;
pub const THOST_FTDC_UF_Cancel: u8 = 53u8;
pub const THOST_FTDC_AOID_OpenInvestor: u8 = 49u8;
pub const THOST_FTDC_AOID_ModifyIDCard: u8 = 50u8;
pub const THOST_FTDC_AOID_ModifyNoIDCard: u8 = 51u8;
pub const THOST_FTDC_AOID_ApplyTradingCode: u8 = 52u8;
pub const THOST_FTDC_AOID_CancelTradingCode: u8 = 53u8;
pub const THOST_FTDC_AOID_CancelInvestor: u8 = 54u8;
pub const THOST_FTDC_AOID_FreezeAccount: u8 = 56u8;
pub const THOST_FTDC_AOID_ActiveFreezeAccount: u8 = 57u8;
pub const THOST_FTDC_ASID_NoComplete: u8 = 49u8;
pub const THOST_FTDC_ASID_Submited: u8 = 50u8;
pub const THOST_FTDC_ASID_Checked: u8 = 51u8;
pub const THOST_FTDC_ASID_Refused: u8 = 52u8;
pub const THOST_FTDC_ASID_Deleted: u8 = 53u8;
pub const THOST_FTDC_UOASM_ByAPI: u8 = 49u8;
pub const THOST_FTDC_UOASM_ByFile: u8 = 50u8;
pub const THOST_FTDC_EvM_ADD: u8 = 49u8;
pub const THOST_FTDC_EvM_UPDATE: u8 = 50u8;
pub const THOST_FTDC_EvM_DELETE: u8 = 51u8;
pub const THOST_FTDC_EvM_CHECK: u8 = 52u8;
pub const THOST_FTDC_EvM_COPY: u8 = 53u8;
pub const THOST_FTDC_EvM_CANCEL: u8 = 54u8;
pub const THOST_FTDC_EvM_Reverse: u8 = 55u8;
pub const THOST_FTDC_UOAA_ASR: u8 = 49u8;
pub const THOST_FTDC_UOAA_ASNR: u8 = 50u8;
pub const THOST_FTDC_UOAA_NSAR: u8 = 51u8;
pub const THOST_FTDC_UOAA_NSR: u8 = 52u8;
pub const THOST_FTDC_EvM_InvestorGroupFlow: u8 = 49u8;
pub const THOST_FTDC_EvM_InvestorRate: u8 = 50u8;
pub const THOST_FTDC_EvM_InvestorCommRateModel: u8 = 51u8;
pub const THOST_FTDC_CL_Zero: u8 = 48u8;
pub const THOST_FTDC_CL_One: u8 = 49u8;
pub const THOST_FTDC_CL_Two: u8 = 50u8;
pub const THOST_FTDC_CHS_Init: u8 = 48u8;
pub const THOST_FTDC_CHS_Checking: u8 = 49u8;
pub const THOST_FTDC_CHS_Checked: u8 = 50u8;
pub const THOST_FTDC_CHS_Refuse: u8 = 51u8;
pub const THOST_FTDC_CHS_Cancel: u8 = 52u8;
pub const THOST_FTDC_CHU_Unused: u8 = 48u8;
pub const THOST_FTDC_CHU_Used: u8 = 49u8;
pub const THOST_FTDC_CHU_Fail: u8 = 50u8;
pub const THOST_FTDC_BAO_ByAccProperty: u8 = 48u8;
pub const THOST_FTDC_BAO_ByFBTransfer: u8 = 49u8;
pub const THOST_FTDC_MBTS_ByInstrument: u8 = 48u8;
pub const THOST_FTDC_MBTS_ByDayInsPrc: u8 = 49u8;
pub const THOST_FTDC_MBTS_ByDayIns: u8 = 50u8;
pub const THOST_FTDC_OTP_NONE: u8 = 48u8;
pub const THOST_FTDC_OTP_TOTP: u8 = 49u8;
pub const THOST_FTDC_OTPS_Unused: u8 = 48u8;
pub const THOST_FTDC_OTPS_Used: u8 = 49u8;
pub const THOST_FTDC_OTPS_Disuse: u8 = 50u8;
pub const THOST_FTDC_BUT_Investor: u8 = 49u8;
pub const THOST_FTDC_BUT_BrokerUser: u8 = 50u8;
pub const THOST_FTDC_FUTT_Commodity: u8 = 49u8;
pub const THOST_FTDC_FUTT_Financial: u8 = 50u8;
pub const THOST_FTDC_FET_Restriction: u8 = 48u8;
pub const THOST_FTDC_FET_TodayRestriction: u8 = 49u8;
pub const THOST_FTDC_FET_Transfer: u8 = 50u8;
pub const THOST_FTDC_FET_Credit: u8 = 51u8;
pub const THOST_FTDC_FET_InvestorWithdrawAlm: u8 = 52u8;
pub const THOST_FTDC_FET_BankRestriction: u8 = 53u8;
pub const THOST_FTDC_FET_Accountregister: u8 = 54u8;
pub const THOST_FTDC_FET_ExchangeFundIO: u8 = 55u8;
pub const THOST_FTDC_FET_InvestorFundIO: u8 = 56u8;
pub const THOST_FTDC_AST_FBTransfer: u8 = 48u8;
pub const THOST_FTDC_AST_ManualEntry: u8 = 49u8;
pub const THOST_FTDC_CST_UnifyAccount: u8 = 48u8;
pub const THOST_FTDC_CST_ManualEntry: u8 = 49u8;
pub const THOST_FTDC_UR_All: u8 = 48u8;
pub const THOST_FTDC_UR_Single: u8 = 49u8;
pub const THOST_FTDC_BG_Investor: u8 = 50u8;
pub const THOST_FTDC_BG_Group: u8 = 49u8;
pub const THOST_FTDC_TSSM_Instrument: u8 = 49u8;
pub const THOST_FTDC_TSSM_Product: u8 = 50u8;
pub const THOST_FTDC_TSSM_Exchange: u8 = 51u8;
pub const THOST_FTDC_ESM_Relative: u8 = 49u8;
pub const THOST_FTDC_ESM_Typical: u8 = 50u8;
pub const THOST_FTDC_RIR_All: u8 = 49u8;
pub const THOST_FTDC_RIR_Model: u8 = 50u8;
pub const THOST_FTDC_RIR_Single: u8 = 51u8;
pub const THOST_FTDC_SDS_Initialize: u8 = 48u8;
pub const THOST_FTDC_SDS_Settlementing: u8 = 49u8;
pub const THOST_FTDC_SDS_Settlemented: u8 = 50u8;
pub const THOST_FTDC_TSRC_NORMAL: u8 = 48u8;
pub const THOST_FTDC_TSRC_QUERY: u8 = 49u8;
pub const THOST_FTDC_FSM_Product: u8 = 49u8;
pub const THOST_FTDC_FSM_Exchange: u8 = 50u8;
pub const THOST_FTDC_FSM_All: u8 = 51u8;
pub const THOST_FTDC_BIR_Property: u8 = 49u8;
pub const THOST_FTDC_BIR_All: u8 = 50u8;
pub const THOST_FTDC_PIR_All: u8 = 49u8;
pub const THOST_FTDC_PIR_Property: u8 = 50u8;
pub const THOST_FTDC_PIR_Single: u8 = 51u8;
pub const THOST_FTDC_FIS_NoCreate: u8 = 48u8;
pub const THOST_FTDC_FIS_Created: u8 = 49u8;
pub const THOST_FTDC_FIS_Failed: u8 = 50u8;
pub const THOST_FTDC_FGS_FileTransmit: u8 = 48u8;
pub const THOST_FTDC_FGS_FileGen: u8 = 49u8;
pub const THOST_FTDC_SoM_Add: u8 = 49u8;
pub const THOST_FTDC_SoM_Update: u8 = 50u8;
pub const THOST_FTDC_SoM_Delete: u8 = 51u8;
pub const THOST_FTDC_SoM_Copy: u8 = 52u8;
pub const THOST_FTDC_SoM_AcTive: u8 = 53u8;
pub const THOST_FTDC_SoM_CanCel: u8 = 54u8;
pub const THOST_FTDC_SoM_ReSet: u8 = 55u8;
pub const THOST_FTDC_SoT_UpdatePassword: u8 = 48u8;
pub const THOST_FTDC_SoT_UserDepartment: u8 = 49u8;
pub const THOST_FTDC_SoT_RoleManager: u8 = 50u8;
pub const THOST_FTDC_SoT_RoleFunction: u8 = 51u8;
pub const THOST_FTDC_SoT_BaseParam: u8 = 52u8;
pub const THOST_FTDC_SoT_SetUserID: u8 = 53u8;
pub const THOST_FTDC_SoT_SetUserRole: u8 = 54u8;
pub const THOST_FTDC_SoT_UserIpRestriction: u8 = 55u8;
pub const THOST_FTDC_SoT_DepartmentManager: u8 = 56u8;
pub const THOST_FTDC_SoT_DepartmentCopy: u8 = 57u8;
pub const THOST_FTDC_SoT_Tradingcode: u8 = 65u8;
pub const THOST_FTDC_SoT_InvestorStatus: u8 = 66u8;
pub const THOST_FTDC_SoT_InvestorAuthority: u8 = 67u8;
pub const THOST_FTDC_SoT_PropertySet: u8 = 68u8;
pub const THOST_FTDC_SoT_ReSetInvestorPasswd: u8 = 69u8;
pub const THOST_FTDC_SoT_InvestorPersonalityInfo: u8 = 70u8;
pub const THOST_FTDC_CSRCQ_Current: u8 = 48u8;
pub const THOST_FTDC_CSRCQ_History: u8 = 49u8;
pub const THOST_FTDC_FRS_Normal: u8 = 49u8;
pub const THOST_FTDC_FRS_Freeze: u8 = 48u8;
pub const THOST_FTDC_STST_Standard: u8 = 48u8;
pub const THOST_FTDC_STST_NonStandard: u8 = 49u8;
pub const THOST_FTDC_RPT_Freeze: u8 = 49u8;
pub const THOST_FTDC_RPT_FreezeActive: u8 = 50u8;
pub const THOST_FTDC_RPT_OpenLimit: u8 = 51u8;
pub const THOST_FTDC_RPT_RelieveOpenLimit: u8 = 52u8;
pub const THOST_FTDC_AMLDS_Normal: u8 = 48u8;
pub const THOST_FTDC_AMLDS_Deleted: u8 = 49u8;
pub const THOST_FTDC_AMLCHS_Init: u8 = 48u8;
pub const THOST_FTDC_AMLCHS_Checking: u8 = 49u8;
pub const THOST_FTDC_AMLCHS_Checked: u8 = 50u8;
pub const THOST_FTDC_AMLCHS_RefuseReport: u8 = 51u8;
pub const THOST_FTDC_AMLDT_DrawDay: u8 = 48u8;
pub const THOST_FTDC_AMLDT_TouchDay: u8 = 49u8;
pub const THOST_FTDC_AMLCL_CheckLevel0: u8 = 48u8;
pub const THOST_FTDC_AMLCL_CheckLevel1: u8 = 49u8;
pub const THOST_FTDC_AMLCL_CheckLevel2: u8 = 50u8;
pub const THOST_FTDC_AMLCL_CheckLevel3: u8 = 51u8;
pub const THOST_FTDC_EFT_CSV: u8 = 48u8;
pub const THOST_FTDC_EFT_EXCEL: u8 = 49u8;
pub const THOST_FTDC_EFT_DBF: u8 = 50u8;
pub const THOST_FTDC_SMT_Before: u8 = 49u8;
pub const THOST_FTDC_SMT_Settlement: u8 = 50u8;
pub const THOST_FTDC_SMT_After: u8 = 51u8;
pub const THOST_FTDC_SMT_Settlemented: u8 = 52u8;
pub const THOST_FTDC_SML_Must: u8 = 49u8;
pub const THOST_FTDC_SML_Alarm: u8 = 50u8;
pub const THOST_FTDC_SML_Prompt: u8 = 51u8;
pub const THOST_FTDC_SML_Ignore: u8 = 52u8;
pub const THOST_FTDC_SMG_Exhcange: u8 = 49u8;
pub const THOST_FTDC_SMG_ASP: u8 = 50u8;
pub const THOST_FTDC_SMG_CSRC: u8 = 51u8;
pub const THOST_FTDC_LUT_Repeatable: u8 = 49u8;
pub const THOST_FTDC_LUT_Unrepeatable: u8 = 50u8;
pub const THOST_FTDC_DAR_Settle: u8 = 49u8;
pub const THOST_FTDC_DAR_Exchange: u8 = 50u8;
pub const THOST_FTDC_DAR_CSRC: u8 = 51u8;
pub const THOST_FTDC_MGT_ExchMarginRate: u8 = 48u8;
pub const THOST_FTDC_MGT_InstrMarginRate: u8 = 49u8;
pub const THOST_FTDC_MGT_InstrMarginRateTrade: u8 = 50u8;
pub const THOST_FTDC_ACT_Intraday: u8 = 49u8;
pub const THOST_FTDC_ACT_Long: u8 = 50u8;
pub const THOST_FTDC_MRT_Exchange: u8 = 49u8;
pub const THOST_FTDC_MRT_Investor: u8 = 50u8;
pub const THOST_FTDC_MRT_InvestorTrade: u8 = 51u8;
pub const THOST_FTDC_BUS_UnBak: u8 = 48u8;
pub const THOST_FTDC_BUS_BakUp: u8 = 49u8;
pub const THOST_FTDC_BUS_BakUped: u8 = 50u8;
pub const THOST_FTDC_BUS_BakFail: u8 = 51u8;
pub const THOST_FTDC_SIS_UnInitialize: u8 = 48u8;
pub const THOST_FTDC_SIS_Initialize: u8 = 49u8;
pub const THOST_FTDC_SIS_Initialized: u8 = 50u8;
pub const THOST_FTDC_SRS_NoCreate: u8 = 48u8;
pub const THOST_FTDC_SRS_Create: u8 = 49u8;
pub const THOST_FTDC_SRS_Created: u8 = 50u8;
pub const THOST_FTDC_SRS_CreateFail: u8 = 51u8;
pub const THOST_FTDC_SSS_UnSaveData: u8 = 48u8;
pub const THOST_FTDC_SSS_SaveDatad: u8 = 49u8;
pub const THOST_FTDC_SAS_UnArchived: u8 = 48u8;
pub const THOST_FTDC_SAS_Archiving: u8 = 49u8;
pub const THOST_FTDC_SAS_Archived: u8 = 50u8;
pub const THOST_FTDC_SAS_ArchiveFail: u8 = 51u8;
pub const THOST_FTDC_CTPT_Unkown: u8 = 48u8;
pub const THOST_FTDC_CTPT_MainCenter: u8 = 49u8;
pub const THOST_FTDC_CTPT_BackUp: u8 = 50u8;
pub const THOST_FTDC_CDT_Normal: u8 = 48u8;
pub const THOST_FTDC_CDT_SpecFirst: u8 = 49u8;
pub const THOST_FTDC_MFUR_None: u8 = 48u8;
pub const THOST_FTDC_MFUR_Margin: u8 = 49u8;
pub const THOST_FTDC_MFUR_All: u8 = 50u8;
pub const THOST_FTDC_MFUR_CNY3: u8 = 51u8;
pub const THOST_FTDC_SPT_CzceHedge: u8 = 49u8;
pub const THOST_FTDC_SPT_IneForeignCurrency: u8 = 50u8;
pub const THOST_FTDC_SPT_DceOpenClose: u8 = 51u8;
pub const THOST_FTDC_FMT_Mortgage: u8 = 49u8;
pub const THOST_FTDC_FMT_Redemption: u8 = 50u8;
pub const THOST_FTDC_ASPI_BaseMargin: u8 = 49u8;
pub const THOST_FTDC_ASPI_LowestInterest: u8 = 50u8;
pub const THOST_FTDC_FMD_In: u8 = 49u8;
pub const THOST_FTDC_FMD_Out: u8 = 50u8;
pub const THOST_FTDC_BT_Profit: u8 = 48u8;
pub const THOST_FTDC_BT_Loss: u8 = 49u8;
pub const THOST_FTDC_BT_Other: u8 = 90u8;
pub const THOST_FTDC_SST_Manual: u8 = 48u8;
pub const THOST_FTDC_SST_Automatic: u8 = 49u8;
pub const THOST_FTDC_CED_Settlement: u8 = 48u8;
pub const THOST_FTDC_CED_Sale: u8 = 49u8;
pub const THOST_FTDC_CSS_Entry: u8 = 49u8;
pub const THOST_FTDC_CSS_Approve: u8 = 50u8;
pub const THOST_FTDC_CSS_Refuse: u8 = 51u8;
pub const THOST_FTDC_CSS_Revoke: u8 = 52u8;
pub const THOST_FTDC_CSS_Send: u8 = 53u8;
pub const THOST_FTDC_CSS_Success: u8 = 54u8;
pub const THOST_FTDC_CSS_Failure: u8 = 55u8;
pub const THOST_FTDC_REQF_NoSend: u8 = 48u8;
pub const THOST_FTDC_REQF_SendSuccess: u8 = 49u8;
pub const THOST_FTDC_REQF_SendFailed: u8 = 50u8;
pub const THOST_FTDC_REQF_WaitReSend: u8 = 51u8;
pub const THOST_FTDC_RESF_Success: u8 = 48u8;
pub const THOST_FTDC_RESF_InsuffiCient: u8 = 49u8;
pub const THOST_FTDC_RESF_UnKnown: u8 = 56u8;
pub const THOST_FTDC_EXS_Before: u8 = 48u8;
pub const THOST_FTDC_EXS_After: u8 = 49u8;
pub const THOST_FTDC_CR_Domestic: u8 = 49u8;
pub const THOST_FTDC_CR_GMT: u8 = 50u8;
pub const THOST_FTDC_CR_Foreign: u8 = 51u8;
pub const THOST_FTDC_HB_No: u8 = 48u8;
pub const THOST_FTDC_HB_Yes: u8 = 49u8;
pub const THOST_FTDC_SM_Normal: u8 = 49u8;
pub const THOST_FTDC_SM_Emerge: u8 = 50u8;
pub const THOST_FTDC_SM_Restore: u8 = 51u8;
pub const THOST_FTDC_TPT_Full: u8 = 49u8;
pub const THOST_FTDC_TPT_Increment: u8 = 50u8;
pub const THOST_FTDC_TPT_BackUp: u8 = 51u8;
pub const THOST_FTDC_LM_Trade: u8 = 48u8;
pub const THOST_FTDC_LM_Transfer: u8 = 49u8;
pub const THOST_FTDC_CPT_Instrument: u8 = 49u8;
pub const THOST_FTDC_CPT_Margin: u8 = 50u8;
pub const THOST_FTDC_HT_Yes: u8 = 49u8;
pub const THOST_FTDC_HT_No: u8 = 48u8;
pub const THOST_FTDC_AMT_Bank: u8 = 49u8;
pub const THOST_FTDC_AMT_Securities: u8 = 50u8;
pub const THOST_FTDC_AMT_Fund: u8 = 51u8;
pub const THOST_FTDC_AMT_Insurance: u8 = 52u8;
pub const THOST_FTDC_AMT_Trust: u8 = 53u8;
pub const THOST_FTDC_AMT_Other: u8 = 57u8;
pub const THOST_FTDC_CFIOT_FundIO: u8 = 48u8;
pub const THOST_FTDC_CFIOT_SwapCurrency: u8 = 49u8;
pub const THOST_FTDC_CAT_Futures: u8 = 49u8;
pub const THOST_FTDC_CAT_AssetmgrFuture: u8 = 50u8;
pub const THOST_FTDC_CAT_AssetmgrTrustee: u8 = 51u8;
pub const THOST_FTDC_CAT_AssetmgrTransfer: u8 = 52u8;
pub const THOST_FTDC_LT_Chinese: u8 = 49u8;
pub const THOST_FTDC_LT_English: u8 = 50u8;
pub const THOST_FTDC_AMCT_Person: u8 = 49u8;
pub const THOST_FTDC_AMCT_Organ: u8 = 50u8;
pub const THOST_FTDC_AMCT_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_ASST_Futures: u8 = 51u8;
pub const THOST_FTDC_ASST_SpecialOrgan: u8 = 52u8;
pub const THOST_FTDC_CIT_HasExch: u8 = 48u8;
pub const THOST_FTDC_CIT_HasATP: u8 = 49u8;
pub const THOST_FTDC_CIT_HasDiff: u8 = 50u8;
pub const THOST_FTDC_DT_HandDeliv: u8 = 49u8;
pub const THOST_FTDC_DT_PersonDeliv: u8 = 50u8;
pub const THOST_FTDC_MMSA_NO: u8 = 48u8;
pub const THOST_FTDC_MMSA_YES: u8 = 49u8;
pub const THOST_FTDC_CACT_Person: u8 = 48u8;
pub const THOST_FTDC_CACT_Company: u8 = 49u8;
pub const THOST_FTDC_CACT_Other: u8 = 50u8;
pub const THOST_FTDC_UOAAT_Futures: u8 = 49u8;
pub const THOST_FTDC_UOAAT_SpecialOrgan: u8 = 50u8;
pub const THOST_FTDC_DEN_Buy: u8 = 48u8;
pub const THOST_FTDC_DEN_Sell: u8 = 49u8;
pub const THOST_FTDC_OFEN_Open: u8 = 48u8;
pub const THOST_FTDC_OFEN_Close: u8 = 49u8;
pub const THOST_FTDC_OFEN_ForceClose: u8 = 50u8;
pub const THOST_FTDC_OFEN_CloseToday: u8 = 51u8;
pub const THOST_FTDC_OFEN_CloseYesterday: u8 = 52u8;
pub const THOST_FTDC_OFEN_ForceOff: u8 = 53u8;
pub const THOST_FTDC_OFEN_LocalForceClose: u8 = 54u8;
pub const THOST_FTDC_HFEN_Speculation: u8 = 49u8;
pub const THOST_FTDC_HFEN_Arbitrage: u8 = 50u8;
pub const THOST_FTDC_HFEN_Hedge: u8 = 51u8;
pub const THOST_FTDC_FIOTEN_FundIO: u8 = 49u8;
pub const THOST_FTDC_FIOTEN_Transfer: u8 = 50u8;
pub const THOST_FTDC_FIOTEN_SwapCurrency: u8 = 51u8;
pub const THOST_FTDC_FTEN_Deposite: u8 = 49u8;
pub const THOST_FTDC_FTEN_ItemFund: u8 = 50u8;
pub const THOST_FTDC_FTEN_Company: u8 = 51u8;
pub const THOST_FTDC_FTEN_InnerTransfer: u8 = 52u8;
pub const THOST_FTDC_FDEN_In: u8 = 49u8;
pub const THOST_FTDC_FDEN_Out: u8 = 50u8;
pub const THOST_FTDC_FMDEN_In: u8 = 49u8;
pub const THOST_FTDC_FMDEN_Out: u8 = 50u8;
pub const THOST_FTDC_CP_CallOptions: u8 = 49u8;
pub const THOST_FTDC_CP_PutOptions: u8 = 50u8;
pub const THOST_FTDC_STM_Continental: u8 = 48u8;
pub const THOST_FTDC_STM_American: u8 = 49u8;
pub const THOST_FTDC_STM_Bermuda: u8 = 50u8;
pub const THOST_FTDC_STT_Hedge: u8 = 48u8;
pub const THOST_FTDC_STT_Match: u8 = 49u8;
pub const THOST_FTDC_APPT_NotStrikeNum: u8 = 52u8;
pub const THOST_FTDC_GUDS_Gen: u8 = 48u8;
pub const THOST_FTDC_GUDS_Hand: u8 = 49u8;
pub const THOST_FTDC_OER_NoExec: u8 = 110u8;
pub const THOST_FTDC_OER_Canceled: u8 = 99u8;
pub const THOST_FTDC_OER_OK: u8 = 48u8;
pub const THOST_FTDC_OER_NoPosition: u8 = 49u8;
pub const THOST_FTDC_OER_NoDeposit: u8 = 50u8;
pub const THOST_FTDC_OER_NoParticipant: u8 = 51u8;
pub const THOST_FTDC_OER_NoClient: u8 = 52u8;
pub const THOST_FTDC_OER_NoInstrument: u8 = 54u8;
pub const THOST_FTDC_OER_NoRight: u8 = 55u8;
pub const THOST_FTDC_OER_InvalidVolume: u8 = 56u8;
pub const THOST_FTDC_OER_NoEnoughHistoryTrade: u8 = 57u8;
pub const THOST_FTDC_OER_Unknown: u8 = 97u8;
pub const THOST_FTDC_COMBT_Future: u8 = 48u8;
pub const THOST_FTDC_COMBT_BUL: u8 = 49u8;
pub const THOST_FTDC_COMBT_BER: u8 = 50u8;
pub const THOST_FTDC_COMBT_STD: u8 = 51u8;
pub const THOST_FTDC_COMBT_STG: u8 = 52u8;
pub const THOST_FTDC_COMBT_PRT: u8 = 53u8;
pub const THOST_FTDC_COMBT_CAS: u8 = 54u8;
pub const THOST_FTDC_COMBT_OPL: u8 = 55u8;
pub const THOST_FTDC_COMBT_BFO: u8 = 56u8;
pub const THOST_FTDC_COMBT_BLS: u8 = 57u8;
pub const THOST_FTDC_COMBT_BES: u8 = 97u8;
pub const THOST_FTDC_DCECOMBT_SPL: u8 = 48u8;
pub const THOST_FTDC_DCECOMBT_OPL: u8 = 49u8;
pub const THOST_FTDC_DCECOMBT_SP: u8 = 50u8;
pub const THOST_FTDC_DCECOMBT_SPC: u8 = 51u8;
pub const THOST_FTDC_DCECOMBT_BLS: u8 = 52u8;
pub const THOST_FTDC_DCECOMBT_BES: u8 = 53u8;
pub const THOST_FTDC_DCECOMBT_CAS: u8 = 54u8;
pub const THOST_FTDC_DCECOMBT_STD: u8 = 55u8;
pub const THOST_FTDC_DCECOMBT_STG: u8 = 56u8;
pub const THOST_FTDC_DCECOMBT_BFO: u8 = 57u8;
pub const THOST_FTDC_DCECOMBT_SFO: u8 = 97u8;
pub const THOST_FTDC_ORPT_PreSettlementPrice: u8 = 49u8;
pub const THOST_FTDC_ORPT_OpenPrice: u8 = 52u8;
pub const THOST_FTDC_ORPT_MaxPreSettlementPrice: u8 = 53u8;
pub const THOST_FTDC_BLAG_Default: u8 = 49u8;
pub const THOST_FTDC_BLAG_IncludeOptValLost: u8 = 50u8;
pub const THOST_FTDC_ACTP_Exec: u8 = 49u8;
pub const THOST_FTDC_ACTP_Abandon: u8 = 50u8;
pub const THOST_FTDC_FQST_Submitted: u8 = 97u8;
pub const THOST_FTDC_FQST_Accepted: u8 = 98u8;
pub const THOST_FTDC_FQST_Rejected: u8 = 99u8;
pub const THOST_FTDC_VM_Absolute: u8 = 48u8;
pub const THOST_FTDC_VM_Ratio: u8 = 49u8;
pub const THOST_FTDC_EOPF_Reserve: u8 = 48u8;
pub const THOST_FTDC_EOPF_UnReserve: u8 = 49u8;
pub const THOST_FTDC_EOCF_AutoClose: u8 = 48u8;
pub const THOST_FTDC_EOCF_NotToClose: u8 = 49u8;
pub const THOST_FTDC_PTE_Futures: u8 = 49u8;
pub const THOST_FTDC_PTE_Options: u8 = 50u8;
pub const THOST_FTDC_CUFN_CUFN_O: u8 = 79u8;
pub const THOST_FTDC_CUFN_CUFN_T: u8 = 84u8;
pub const THOST_FTDC_CUFN_CUFN_P: u8 = 80u8;
pub const THOST_FTDC_CUFN_CUFN_N: u8 = 78u8;
pub const THOST_FTDC_CUFN_CUFN_L: u8 = 76u8;
pub const THOST_FTDC_CUFN_CUFN_F: u8 = 70u8;
pub const THOST_FTDC_CUFN_CUFN_C: u8 = 67u8;
pub const THOST_FTDC_CUFN_CUFN_M: u8 = 77u8;
pub const THOST_FTDC_DUFN_DUFN_O: u8 = 79u8;
pub const THOST_FTDC_DUFN_DUFN_T: u8 = 84u8;
pub const THOST_FTDC_DUFN_DUFN_P: u8 = 80u8;
pub const THOST_FTDC_DUFN_DUFN_F: u8 = 70u8;
pub const THOST_FTDC_DUFN_DUFN_C: u8 = 67u8;
pub const THOST_FTDC_DUFN_DUFN_D: u8 = 68u8;
pub const THOST_FTDC_DUFN_DUFN_M: u8 = 77u8;
pub const THOST_FTDC_DUFN_DUFN_S: u8 = 83u8;
pub const THOST_FTDC_SUFN_SUFN_O: u8 = 79u8;
pub const THOST_FTDC_SUFN_SUFN_T: u8 = 84u8;
pub const THOST_FTDC_SUFN_SUFN_P: u8 = 80u8;
pub const THOST_FTDC_SUFN_SUFN_F: u8 = 70u8;
pub const THOST_FTDC_CFUFN_SUFN_T: u8 = 84u8;
pub const THOST_FTDC_CFUFN_SUFN_P: u8 = 80u8;
pub const THOST_FTDC_CFUFN_SUFN_F: u8 = 70u8;
pub const THOST_FTDC_CFUFN_SUFN_S: u8 = 83u8;
pub const THOST_FTDC_CMDR_Comb: u8 = 48u8;
pub const THOST_FTDC_CMDR_UnComb: u8 = 49u8;
pub const THOST_FTDC_CMDR_DelComb: u8 = 50u8;
pub const THOST_FTDC_STOV_RealValue: u8 = 49u8;
pub const THOST_FTDC_STOV_ProfitValue: u8 = 50u8;
pub const THOST_FTDC_STOV_RealRatio: u8 = 51u8;
pub const THOST_FTDC_STOV_ProfitRatio: u8 = 52u8;
pub const THOST_FTDC_ROAST_Processing: u8 = 48u8;
pub const THOST_FTDC_ROAST_Cancelled: u8 = 49u8;
pub const THOST_FTDC_ROAST_Opened: u8 = 50u8;
pub const THOST_FTDC_ROAST_Invalid: u8 = 51u8;
pub const THOST_FTDC_WPSR_Lib: u8 = 49u8;
pub const THOST_FTDC_WPSR_Manual: u8 = 50u8;
pub const THOST_FTDC_OSCF_CloseSelfOptionPosition: u8 = 49u8;
pub const THOST_FTDC_OSCF_ReserveOptionPosition: u8 = 50u8;
pub const THOST_FTDC_OSCF_SellCloseSelfFuturePosition: u8 = 51u8;
pub const THOST_FTDC_OSCF_ReserveFuturePosition: u8 = 52u8;
pub const THOST_FTDC_BZTP_Future: u8 = 49u8;
pub const THOST_FTDC_BZTP_Stock: u8 = 50u8;
pub const THOST_FTDC_APP_TYPE_Investor: u8 = 49u8;
pub const THOST_FTDC_APP_TYPE_InvestorRelay: u8 = 50u8;
pub const THOST_FTDC_APP_TYPE_OperatorRelay: u8 = 51u8;
pub const THOST_FTDC_APP_TYPE_UnKnown: u8 = 52u8;
pub const THOST_FTDC_RV_Right: u8 = 48u8;
pub const THOST_FTDC_RV_Refuse: u8 = 49u8;
pub const THOST_FTDC_OTC_TRDT_Block: u8 = 48u8;
pub const THOST_FTDC_OTC_TRDT_EFP: u8 = 49u8;
pub const THOST_FTDC_OTC_MT_DV01: u8 = 49u8;
pub const THOST_FTDC_OTC_MT_ParValue: u8 = 50u8;
pub const THOST_FTDC_AU_WHITE: u8 = 48u8;
pub const THOST_FTDC_AU_BLACK: u8 = 49u8;
pub const THOST_FTDC_INS_ALL: u8 = 48u8;
pub const THOST_FTDC_INS_FUTURE: u8 = 49u8;
pub const THOST_FTDC_INS_OPTION: u8 = 50u8;
pub const THOST_FTDC_INS_COMB: u8 = 51u8;
pub const THOST_FTDC_TD_ALL: u8 = 48u8;
pub const THOST_FTDC_TD_TRADE: u8 = 49u8;
pub const THOST_FTDC_TD_UNTRADE: u8 = 50u8;
pub const THOST_FTDC_PS_tradeable: u8 = 49u8;
pub const THOST_FTDC_PS_untradeable: u8 = 50u8;
pub const THOST_FTDC_SDS_Readable: u8 = 49u8;
pub const THOST_FTDC_SDS_Reading: u8 = 50u8;
pub const THOST_FTDC_SDS_Readend: u8 = 51u8;
pub const THOST_FTDC_SDS_OptErr: u8 = 101u8;
pub const THOST_FTDC_ACD_Add: u8 = 49u8;
pub const THOST_FTDC_ACD_Del: u8 = 50u8;
pub const THOST_FTDC_ACD_Upd: u8 = 51u8;
pub const THOST_FTDC_OAC_Balance: u8 = 49u8;
pub const THOST_FTDC_OAC_OrigFirst: u8 = 50u8;
pub const THOST_FTDC_PLCL_None: u8 = 48u8;
pub const THOST_FTDC_PLCL_Product: u8 = 49u8;
pub const THOST_FTDC_PLCL_Inst: u8 = 50u8;
pub const THOST_FTDC_OFCL_None: u8 = 48u8;
pub const THOST_FTDC_OFCL_Product: u8 = 49u8;
pub const THOST_FTDC_OFCL_Inst: u8 = 50u8;
pub const THOST_FTDC_EBL_False: u8 = 48u8;
pub const THOST_FTDC_EBL_True: u8 = 49u8;
pub const THOST_FTDC_ETR_USUAL: u8 = 49u8;
pub const THOST_FTDC_ETR_FNSP: u8 = 50u8;
pub const THOST_FTDC_ETR_BNSP: u8 = 51u8;
pub const THOST_FTDC_ETR_SPOT: u8 = 52u8;
pub const THOST_FTDC_EPF_None: u8 = 48u8;
pub const THOST_FTDC_EPF_SPBM: u8 = 49u8;
pub const THOST_FTDC_EPF_RULE: u8 = 50u8;
pub const THOST_FTDC_EPF_SPMM: u8 = 51u8;
pub const THOST_FTDC_EPF_RCAMS: u8 = 52u8;
pub const THOST_FTDC_WDPID_CashIn: u8 = 67u8;
pub const THOST_FTDC_ITR_CloseOnly: u8 = 49u8;
pub const THOST_FTDC_ITR_Forbidden: u8 = 50u8;
pub const THOST_FTDC_IMID_BothSide: u8 = 49u8;
pub const THOST_FTDC_IMID_MMSA: u8 = 50u8;
pub const THOST_FTDC_IMID_SPMM: u8 = 51u8;
pub const THOST_FTDC_ERComb_BUC: u8 = 48u8;
pub const THOST_FTDC_ERComb_BEC: u8 = 49u8;
pub const THOST_FTDC_ERComb_BEP: u8 = 50u8;
pub const THOST_FTDC_ERComb_BUP: u8 = 51u8;
pub const THOST_FTDC_ERComb_CAS: u8 = 52u8;
pub const THOST_FTDC_EET_None: u8 = 48u8;
pub const THOST_FTDC_EET_SPBM_AddOnHedge: u8 = 49u8;
pub const THOST_FTDC_EIC_Usual: u8 = 49u8;
pub const THOST_FTDC_EIC_Delivery: u8 = 50u8;
pub const THOST_FTDC_EIC_NonComb: u8 = 51u8;
pub const THOST_FTDC_PCF_None: u8 = 48u8;
pub const THOST_FTDC_PCF_OnlyFrozen: u8 = 49u8;
pub const THOST_FTDC_PCF_PositionChange: u8 = 50u8;
pub const THOST_FTDC_PRS_Init: u8 = 48u8;
pub const THOST_FTDC_PRS_Sync: u8 = 49u8;
pub const THOST_FTDC_PRS_UserUpd: u8 = 50u8;
pub const THOST_FTDC_PRS_SuperUserUpd: u8 = 51u8;
#[repr(u32)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub enum THOST_TE_RESUME_TYPE {
    THOST_TERT_RESTART = 0,
    THOST_TERT_RESUME = 1,
    THOST_TERT_QUICK = 2,
    THOST_TERT_NONE = 3,
}
#[doc = "\nTFtdcTraderIDType��һ������������Ա��������\n"]
pub type TThostFtdcTraderIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcInvestorIDType��һ��Ͷ���ߴ�������\n"]
pub type TThostFtdcInvestorIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcBrokerIDType��һ�����\u{379}�˾��������\n"]
pub type TThostFtdcBrokerIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcBrokerAbbrType��һ�����\u{379}�˾�������\n"]
pub type TThostFtdcBrokerAbbrType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcBrokerNameType��һ�����\u{379}�˾��������\n"]
pub type TThostFtdcBrokerNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = "\nTFtdcOldExchangeInstIDType��һ����Լ�ڽ������Ĵ�������\n"]
pub type TThostFtdcOldExchangeInstIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcExchangeInstIDType��һ����Լ�ڽ������Ĵ�������\n"]
pub type TThostFtdcExchangeInstIDType = [::std::os::raw::c_uchar; 81usize];
#[doc = "\nTFtdcOrderRefType��һ��������������\n"]
pub type TThostFtdcOrderRefType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcParticipantIDType��һ����Ա��������\n"]
pub type TThostFtdcParticipantIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcUserIDType��һ���û���������\n"]
pub type TThostFtdcUserIDType = [::std::os::raw::c_uchar; 16usize];
#[doc = "\nTFtdcPasswordType��һ����������\n"]
pub type TThostFtdcPasswordType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcClientIDType��һ�����ױ�������\n"]
pub type TThostFtdcClientIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcInstrumentIDType��һ����Լ��������\n"]
pub type TThostFtdcInstrumentIDType = [::std::os::raw::c_uchar; 81usize];
#[doc = "\nTFtdcOldInstrumentIDType��һ����Լ��������\n"]
pub type TThostFtdcOldInstrumentIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcInstrumentCodeType��һ����Լ��ʶ������\n"]
pub type TThostFtdcInstrumentCodeType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcMarketIDType��һ���г���������\n"]
pub type TThostFtdcMarketIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcProductNameType��һ����Ʒ��������\n"]
pub type TThostFtdcProductNameType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcExchangeIDType��һ����������������\n"]
pub type TThostFtdcExchangeIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcExchangeNameType��һ����������������\n"]
pub type TThostFtdcExchangeNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcExchangeAbbrType��һ���������������\n"]
pub type TThostFtdcExchangeAbbrType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcExchangeFlagType��һ����������־����\n"]
pub type TThostFtdcExchangeFlagType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcMacAddressType��һ��Mac��\u{5b7}����\n"]
pub type TThostFtdcMacAddressType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcSystemIDType��һ��ϵͳ�������\n"]
pub type TThostFtdcSystemIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcClientLoginRemarkType��һ���ͻ���¼��ע2����\n"]
pub type TThostFtdcClientLoginRemarkType = [::std::os::raw::c_uchar; 151usize];
pub type TThostFtdcExchangePropertyType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcDateType��һ����������\n"]
pub type TThostFtdcDateType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcTimeType��һ��ʱ������\n"]
pub type TThostFtdcTimeType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcLongTimeType��һ����ʱ������\n"]
pub type TThostFtdcLongTimeType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcInstrumentNameType��һ����Լ��������\n"]
pub type TThostFtdcInstrumentNameType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcSettlementGroupIDType��һ���������������\n"]
pub type TThostFtdcSettlementGroupIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcOrderSysIDType��һ�������������\n"]
pub type TThostFtdcOrderSysIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcTradeIDType��һ���ɽ��������\n"]
pub type TThostFtdcTradeIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcCommandTypeType��һ��DB������������\n"]
pub type TThostFtdcCommandTypeType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcOldIPAddressType��һ��IP��\u{5b7}����\n"]
pub type TThostFtdcOldIPAddressType = [::std::os::raw::c_uchar; 16usize];
#[doc = "\nTFtdcIPAddressType��һ��IP��\u{5b7}����\n"]
pub type TThostFtdcIPAddressType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcIPPortType��һ��IP�˿�����\n"]
pub type TThostFtdcIPPortType = ::std::os::raw::c_int;
#[doc = "\nTFtdcProductInfoType��һ����Ʒ��Ϣ����\n"]
pub type TThostFtdcProductInfoType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcProtocolInfoType��һ��Э����Ϣ����\n"]
pub type TThostFtdcProtocolInfoType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcBusinessUnitType��һ��ҵ��Ԫ����\n"]
pub type TThostFtdcBusinessUnitType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcDepositSeqNoType��һ���������ˮ������\n"]
pub type TThostFtdcDepositSeqNoType = [::std::os::raw::c_uchar; 15usize];
#[doc = "\nTFtdcIdentifiedCardNoType��һ��\u{5a4}����������\n"]
pub type TThostFtdcIdentifiedCardNoType = [::std::os::raw::c_uchar; 51usize];
pub type TThostFtdcIdCardTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcOrderLocalIDType��һ�����ر����������\n"]
pub type TThostFtdcOrderLocalIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcUserNameType��һ���û���������\n"]
pub type TThostFtdcUserNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = "\nTFtdcPartyNameType��һ����������������\n"]
pub type TThostFtdcPartyNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = "\nTFtdcErrorMsgType��һ��������Ϣ����\n"]
pub type TThostFtdcErrorMsgType = [::std::os::raw::c_uchar; 81usize];
#[doc = "\nTFtdcFieldNameType��һ���\u{5b6}�������\n"]
pub type TThostFtdcFieldNameType = [::std::os::raw::c_uchar; 2049usize];
#[doc = "\nTFtdcFieldContentType��һ���\u{5b6}���������\n"]
pub type TThostFtdcFieldContentType = [::std::os::raw::c_uchar; 2049usize];
#[doc = "\nTFtdcSystemNameType��һ��ϵͳ��������\n"]
pub type TThostFtdcSystemNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcContentType��һ����Ϣ��������\n"]
pub type TThostFtdcContentType = [::std::os::raw::c_uchar; 501usize];
pub type TThostFtdcInvestorRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDepartmentRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDataSyncStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerDataSyncStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcExchangeConnectStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcTraderConnectStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcFunctionCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerFunctionCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderActionStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderSubmitStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcPositionDateType = ::std::os::raw::c_uchar;
pub type TThostFtdcPositionDateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradingRoleType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductClassType = ::std::os::raw::c_uchar;
pub type TThostFtdcAPIProductClassType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstLifePhaseType = ::std::os::raw::c_uchar;
pub type TThostFtdcDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcPositionTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcPosiDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcSysSettlementStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcRatioAttrType = ::std::os::raw::c_uchar;
pub type TThostFtdcHedgeFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcBillHedgeFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcClientIDTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOffsetFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcForceCloseReasonType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTimeConditionType = ::std::os::raw::c_uchar;
pub type TThostFtdcVolumeConditionType = ::std::os::raw::c_uchar;
pub type TThostFtdcContingentConditionType = ::std::os::raw::c_uchar;
pub type TThostFtdcActionFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradingRightType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderSourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSpecPosiTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcPriceSourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstrumentStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstStatusEnterReasonType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcOrderActionRefType��һ������������������\n"]
pub type TThostFtdcOrderActionRefType = ::std::os::raw::c_int;
#[doc = "\nTFtdcInstallCountType��һ����װ��������\n"]
pub type TThostFtdcInstallCountType = ::std::os::raw::c_int;
#[doc = "\nTFtdcInstallIDType��һ����װ�������\n"]
pub type TThostFtdcInstallIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcErrorIDType��һ�������������\n"]
pub type TThostFtdcErrorIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcSettlementIDType��һ������������\n"]
pub type TThostFtdcSettlementIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcVolumeType��һ����������\n"]
pub type TThostFtdcVolumeType = ::std::os::raw::c_int;
#[doc = "\nTFtdcFrontIDType��һ��ǰ�ñ������\n"]
pub type TThostFtdcFrontIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcSessionIDType��һ���Ự�������\n"]
pub type TThostFtdcSessionIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcSequenceNoType��һ���������\n"]
pub type TThostFtdcSequenceNoType = ::std::os::raw::c_int;
#[doc = "\nTFtdcCommandNoType��һ��DB�����������\n"]
pub type TThostFtdcCommandNoType = ::std::os::raw::c_int;
#[doc = "\nTFtdcMillisecType��һ��ʱ�䣨���룩����\n"]
pub type TThostFtdcMillisecType = ::std::os::raw::c_int;
#[doc = "\nTFtdcSecType��һ��ʱ�䣨�룩����\n"]
pub type TThostFtdcSecType = ::std::os::raw::c_int;
#[doc = "\nTFtdcVolumeMultipleType��һ����Լ������������\n"]
pub type TThostFtdcVolumeMultipleType = ::std::os::raw::c_int;
#[doc = "\nTFtdcTradingSegmentSNType��һ�����\u{5fd}\u{5f6}α������\n"]
pub type TThostFtdcTradingSegmentSNType = ::std::os::raw::c_int;
#[doc = "\nTFtdcRequestIDType��һ������������\n"]
pub type TThostFtdcRequestIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcYearType��һ���������\n"]
pub type TThostFtdcYearType = ::std::os::raw::c_int;
#[doc = "\nTFtdcMonthType��һ���·�����\n"]
pub type TThostFtdcMonthType = ::std::os::raw::c_int;
#[doc = "\nTFtdcBoolType��һ������������\n"]
pub type TThostFtdcBoolType = ::std::os::raw::c_int;
#[doc = "\nTFtdcPriceType��һ���۸�����\n"]
pub type TThostFtdcPriceType = f64;
#[doc = "\nTFtdcCombOffsetFlagType��һ����Ͽ�ƽ��־����\n"]
pub type TThostFtdcCombOffsetFlagType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcCombHedgeFlagType��һ�����Ͷ���ױ���־����\n"]
pub type TThostFtdcCombHedgeFlagType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcRatioType��һ����������\n"]
pub type TThostFtdcRatioType = f64;
#[doc = "\nTFtdcMoneyType��һ���ʽ�����\n"]
pub type TThostFtdcMoneyType = f64;
#[doc = "\nTFtdcLargeVolumeType��һ�������������\n"]
pub type TThostFtdcLargeVolumeType = f64;
#[doc = "\nTFtdcSequenceSeriesType��һ������ϵ�к�����\n"]
pub type TThostFtdcSequenceSeriesType = ::std::os::raw::c_short;
#[doc = "\nTFtdcCommPhaseNoType��һ��\u{368}Ѷʱ�α������\n"]
pub type TThostFtdcCommPhaseNoType = ::std::os::raw::c_short;
#[doc = "\nTFtdcSequenceLabelType��һ�����б������\n"]
pub type TThostFtdcSequenceLabelType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcUnderlyingMultipleType��һ��������Ʒ��������\n"]
pub type TThostFtdcUnderlyingMultipleType = f64;
#[doc = "\nTFtdcPriorityType��һ�����ȼ�����\n"]
pub type TThostFtdcPriorityType = ::std::os::raw::c_int;
#[doc = "\nTFtdcContractCodeType��һ����\u{36c}�������\n"]
pub type TThostFtdcContractCodeType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcCityType��һ��������\n"]
pub type TThostFtdcCityType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcIsStockType��һ���Ƿ��������\n"]
pub type TThostFtdcIsStockType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcChannelType��һ����������\n"]
pub type TThostFtdcChannelType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcAddressType��һ��\u{368}Ѷ��\u{5b7}����\n"]
pub type TThostFtdcAddressType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcZipCodeType��һ��������������\n"]
pub type TThostFtdcZipCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcTelephoneType��һ����ϵ�绰����\n"]
pub type TThostFtdcTelephoneType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcFaxType��һ����������\n"]
pub type TThostFtdcFaxType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcMobileType��һ���\u{5bb}�����\n"]
pub type TThostFtdcMobileType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcEMailType��һ�������ʼ�����\n"]
pub type TThostFtdcEMailType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcMemoType��һ����ע����\n"]
pub type TThostFtdcMemoType = [::std::os::raw::c_uchar; 161usize];
#[doc = "\nTFtdcCompanyCodeType��һ����ҵ��������\n"]
pub type TThostFtdcCompanyCodeType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcWebsiteType��һ����վ��\u{5b7}����\n"]
pub type TThostFtdcWebsiteType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcTaxNoType��һ��˰��ǼǺ�����\n"]
pub type TThostFtdcTaxNoType = [::std::os::raw::c_uchar; 31usize];
pub type TThostFtdcBatchStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcPropertyIDType��һ�����Դ�������\n"]
pub type TThostFtdcPropertyIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcPropertyNameType��һ��������������\n"]
pub type TThostFtdcPropertyNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcLicenseNoType��һ��Ӫҵ\u{5b4}�պ�����\n"]
pub type TThostFtdcLicenseNoType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcAgentIDType��һ�������˴�������\n"]
pub type TThostFtdcAgentIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcAgentNameType��һ����������������\n"]
pub type TThostFtdcAgentNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcAgentGroupIDType��һ�����������������\n"]
pub type TThostFtdcAgentGroupIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcAgentGroupNameType��һ������������������\n"]
pub type TThostFtdcAgentGroupNameType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcReturnStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcReturnPatternType = ::std::os::raw::c_uchar;
pub type TThostFtdcReturnLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcReturnStandardType = ::std::os::raw::c_uchar;
pub type TThostFtdcMortgageTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcInvestorSettlementParamIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcExchangeSettlementParamIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcSystemParamIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeParamIDType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcSettlementParamValueType��һ����������\u{5b5}����\n"]
pub type TThostFtdcSettlementParamValueType = [::std::os::raw::c_uchar; 256usize];
#[doc = "\nTFtdcCounterIDType��һ����������������\n"]
pub type TThostFtdcCounterIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcInvestorGroupNameType��һ��Ͷ���߷�����������\n"]
pub type TThostFtdcInvestorGroupNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcBrandCodeType��һ���ƺ�����\n"]
pub type TThostFtdcBrandCodeType = [::std::os::raw::c_uchar; 257usize];
#[doc = "\nTFtdcWarehouseType��һ���\u{5bf}�����\n"]
pub type TThostFtdcWarehouseType = [::std::os::raw::c_uchar; 257usize];
#[doc = "\nTFtdcProductDateType��һ����������\n"]
pub type TThostFtdcProductDateType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcGradeType��һ���ȼ�����\n"]
pub type TThostFtdcGradeType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcClassifyType��һ���������\n"]
pub type TThostFtdcClassifyType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcPositionType��һ����λ����\n"]
pub type TThostFtdcPositionType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcYieldlyType��һ����������\n"]
pub type TThostFtdcYieldlyType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcWeightType��һ��������������\n"]
pub type TThostFtdcWeightType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcSubEntryFundNoType��һ�������ʽ���ˮ������\n"]
pub type TThostFtdcSubEntryFundNoType = ::std::os::raw::c_int;
pub type TThostFtdcFileIDType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcFileNameType��һ���ļ���������\n"]
pub type TThostFtdcFileNameType = [::std::os::raw::c_uchar; 257usize];
pub type TThostFtdcFileTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileFormatType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileUploadStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcTransferDirectionType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcUploadModeType��һ���ϴ��ļ���������\n"]
pub type TThostFtdcUploadModeType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcAccountIDType��һ��Ͷ�����ʺ�����\n"]
pub type TThostFtdcAccountIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcBankFlagType��һ������ͳһ��ʶ��������\n"]
pub type TThostFtdcBankFlagType = [::std::os::raw::c_uchar; 4usize];
#[doc = "\nTFtdcBankAccountType��һ�������˻�����\n"]
pub type TThostFtdcBankAccountType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcOpenNameType��һ�������˻��Ŀ�������������\n"]
pub type TThostFtdcOpenNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcOpenBankType��һ�������˻��Ŀ���������\n"]
pub type TThostFtdcOpenBankType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcBankNameType��һ��������������\n"]
pub type TThostFtdcBankNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcPublishPathType��һ������·������\n"]
pub type TThostFtdcPublishPathType = [::std::os::raw::c_uchar; 257usize];
#[doc = "\nTFtdcOperatorIDType��һ������Ա��������\n"]
pub type TThostFtdcOperatorIDType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcMonthCountType��һ���·���������\n"]
pub type TThostFtdcMonthCountType = ::std::os::raw::c_int;
#[doc = "\nTFtdcAdvanceMonthArrayType��һ���·���ǰ��������\n"]
pub type TThostFtdcAdvanceMonthArrayType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcDateExprType��һ�����ڱ���ʽ����\n"]
pub type TThostFtdcDateExprType = [::std::os::raw::c_uchar; 1025usize];
#[doc = "\nTFtdcInstrumentIDExprType��һ����Լ�������ʽ����\n"]
pub type TThostFtdcInstrumentIDExprType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcInstrumentNameExprType��һ����Լ���Ʊ���ʽ����\n"]
pub type TThostFtdcInstrumentNameExprType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcSpecialCreateRuleType = ::std::os::raw::c_uchar;
pub type TThostFtdcBasisPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductLifePhaseType = ::std::os::raw::c_uchar;
pub type TThostFtdcDeliveryModeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcLogLevelType��һ����־��������\n"]
pub type TThostFtdcLogLevelType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcProcessNameType��һ���洢������������\n"]
pub type TThostFtdcProcessNameType = [::std::os::raw::c_uchar; 257usize];
#[doc = "\nTFtdcOperationMemoType��һ������ժҪ����\n"]
pub type TThostFtdcOperationMemoType = [::std::os::raw::c_uchar; 1025usize];
pub type TThostFtdcFundIOTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcBillNoType��һ��Ʊ�ݺ�����\n"]
pub type TThostFtdcBillNoType = [::std::os::raw::c_uchar; 15usize];
#[doc = "\nTFtdcBillNameType��һ��Ʊ����������\n"]
pub type TThostFtdcBillNameType = [::std::os::raw::c_uchar; 33usize];
pub type TThostFtdcPublishStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcEnumValueIDType��һ��ö��\u{5b5}��������\n"]
pub type TThostFtdcEnumValueIDType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcEnumValueTypeType��һ��ö��\u{5b5}��������\n"]
pub type TThostFtdcEnumValueTypeType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcEnumValueLabelType��һ��ö��\u{5b5}��������\n"]
pub type TThostFtdcEnumValueLabelType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcEnumValueResultType��һ��ö��\u{5b5}�������\n"]
pub type TThostFtdcEnumValueResultType = [::std::os::raw::c_uchar; 33usize];
pub type TThostFtdcSystemStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettlementStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcRangeIntTypeType��һ���\u{7b6}�\u{5b5}��������\n"]
pub type TThostFtdcRangeIntTypeType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcRangeIntFromType��һ���\u{7b6}�\u{5b5}��������\n"]
pub type TThostFtdcRangeIntFromType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcRangeIntToType��һ���\u{7b6}�\u{5b5}��������\n"]
pub type TThostFtdcRangeIntToType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcFunctionIDType��һ�����\u{734}�������\n"]
pub type TThostFtdcFunctionIDType = [::std::os::raw::c_uchar; 25usize];
#[doc = "\nTFtdcFunctionValueCodeType��һ�����\u{731}�������\n"]
pub type TThostFtdcFunctionValueCodeType = [::std::os::raw::c_uchar; 257usize];
#[doc = "\nTFtdcFunctionNameType��һ��������������\n"]
pub type TThostFtdcFunctionNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcRoleIDType��һ����ɫ�������\n"]
pub type TThostFtdcRoleIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcRoleNameType��һ����ɫ��������\n"]
pub type TThostFtdcRoleNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcDescriptionType��һ����������\n"]
pub type TThostFtdcDescriptionType = [::std::os::raw::c_uchar; 401usize];
#[doc = "\nTFtdcCombineIDType��һ����ϱ������\n"]
pub type TThostFtdcCombineIDType = [::std::os::raw::c_uchar; 25usize];
#[doc = "\nTFtdcCombineTypeType��һ�������������\n"]
pub type TThostFtdcCombineTypeType = [::std::os::raw::c_uchar; 25usize];
pub type TThostFtdcInvestorTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcRiskLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcFeeAcceptStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcPasswordTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAlgorithmType = ::std::os::raw::c_uchar;
pub type TThostFtdcIncludeCloseProfitType = ::std::os::raw::c_uchar;
pub type TThostFtdcAllWithoutTradeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCommentType��һ��ӯ���㷨˵������\n"]
pub type TThostFtdcCommentType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcVersionType��һ���汾������\n"]
pub type TThostFtdcVersionType = [::std::os::raw::c_uchar; 4usize];
#[doc = "\nTFtdcTradeCodeType��һ�����״�������\n"]
pub type TThostFtdcTradeCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcTradeDateType��һ��������������\n"]
pub type TThostFtdcTradeDateType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcTradeTimeType��һ������ʱ������\n"]
pub type TThostFtdcTradeTimeType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcTradeSerialType��һ��������ˮ������\n"]
pub type TThostFtdcTradeSerialType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcTradeSerialNoType��һ��������ˮ������\n"]
pub type TThostFtdcTradeSerialNoType = ::std::os::raw::c_int;
#[doc = "\nTFtdcFutureIDType��һ���ڻ���˾��������\n"]
pub type TThostFtdcFutureIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcBankIDType��һ�����д�������\n"]
pub type TThostFtdcBankIDType = [::std::os::raw::c_uchar; 4usize];
#[doc = "\nTFtdcBankBrchIDType��һ�����з����Ĵ�������\n"]
pub type TThostFtdcBankBrchIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcBankBranchIDType��һ�������Ĵ�������\n"]
pub type TThostFtdcBankBranchIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcOperNoType��һ�����\u{5f9}�Ա����\n"]
pub type TThostFtdcOperNoType = [::std::os::raw::c_uchar; 17usize];
#[doc = "\nTFtdcDeviceIDType��һ��������־����\n"]
pub type TThostFtdcDeviceIDType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcRecordNumType��һ����¼������\n"]
pub type TThostFtdcRecordNumType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcFutureAccountType��һ���ڻ��ʽ��˺�����\n"]
pub type TThostFtdcFutureAccountType = [::std::os::raw::c_uchar; 22usize];
pub type TThostFtdcFuturePwdFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcTransferTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcFutureAccPwdType��һ���ڻ��ʽ���������\n"]
pub type TThostFtdcFutureAccPwdType = [::std::os::raw::c_uchar; 17usize];
#[doc = "\nTFtdcCurrencyCodeType��һ����������\n"]
pub type TThostFtdcCurrencyCodeType = [::std::os::raw::c_uchar; 4usize];
#[doc = "\nTFtdcRetCodeType��һ����Ӧ��������\n"]
pub type TThostFtdcRetCodeType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcRetInfoType��һ����Ӧ��Ϣ����\n"]
pub type TThostFtdcRetInfoType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcTradeAmtType��һ���������������\n"]
pub type TThostFtdcTradeAmtType = [::std::os::raw::c_uchar; 20usize];
#[doc = "\nTFtdcUseAmtType��һ�����п����������\n"]
pub type TThostFtdcUseAmtType = [::std::os::raw::c_uchar; 20usize];
#[doc = "\nTFtdcFetchAmtType��һ�����п�ȡ�������\n"]
pub type TThostFtdcFetchAmtType = [::std::os::raw::c_uchar; 20usize];
pub type TThostFtdcTransferValidFlagType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCertCodeType��һ��\u{5a4}����������\n"]
pub type TThostFtdcCertCodeType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcReasonType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcFundProjectIDType��һ���ʽ���Ŀ�������\n"]
pub type TThostFtdcFundProjectIDType = [::std::os::raw::c_uchar; 5usize];
pub type TThostFtdcSexType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcProfessionType��һ��\u{5b0}ҵ����\n"]
pub type TThostFtdcProfessionType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcNationalType��һ����������\n"]
pub type TThostFtdcNationalType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcProvinceType��һ��ʡ����\n"]
pub type TThostFtdcProvinceType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcRegionType��һ��������\n"]
pub type TThostFtdcRegionType = [::std::os::raw::c_uchar; 16usize];
#[doc = "\nTFtdcCountryType��һ����������\n"]
pub type TThostFtdcCountryType = [::std::os::raw::c_uchar; 16usize];
#[doc = "\nTFtdcLicenseNOType��һ��Ӫҵ\u{5b4}������\n"]
pub type TThostFtdcLicenseNOType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcCompanyTypeType��һ����ҵ��������\n"]
pub type TThostFtdcCompanyTypeType = [::std::os::raw::c_uchar; 16usize];
#[doc = "\nTFtdcBusinessScopeType��һ����Ӫ��Χ����\n"]
pub type TThostFtdcBusinessScopeType = [::std::os::raw::c_uchar; 1001usize];
#[doc = "\nTFtdcCapitalCurrencyType��һ��ע���ʱ���������\n"]
pub type TThostFtdcCapitalCurrencyType = [::std::os::raw::c_uchar; 4usize];
pub type TThostFtdcUserTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcBranchIDType��һ��Ӫҵ���������\n"]
pub type TThostFtdcBranchIDType = [::std::os::raw::c_uchar; 9usize];
pub type TThostFtdcRateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcNoteTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettlementStyleType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcBrokerDNSType��һ����������\n"]
pub type TThostFtdcBrokerDNSType = [::std::os::raw::c_uchar; 256usize];
#[doc = "\nTFtdcSentenceType��һ���������\n"]
pub type TThostFtdcSentenceType = [::std::os::raw::c_uchar; 501usize];
pub type TThostFtdcSettlementBillTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcUserRightTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMarginPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBillGenStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcAlgoTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcHandlePositionAlgoIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcFindMarginRateAlgoIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcHandleTradingAccountAlgoIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcPersonTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcQueryInvestorRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcInvestorRiskStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcLegIDType��һ�����ȱ������\n"]
pub type TThostFtdcLegIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcLegMultipleType��һ�����ȳ�������\n"]
pub type TThostFtdcLegMultipleType = ::std::os::raw::c_int;
#[doc = "\nTFtdcImplyLevelType��һ��������������\n"]
pub type TThostFtdcImplyLevelType = ::std::os::raw::c_int;
#[doc = "\nTFtdcClearAccountType��һ�������˻�����\n"]
pub type TThostFtdcClearAccountType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcOrganNOType��һ�������˻�����\n"]
pub type TThostFtdcOrganNOType = [::std::os::raw::c_uchar; 6usize];
#[doc = "\nTFtdcClearbarchIDType��һ�������˻����к�����\n"]
pub type TThostFtdcClearbarchIDType = [::std::os::raw::c_uchar; 6usize];
pub type TThostFtdcUserEventTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcUserEventInfoType��һ���û��¼���Ϣ����\n"]
pub type TThostFtdcUserEventInfoType = [::std::os::raw::c_uchar; 1025usize];
pub type TThostFtdcCloseStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcStatModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcParkedOrderStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcParkedOrderIDType��һ��Ԥ�\u{71a35}��������\n"]
pub type TThostFtdcParkedOrderIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcParkedOrderActionIDType��һ��Ԥ�\u{73df5}��������\n"]
pub type TThostFtdcParkedOrderActionIDType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcVirDealStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrgSystemIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirTradeStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirBankAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirementStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirementAvailAbilityType = ::std::os::raw::c_uchar;
pub type TThostFtdcVirementTradeCodeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcPhotoTypeNameType��һ��Ӱ��������������\n"]
pub type TThostFtdcPhotoTypeNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcPhotoTypeIDType��һ��Ӱ�����ʹ�������\n"]
pub type TThostFtdcPhotoTypeIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcPhotoNameType��һ��Ӱ����������\n"]
pub type TThostFtdcPhotoNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = "\nTFtdcTopicIDType��һ�������������\n"]
pub type TThostFtdcTopicIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcReportTypeIDType��һ�����ױ������ͱ�ʶ����\n"]
pub type TThostFtdcReportTypeIDType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcCharacterIDType��һ������������������\n"]
pub type TThostFtdcCharacterIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcAMLParamIDType��һ��������������\n"]
pub type TThostFtdcAMLParamIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcAMLInvestorTypeType��һ��Ͷ������������\n"]
pub type TThostFtdcAMLInvestorTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcAMLIdCardTypeType��һ��\u{5a4}����������\n"]
pub type TThostFtdcAMLIdCardTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcAMLTradeDirectType��һ���ʽ������������\n"]
pub type TThostFtdcAMLTradeDirectType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcAMLTradeModelType��һ���ʽ������ʽ����\n"]
pub type TThostFtdcAMLTradeModelType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcAMLOpParamValueType��һ��ҵ���������\u{5b5}����\n"]
pub type TThostFtdcAMLOpParamValueType = f64;
#[doc = "\nTFtdcAMLCustomerCardTypeType��һ���ͻ�����\u{5a4}��/\u{5a4}���ļ���������\n"]
pub type TThostFtdcAMLCustomerCardTypeType = [::std::os::raw::c_uchar; 81usize];
#[doc = "\nTFtdcAMLInstitutionNameType��һ�����ڻ���������������\n"]
pub type TThostFtdcAMLInstitutionNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcAMLDistrictIDType��һ�����ڻ����������ڵ�������������������\n"]
pub type TThostFtdcAMLDistrictIDType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcAMLRelationShipType��һ�����ڻ����������\u{ef7b}�\u{5f5}Ĺ�ϵ����\n"]
pub type TThostFtdcAMLRelationShipType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcAMLInstitutionTypeType��һ�����ڻ������������������\n"]
pub type TThostFtdcAMLInstitutionTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcAMLInstitutionIDType��һ�����ڻ��������������\n"]
pub type TThostFtdcAMLInstitutionIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcAMLAccountTypeType��һ���˻���������\n"]
pub type TThostFtdcAMLAccountTypeType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcAMLTradingTypeType��һ�����\u{5f7}�ʽ����\n"]
pub type TThostFtdcAMLTradingTypeType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcAMLTransactClassType��һ��������\u{5a7}���\u{5f7}������������\n"]
pub type TThostFtdcAMLTransactClassType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcAMLCapitalIOType��һ���ʽ��ո���ʶ����\n"]
pub type TThostFtdcAMLCapitalIOType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcAMLSiteType��һ�����\u{5f5}ص�����\n"]
pub type TThostFtdcAMLSiteType = [::std::os::raw::c_uchar; 10usize];
#[doc = "\nTFtdcAMLCapitalPurposeType��һ���ʽ���;����\n"]
pub type TThostFtdcAMLCapitalPurposeType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcAMLReportTypeType��һ��������������\n"]
pub type TThostFtdcAMLReportTypeType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcAMLSerialNoType��һ���������\n"]
pub type TThostFtdcAMLSerialNoType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcAMLStatusType��һ��״\u{32c}����\n"]
pub type TThostFtdcAMLStatusType = [::std::os::raw::c_uchar; 2usize];
pub type TThostFtdcAMLGenStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcAMLSeqCodeType��һ��ҵ���ʶ������\n"]
pub type TThostFtdcAMLSeqCodeType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcAMLFileNameType��һ��AML�ļ�������\n"]
pub type TThostFtdcAMLFileNameType = [::std::os::raw::c_uchar; 257usize];
#[doc = "\nTFtdcAMLMoneyType��һ����ϴǮ�ʽ�����\n"]
pub type TThostFtdcAMLMoneyType = f64;
#[doc = "\nTFtdcAMLFileAmountType��һ����ϴǮ�ʽ�����\n"]
pub type TThostFtdcAMLFileAmountType = ::std::os::raw::c_int;
#[doc = "\nTFtdcCFMMCKeyType��һ����Կ����(��\u{5a4}����)����\n"]
pub type TThostFtdcCFMMCKeyType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcCFMMCTokenType��һ����������(��\u{5a4}����)����\n"]
pub type TThostFtdcCFMMCTokenType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcCFMMCKeyKindType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcAMLReportNameType��һ��������������\n"]
pub type TThostFtdcAMLReportNameType = [::std::os::raw::c_uchar; 81usize];
#[doc = "\nTFtdcIndividualNameType��һ��������������\n"]
pub type TThostFtdcIndividualNameType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcCurrencyIDType��һ�����\u{5b4}�������\n"]
pub type TThostFtdcCurrencyIDType = [::std::os::raw::c_uchar; 4usize];
#[doc = "\nTFtdcCustNumberType��һ���ͻ��������\n"]
pub type TThostFtdcCustNumberType = [::std::os::raw::c_uchar; 36usize];
#[doc = "\nTFtdcOrganCodeType��һ��������������\n"]
pub type TThostFtdcOrganCodeType = [::std::os::raw::c_uchar; 36usize];
#[doc = "\nTFtdcOrganNameType��һ��������������\n"]
pub type TThostFtdcOrganNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = "\nTFtdcSuperOrganCodeType��һ���ϼ���������,���ڻ���˾�\u{732}���������������\n"]
pub type TThostFtdcSuperOrganCodeType = [::std::os::raw::c_uchar; 12usize];
#[doc = "\nTFtdcSubBranchIDType��һ����\u{5a7}��������\n"]
pub type TThostFtdcSubBranchIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcSubBranchNameType��һ����\u{5a7}������������\n"]
pub type TThostFtdcSubBranchNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = "\nTFtdcBranchNetCodeType��һ���������������\n"]
pub type TThostFtdcBranchNetCodeType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcBranchNetNameType��һ������������������\n"]
pub type TThostFtdcBranchNetNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = "\nTFtdcOrganFlagType��һ��������ʶ����\n"]
pub type TThostFtdcOrganFlagType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcBankCodingForFutureType��һ�����ж��ڻ���˾�ı�������\n"]
pub type TThostFtdcBankCodingForFutureType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcBankReturnCodeType��һ�����жԷ�����Ķ�������\n"]
pub type TThostFtdcBankReturnCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcPlateReturnCodeType��һ������ת��ƽ\u{328}�Է�����Ķ�������\n"]
pub type TThostFtdcPlateReturnCodeType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcBankSubBranchIDType��һ�����з�\u{5a7}������������\n"]
pub type TThostFtdcBankSubBranchIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcFutureBranchIDType��һ���ڻ���\u{5a7}������������\n"]
pub type TThostFtdcFutureBranchIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcReturnCodeType��һ�����ش�������\n"]
pub type TThostFtdcReturnCodeType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcOperatorCodeType��һ������Ա����\n"]
pub type TThostFtdcOperatorCodeType = [::std::os::raw::c_uchar; 17usize];
#[doc = "\nTFtdcClearDepIDType��һ�����������ʻ�����������\n"]
pub type TThostFtdcClearDepIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = "\nTFtdcClearBrchIDType��һ�����������ʻ����к�����\n"]
pub type TThostFtdcClearBrchIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = "\nTFtdcClearNameType��һ�����������ʻ���������\n"]
pub type TThostFtdcClearNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = "\nTFtdcBankAccountNameType��һ�������ʻ���������\n"]
pub type TThostFtdcBankAccountNameType = [::std::os::raw::c_uchar; 71usize];
#[doc = "\nTFtdcInvDepIDType��һ������Ͷ�����˺Ż���������\n"]
pub type TThostFtdcInvDepIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = "\nTFtdcInvBrchIDType��һ������Ͷ�������к�����\n"]
pub type TThostFtdcInvBrchIDType = [::std::os::raw::c_uchar; 6usize];
#[doc = "\nTFtdcMessageFormatVersionType��һ����Ϣ��ʽ�汾����\n"]
pub type TThostFtdcMessageFormatVersionType = [::std::os::raw::c_uchar; 36usize];
#[doc = "\nTFtdcDigestType��һ��ժҪ����\n"]
pub type TThostFtdcDigestType = [::std::os::raw::c_uchar; 36usize];
#[doc = "\nTFtdcAuthenticDataType��һ����\u{5a4}��������\n"]
pub type TThostFtdcAuthenticDataType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcPasswordKeyType��һ����Կ����\n"]
pub type TThostFtdcPasswordKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcFutureAccountNameType��һ���ڻ��ʻ���������\n"]
pub type TThostFtdcFutureAccountNameType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcMobilePhoneType��һ���\u{5bb}�����\n"]
pub type TThostFtdcMobilePhoneType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcFutureMainKeyType��һ���ڻ���˾����Կ����\n"]
pub type TThostFtdcFutureMainKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcFutureWorkKeyType��һ���ڻ���˾������Կ����\n"]
pub type TThostFtdcFutureWorkKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcFutureTransKeyType��һ���ڻ���˾������Կ����\n"]
pub type TThostFtdcFutureTransKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcBankMainKeyType��һ����������Կ����\n"]
pub type TThostFtdcBankMainKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcBankWorkKeyType��һ�����й�����Կ����\n"]
pub type TThostFtdcBankWorkKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcBankTransKeyType��һ�����д�����Կ����\n"]
pub type TThostFtdcBankTransKeyType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcBankServerDescriptionType��һ�����з�����������Ϣ����\n"]
pub type TThostFtdcBankServerDescriptionType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcAddInfoType��һ��������Ϣ����\n"]
pub type TThostFtdcAddInfoType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcDescrInfoForReturnCodeType��һ����������������\n"]
pub type TThostFtdcDescrInfoForReturnCodeType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcCountryCodeType��һ�����Ҵ�������\n"]
pub type TThostFtdcCountryCodeType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcSerialType��һ����ˮ������\n"]
pub type TThostFtdcSerialType = ::std::os::raw::c_int;
#[doc = "\nTFtdcPlateSerialType��һ��ƽ\u{328}��ˮ������\n"]
pub type TThostFtdcPlateSerialType = ::std::os::raw::c_int;
#[doc = "\nTFtdcBankSerialType��һ��������ˮ������\n"]
pub type TThostFtdcBankSerialType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcCorrectSerialType��һ��������������ˮ������\n"]
pub type TThostFtdcCorrectSerialType = ::std::os::raw::c_int;
#[doc = "\nTFtdcFutureSerialType��һ���ڻ���˾��ˮ������\n"]
pub type TThostFtdcFutureSerialType = ::std::os::raw::c_int;
#[doc = "\nTFtdcApplicationIDType��һ��Ӧ�ñ�ʶ����\n"]
pub type TThostFtdcApplicationIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcBankProxyIDType��һ�����д�����ʶ����\n"]
pub type TThostFtdcBankProxyIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcFBTCoreIDType��һ������ת�ʺ���ϵͳ��ʶ����\n"]
pub type TThostFtdcFBTCoreIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcServerPortType��һ������˿ں�����\n"]
pub type TThostFtdcServerPortType = ::std::os::raw::c_int;
#[doc = "\nTFtdcRepealedTimesType��һ���Ѿ�������������\n"]
pub type TThostFtdcRepealedTimesType = ::std::os::raw::c_int;
#[doc = "\nTFtdcRepealTimeIntervalType��һ������ʱ��������\n"]
pub type TThostFtdcRepealTimeIntervalType = ::std::os::raw::c_int;
#[doc = "\nTFtdcTotalTimesType��һ��ÿ���ۼ�ת�ʴ�������\n"]
pub type TThostFtdcTotalTimesType = ::std::os::raw::c_int;
#[doc = "\nTFtdcFBTRequestIDType��һ������ID����\n"]
pub type TThostFtdcFBTRequestIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcTIDType��һ������ID����\n"]
pub type TThostFtdcTIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcTradeAmountType��һ�����\u{5fd}�\u{e8e8}Ԫ������\n"]
pub type TThostFtdcTradeAmountType = f64;
#[doc = "\nTFtdcCustFeeType��һ��Ӧ�տͻ����ã�Ԫ������\n"]
pub type TThostFtdcCustFeeType = f64;
#[doc = "\nTFtdcFutureFeeType��һ��Ӧ���ڻ���˾���ã�Ԫ������\n"]
pub type TThostFtdcFutureFeeType = f64;
#[doc = "\nTFtdcSingleMaxAmtType��һ����������\u{7b6}�����\n"]
pub type TThostFtdcSingleMaxAmtType = f64;
#[doc = "\nTFtdcSingleMinAmtType��һ����������\u{7b6}�����\n"]
pub type TThostFtdcSingleMinAmtType = f64;
#[doc = "\nTFtdcTotalAmtType��һ��ÿ���ۼ�ת�ʶ������\n"]
pub type TThostFtdcTotalAmtType = f64;
pub type TThostFtdcCertificationTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileBusinessCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCashExchangeCodeType = ::std::os::raw::c_uchar;
pub type TThostFtdcYesNoIndicatorType = ::std::os::raw::c_uchar;
pub type TThostFtdcBanlanceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcGenderType = ::std::os::raw::c_uchar;
pub type TThostFtdcFeePayFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcPassWordKeyTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTPassWordTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTEncryModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBankRepealFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerRepealFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstitutionTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcLastFragmentType = ::std::os::raw::c_uchar;
pub type TThostFtdcBankAccStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcMoneyAccountStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcManageStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSystemTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTxnEndFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcProcessStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcCustTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTTransferDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcOpenOrDestroyType = ::std::os::raw::c_uchar;
pub type TThostFtdcAvailabilityFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrganTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrganLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcProtocalIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcConnectModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSyncModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBankAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFutureAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrganStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcCCBFeeModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCommApiTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcServiceIDType��һ������������\n"]
pub type TThostFtdcServiceIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcServiceLineNoType��һ��������·�������\n"]
pub type TThostFtdcServiceLineNoType = ::std::os::raw::c_int;
#[doc = "\nTFtdcServiceNameType��һ������������\n"]
pub type TThostFtdcServiceNameType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcLinkStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCommApiPointerType��һ��\u{368}ѶAPI\u{5b8}������\n"]
pub type TThostFtdcCommApiPointerType = ::std::os::raw::c_int;
pub type TThostFtdcPwdFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcSecuAccTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTransferStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSponsorTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcReqRspTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTUserEventTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcBankIDByBankType��һ�������Լ��ı�������\n"]
pub type TThostFtdcBankIDByBankType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcBankOperNoType��һ�����в���Ա������\n"]
pub type TThostFtdcBankOperNoType = [::std::os::raw::c_uchar; 4usize];
#[doc = "\nTFtdcBankCustNoType��һ�����пͻ�������\n"]
pub type TThostFtdcBankCustNoType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcDBOPSeqNoType��һ�����������к�����\n"]
pub type TThostFtdcDBOPSeqNoType = ::std::os::raw::c_int;
#[doc = "\nTFtdcTableNameType��һ��FBT��������\n"]
pub type TThostFtdcTableNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcPKNameType��һ��FBT����������������\n"]
pub type TThostFtdcPKNameType = [::std::os::raw::c_uchar; 201usize];
#[doc = "\nTFtdcPKValueType��һ��FBT����������\u{5b5}����\n"]
pub type TThostFtdcPKValueType = [::std::os::raw::c_uchar; 501usize];
pub type TThostFtdcDBOperationType = ::std::os::raw::c_uchar;
pub type TThostFtdcSyncFlagType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcTargetIDType��һ��\u{36c}��Ŀ��������\n"]
pub type TThostFtdcTargetIDType = [::std::os::raw::c_uchar; 4usize];
pub type TThostFtdcSyncTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcFBETimeType��һ�����\u{5bb}���ʱ������\n"]
pub type TThostFtdcFBETimeType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcFBEBankNoType��һ�����������к�����\n"]
pub type TThostFtdcFBEBankNoType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcFBECertNoType��һ������ƾ\u{5a4}������\n"]
pub type TThostFtdcFBECertNoType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcExDirectionType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcFBEBankAccountType��һ�����������˻�����\n"]
pub type TThostFtdcFBEBankAccountType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcFBEBankAccountNameType��һ�����������˻�������\n"]
pub type TThostFtdcFBEBankAccountNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcFBEAmtType��һ�����\u{5bb}���������\n"]
pub type TThostFtdcFBEAmtType = f64;
#[doc = "\nTFtdcFBEBusinessTypeType��һ������ҵ����������\n"]
pub type TThostFtdcFBEBusinessTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcFBEPostScriptType��һ�����㸽������\n"]
pub type TThostFtdcFBEPostScriptType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcFBERemarkType��һ�����㱸ע����\n"]
pub type TThostFtdcFBERemarkType = [::std::os::raw::c_uchar; 71usize];
#[doc = "\nTFtdcExRateType��һ�������������\n"]
pub type TThostFtdcExRateType = f64;
pub type TThostFtdcFBEResultFlagType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcFBERtnMsgType��һ�����㷵����Ϣ����\n"]
pub type TThostFtdcFBERtnMsgType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcFBEExtendMsgType��һ��������չ��Ϣ����\n"]
pub type TThostFtdcFBEExtendMsgType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcFBEBusinessSerialType��һ�����������ˮ������\n"]
pub type TThostFtdcFBEBusinessSerialType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcFBESystemSerialType��һ��������ˮ������\n"]
pub type TThostFtdcFBESystemSerialType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcFBETotalExCntType��һ�����㽻���\u{731}�������\n"]
pub type TThostFtdcFBETotalExCntType = ::std::os::raw::c_int;
pub type TThostFtdcFBEExchStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBEFileFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBEAlreadyTradeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcFBEOpenBankType��һ�������˻�����������\n"]
pub type TThostFtdcFBEOpenBankType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcFBEUserEventTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcFBEFileNameType��һ����������ļ�������\n"]
pub type TThostFtdcFBEFileNameType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcFBEBatchSerialType��һ���������κ�����\n"]
pub type TThostFtdcFBEBatchSerialType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcFBEReqFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcNotifyClassType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcRiskNofityInfoType��һ���ͻ�����\u{368}\u{5aa}��Ϣ����\n"]
pub type TThostFtdcRiskNofityInfoType = [::std::os::raw::c_uchar; 257usize];
#[doc = "\nTFtdcForceCloseSceneIdType��һ��ǿƽ�����������\n"]
pub type TThostFtdcForceCloseSceneIdType = [::std::os::raw::c_uchar; 24usize];
pub type TThostFtdcForceCloseTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcInstrumentIDsType��һ�������Ʒ����,��+�\u{5b8}�,��cu+zn����\n"]
pub type TThostFtdcInstrumentIDsType = [::std::os::raw::c_uchar; 101usize];
pub type TThostFtdcRiskNotifyMethodType = ::std::os::raw::c_uchar;
pub type TThostFtdcRiskNotifyStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcRiskUserEventType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcParamIDType��һ��������������\n"]
pub type TThostFtdcParamIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcParamNameType��һ������������\n"]
pub type TThostFtdcParamNameType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcParamValueType��һ������\u{5b5}����\n"]
pub type TThostFtdcParamValueType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcConditionalOrderSortTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSendTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcClientIDStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcIndustryIDType��һ����ҵ��������\n"]
pub type TThostFtdcIndustryIDType = [::std::os::raw::c_uchar; 17usize];
#[doc = "\nTFtdcQuestionIDType��һ��������Ϣ�������\n"]
pub type TThostFtdcQuestionIDType = [::std::os::raw::c_uchar; 5usize];
#[doc = "\nTFtdcQuestionContentType��һ��������Ϣ˵������\n"]
pub type TThostFtdcQuestionContentType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcOptionIDType��һ��ѡ��������\n"]
pub type TThostFtdcOptionIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcOptionContentType��һ��ѡ��˵������\n"]
pub type TThostFtdcOptionContentType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcQuestionTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcProcessIDType��һ��ҵ����ˮ������\n"]
pub type TThostFtdcProcessIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcSeqNoType��һ����ˮ������\n"]
pub type TThostFtdcSeqNoType = ::std::os::raw::c_int;
#[doc = "\nTFtdcUOAProcessStatusType��һ������״\u{32c}����\n"]
pub type TThostFtdcUOAProcessStatusType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcProcessTypeType��һ�����\u{339}�����������\n"]
pub type TThostFtdcProcessTypeType = [::std::os::raw::c_uchar; 3usize];
pub type TThostFtdcBusinessTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCfmmcReturnCodeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcExReturnCodeType��һ������������������\n"]
pub type TThostFtdcExReturnCodeType = ::std::os::raw::c_int;
pub type TThostFtdcClientTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcExchangeIDTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcExClientIDTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcClientClassifyType��һ���ͻ�����������\n"]
pub type TThostFtdcClientClassifyType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcUOAOrganTypeType��һ����λ��������\n"]
pub type TThostFtdcUOAOrganTypeType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcUOACountryCodeType��һ�����Ҵ�������\n"]
pub type TThostFtdcUOACountryCodeType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcAreaCodeType��һ����������\n"]
pub type TThostFtdcAreaCodeType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcFuturesIDType��һ���������Ϊ�ͻ�����Ĵ�������\n"]
pub type TThostFtdcFuturesIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcCffmcDateType��һ����������\n"]
pub type TThostFtdcCffmcDateType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcCffmcTimeType��һ��ʱ������\n"]
pub type TThostFtdcCffmcTimeType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcNocIDType��һ����\u{5af}������������\n"]
pub type TThostFtdcNocIDType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcUpdateFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcApplyOperateIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcApplyStatusIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcSendMethodType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcEventTypeType��һ��ҵ�������������\n"]
pub type TThostFtdcEventTypeType = [::std::os::raw::c_uchar; 33usize];
pub type TThostFtdcEventModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcUOAAutoSendType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcQueryDepthType��һ����ѯ�������\n"]
pub type TThostFtdcQueryDepthType = ::std::os::raw::c_int;
#[doc = "\nTFtdcDataCenterIDType��һ���������Ĵ�������\n"]
pub type TThostFtdcDataCenterIDType = ::std::os::raw::c_int;
pub type TThostFtdcFlowIDType = ::std::os::raw::c_uchar;
pub type TThostFtdcCheckLevelType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCheckNoType��һ��������������\n"]
pub type TThostFtdcCheckNoType = ::std::os::raw::c_int;
pub type TThostFtdcCheckStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcUsedStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcRateTemplateNameType��һ��ģ����������\n"]
pub type TThostFtdcRateTemplateNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcPropertyStringType��һ�����ڲ�ѯ��Ͷ�������\u{5b6}�����\n"]
pub type TThostFtdcPropertyStringType = [::std::os::raw::c_uchar; 2049usize];
pub type TThostFtdcBankAcountOriginType = ::std::os::raw::c_uchar;
pub type TThostFtdcMonthBillTradeSumType = ::std::os::raw::c_uchar;
pub type TThostFtdcFBTTradeCodeEnumType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcRateTemplateIDType��һ��ģ�ʹ�������\n"]
pub type TThostFtdcRateTemplateIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcRiskRateType��һ�����ն�����\n"]
pub type TThostFtdcRiskRateType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcTimestampType��һ��ʱ�������\n"]
pub type TThostFtdcTimestampType = ::std::os::raw::c_int;
#[doc = "\nTFtdcInvestorIDRuleNameType��һ���Ŷι�����������\n"]
pub type TThostFtdcInvestorIDRuleNameType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcInvestorIDRuleExprType��һ���Ŷι������ʽ����\n"]
pub type TThostFtdcInvestorIDRuleExprType = [::std::os::raw::c_uchar; 513usize];
#[doc = "\nTFtdcLastDriftType��һ���ϴ�OTPƯ��\u{5b5}����\n"]
pub type TThostFtdcLastDriftType = ::std::os::raw::c_int;
#[doc = "\nTFtdcLastSuccessType��һ���ϴ�OTP�ɹ�\u{5b5}����\n"]
pub type TThostFtdcLastSuccessType = ::std::os::raw::c_int;
#[doc = "\nTFtdcAuthKeyType��һ��������Կ����\n"]
pub type TThostFtdcAuthKeyType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcSerialNumberType��һ�����к�����\n"]
pub type TThostFtdcSerialNumberType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcOTPTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcOTPVendorsIDType��һ����\u{32c}�����ṩ������\n"]
pub type TThostFtdcOTPVendorsIDType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcOTPVendorsNameType��һ����\u{32c}�����ṩ����������\n"]
pub type TThostFtdcOTPVendorsNameType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcOTPStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcBrokerUserTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFutureTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundEventTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAccountSourceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCodeSourceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcUserRangeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcTimeSpanType��һ��ʱ��������\n"]
pub type TThostFtdcTimeSpanType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcImportSequenceIDType��һ����\u{32c}���Ƶ������α������\n"]
pub type TThostFtdcImportSequenceIDType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcByGroupType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeSumStatModeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcComTypeType��һ����ϳɽ���������\n"]
pub type TThostFtdcComTypeType = ::std::os::raw::c_int;
#[doc = "\nTFtdcUserProductIDType��һ����Ʒ��ʶ����\n"]
pub type TThostFtdcUserProductIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcUserProductNameType��һ����Ʒ��������\n"]
pub type TThostFtdcUserProductNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcUserProductMemoType��һ����Ʒ˵������\n"]
pub type TThostFtdcUserProductMemoType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcCSRCCancelFlagType��һ������������־����\n"]
pub type TThostFtdcCSRCCancelFlagType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcCSRCDateType��һ����������\n"]
pub type TThostFtdcCSRCDateType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcCSRCInvestorNameType��һ���ͻ���������\n"]
pub type TThostFtdcCSRCInvestorNameType = [::std::os::raw::c_uchar; 201usize];
#[doc = "\nTFtdcCSRCOpenInvestorNameType��һ���ͻ���������\n"]
pub type TThostFtdcCSRCOpenInvestorNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcCSRCInvestorIDType��һ���ͻ���������\n"]
pub type TThostFtdcCSRCInvestorIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcCSRCIdentifiedCardNoType��һ��\u{5a4}����������\n"]
pub type TThostFtdcCSRCIdentifiedCardNoType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcCSRCClientIDType��һ�����ױ�������\n"]
pub type TThostFtdcCSRCClientIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcCSRCBankFlagType��һ�����б�ʶ����\n"]
pub type TThostFtdcCSRCBankFlagType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcCSRCBankAccountType��һ�������˻�����\n"]
pub type TThostFtdcCSRCBankAccountType = [::std::os::raw::c_uchar; 23usize];
#[doc = "\nTFtdcCSRCOpenNameType��һ������������\n"]
pub type TThostFtdcCSRCOpenNameType = [::std::os::raw::c_uchar; 401usize];
#[doc = "\nTFtdcCSRCMemoType��һ��˵������\n"]
pub type TThostFtdcCSRCMemoType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcCSRCTimeType��һ��ʱ������\n"]
pub type TThostFtdcCSRCTimeType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcCSRCTradeIDType��һ���ɽ���ˮ������\n"]
pub type TThostFtdcCSRCTradeIDType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcCSRCExchangeInstIDType��һ����Լ��������\n"]
pub type TThostFtdcCSRCExchangeInstIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcCSRCMortgageNameType��һ����ѺƷ��������\n"]
pub type TThostFtdcCSRCMortgageNameType = [::std::os::raw::c_uchar; 7usize];
#[doc = "\nTFtdcCSRCReasonType��һ����������\n"]
pub type TThostFtdcCSRCReasonType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcIsSettlementType��һ���Ƿ�Ϊ�ǽ����Ա����\n"]
pub type TThostFtdcIsSettlementType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcCSRCMoneyType��һ���ʽ�����\n"]
pub type TThostFtdcCSRCMoneyType = f64;
#[doc = "\nTFtdcCSRCPriceType��һ���۸�����\n"]
pub type TThostFtdcCSRCPriceType = f64;
#[doc = "\nTFtdcCSRCOptionsTypeType��һ����Ȩ��������\n"]
pub type TThostFtdcCSRCOptionsTypeType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcCSRCStrikePriceType��һ��\u{5b4}�м�����\n"]
pub type TThostFtdcCSRCStrikePriceType = f64;
#[doc = "\nTFtdcCSRCTargetProductIDType��һ�����Ʒ������\n"]
pub type TThostFtdcCSRCTargetProductIDType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcCSRCTargetInstrIDType��һ����ĺ�Լ����\n"]
pub type TThostFtdcCSRCTargetInstrIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcCommModelNameType��һ����������ģ����������\n"]
pub type TThostFtdcCommModelNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = "\nTFtdcCommModelMemoType��һ����������ģ�屸ע����\n"]
pub type TThostFtdcCommModelMemoType = [::std::os::raw::c_uchar; 1025usize];
pub type TThostFtdcExprSetModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcRateInvestorRangeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcAgentBrokerIDType��һ���������\u{379}�˾��������\n"]
pub type TThostFtdcAgentBrokerIDType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcDRIdentityIDType��һ���������Ĵ�������\n"]
pub type TThostFtdcDRIdentityIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcDRIdentityNameType��һ������������������\n"]
pub type TThostFtdcDRIdentityNameType = [::std::os::raw::c_uchar; 65usize];
#[doc = "\nTFtdcDBLinkIDType��һ��DBLink��ʶ������\n"]
pub type TThostFtdcDBLinkIDType = [::std::os::raw::c_uchar; 31usize];
pub type TThostFtdcSyncDataStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradeSourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcFlexStatModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcByInvestorRangeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcSRiskRateType��һ�����ն�����\n"]
pub type TThostFtdcSRiskRateType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcSequenceNo12Type��һ���������\n"]
pub type TThostFtdcSequenceNo12Type = ::std::os::raw::c_int;
pub type TThostFtdcPropertyInvestorRangeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcFileGenStyleType = ::std::os::raw::c_uchar;
pub type TThostFtdcSysOperModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSysOperTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCSRCDataQueyTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFreezeStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcStandardStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCSRCFreezeStatusType��һ������״\u{32c}����\n"]
pub type TThostFtdcCSRCFreezeStatusType = [::std::os::raw::c_uchar; 2usize];
pub type TThostFtdcRightParamTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcRightTemplateIDType��һ��ģ���������\n"]
pub type TThostFtdcRightTemplateIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcRightTemplateNameType��һ��ģ����������\n"]
pub type TThostFtdcRightTemplateNameType = [::std::os::raw::c_uchar; 61usize];
pub type TThostFtdcDataStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcAMLCheckStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcAmlDateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAmlCheckLevelType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcAmlCheckFlowType��һ����ϴǮ���ݳ�ȡ�����������\n"]
pub type TThostFtdcAmlCheckFlowType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcDataTypeType��һ��������������\n"]
pub type TThostFtdcDataTypeType = [::std::os::raw::c_uchar; 129usize];
pub type TThostFtdcExportFileTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettleManagerTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcSettleManagerIDType��һ���������ô�������\n"]
pub type TThostFtdcSettleManagerIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcSettleManagerNameType��һ������������������\n"]
pub type TThostFtdcSettleManagerNameType = [::std::os::raw::c_uchar; 129usize];
pub type TThostFtdcSettleManagerLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettleManagerGroupType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCheckResultMemoType��һ���˶Խ��˵������\n"]
pub type TThostFtdcCheckResultMemoType = [::std::os::raw::c_uchar; 1025usize];
#[doc = "\nTFtdcFunctionUrlType��һ��������������\n"]
pub type TThostFtdcFunctionUrlType = [::std::os::raw::c_uchar; 1025usize];
#[doc = "\nTFtdcAuthInfoType��һ���ͻ�����\u{5a4}��Ϣ����\n"]
pub type TThostFtdcAuthInfoType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcAuthCodeType��һ���ͻ�����\u{5a4}������\n"]
pub type TThostFtdcAuthCodeType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcLimitUseTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDataResourceType = ::std::os::raw::c_uchar;
pub type TThostFtdcMarginTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcActiveTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMarginRateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBackUpStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcInitSettlementType = ::std::os::raw::c_uchar;
pub type TThostFtdcReportStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSaveStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSettArchiveStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcCTPTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcToolIDType��һ�����ߴ�������\n"]
pub type TThostFtdcToolIDType = [::std::os::raw::c_uchar; 9usize];
#[doc = "\nTFtdcToolNameType��һ��������������\n"]
pub type TThostFtdcToolNameType = [::std::os::raw::c_uchar; 81usize];
pub type TThostFtdcCloseDealTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMortgageFundUseRangeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCurrencyUnitType��һ�����\u{5b5}�λ��������\n"]
pub type TThostFtdcCurrencyUnitType = f64;
#[doc = "\nTFtdcExchangeRateType��һ����������\n"]
pub type TThostFtdcExchangeRateType = f64;
pub type TThostFtdcSpecProductTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundMortgageTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAccountSettlementParamIDType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCurrencyNameType��һ��������������\n"]
pub type TThostFtdcCurrencyNameType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcCurrencySignType��һ�����\u{5b7}�������\n"]
pub type TThostFtdcCurrencySignType = [::std::os::raw::c_uchar; 4usize];
pub type TThostFtdcFundMortDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcBusinessClassType = ::std::os::raw::c_uchar;
pub type TThostFtdcSwapSourceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCurrExDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcCurrencySwapStatusType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCurrExchCertNoType��һ��ƾ\u{5a4}������\n"]
pub type TThostFtdcCurrExchCertNoType = [::std::os::raw::c_uchar; 13usize];
#[doc = "\nTFtdcBatchSerialNoType��һ�����κ�����\n"]
pub type TThostFtdcBatchSerialNoType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcReqFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcResFlagType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcPageControlType��һ������ҳ���������\n"]
pub type TThostFtdcPageControlType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcRecordCountType��һ����¼������\n"]
pub type TThostFtdcRecordCountType = ::std::os::raw::c_int;
#[doc = "\nTFtdcCurrencySwapMemoType��һ��������ȷ����Ϣ����\n"]
pub type TThostFtdcCurrencySwapMemoType = [::std::os::raw::c_uchar; 101usize];
pub type TThostFtdcExStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcClientRegionType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcWorkPlaceType��һ��������λ����\n"]
pub type TThostFtdcWorkPlaceType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcBusinessPeriodType��һ����Ӫ��������\n"]
pub type TThostFtdcBusinessPeriodType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcWebSiteType��һ����\u{5b7}����\n"]
pub type TThostFtdcWebSiteType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcUOAIdCardTypeType��һ��ͳһ����\u{5a4}����������\n"]
pub type TThostFtdcUOAIdCardTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcClientModeType��һ������ģʽ����\n"]
pub type TThostFtdcClientModeType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcInvestorFullNameType��һ��Ͷ����ȫ������\n"]
pub type TThostFtdcInvestorFullNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcUOABrokerIDType��һ�������н����ID����\n"]
pub type TThostFtdcUOABrokerIDType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcUOAZipCodeType��һ��������������\n"]
pub type TThostFtdcUOAZipCodeType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcUOAEMailType��һ��������������\n"]
pub type TThostFtdcUOAEMailType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcOldCityType��һ����������\n"]
pub type TThostFtdcOldCityType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcCorporateIdentifiedCardNoType��һ�����˴���\u{5a4}����������\n"]
pub type TThostFtdcCorporateIdentifiedCardNoType = [::std::os::raw::c_uchar; 101usize];
pub type TThostFtdcHasBoardType = ::std::os::raw::c_uchar;
pub type TThostFtdcStartModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTemplateTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcLoginModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcPromptTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcLedgerManageIDType��һ���\u{5bb}������ʲ���������\n"]
pub type TThostFtdcLedgerManageIDType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcInvestVarietyType��һ��Ͷ��Ʒ������\n"]
pub type TThostFtdcInvestVarietyType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcBankAccountTypeType��һ���˻��������\n"]
pub type TThostFtdcBankAccountTypeType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcLedgerManageBankType��һ��������������\n"]
pub type TThostFtdcLedgerManageBankType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcCffexDepartmentNameType��һ������Ӫҵ������\n"]
pub type TThostFtdcCffexDepartmentNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcCffexDepartmentCodeType��һ��Ӫҵ����������\n"]
pub type TThostFtdcCffexDepartmentCodeType = [::std::os::raw::c_uchar; 9usize];
pub type TThostFtdcHasTrusteeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCSRCMemo1Type��һ��˵������\n"]
pub type TThostFtdcCSRCMemo1Type = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcAssetmgrCFullNameType��һ�������ʲ�����ҵ����ڻ���˾ȫ������\n"]
pub type TThostFtdcAssetmgrCFullNameType = [::std::os::raw::c_uchar; 101usize];
#[doc = "\nTFtdcAssetmgrApprovalNOType��һ���ʲ�����ҵ�����ĺ�����\n"]
pub type TThostFtdcAssetmgrApprovalNOType = [::std::os::raw::c_uchar; 51usize];
#[doc = "\nTFtdcAssetmgrMgrNameType��һ���ʲ�����ҵ��������������\n"]
pub type TThostFtdcAssetmgrMgrNameType = [::std::os::raw::c_uchar; 401usize];
pub type TThostFtdcAmTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCSRCAmTypeType��һ��������������\n"]
pub type TThostFtdcCSRCAmTypeType = [::std::os::raw::c_uchar; 5usize];
pub type TThostFtdcCSRCFundIOTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCusAccountTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCSRCNationalType��һ����������\n"]
pub type TThostFtdcCSRCNationalType = [::std::os::raw::c_uchar; 4usize];
#[doc = "\nTFtdcCSRCSecAgentIDType��һ����������ID����\n"]
pub type TThostFtdcCSRCSecAgentIDType = [::std::os::raw::c_uchar; 11usize];
pub type TThostFtdcLanguageTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcAmAccountType��һ��Ͷ���˻�����\n"]
pub type TThostFtdcAmAccountType = [::std::os::raw::c_uchar; 23usize];
pub type TThostFtdcAssetmgrClientTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAssetmgrTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcUOMType��һ��������λ����\n"]
pub type TThostFtdcUOMType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcSHFEInstLifePhaseType��һ����������Լ��������״\u{32c}����\n"]
pub type TThostFtdcSHFEInstLifePhaseType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcSHFEProductClassType��һ����Ʒ��������\n"]
pub type TThostFtdcSHFEProductClassType = [::std::os::raw::c_uchar; 11usize];
#[doc = "\nTFtdcPriceDecimalType��һ���۸�С��λ����\n"]
pub type TThostFtdcPriceDecimalType = [::std::os::raw::c_uchar; 2usize];
#[doc = "\nTFtdcInTheMoneyFlagType��һ��ƽ\u{5b5}��Ȩ��־����\n"]
pub type TThostFtdcInTheMoneyFlagType = [::std::os::raw::c_uchar; 2usize];
pub type TThostFtdcCheckInstrTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDeliveryTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcBigMoneyType��һ���ʽ�����\n"]
pub type TThostFtdcBigMoneyType = f64;
pub type TThostFtdcMaxMarginSideAlgorithmType = ::std::os::raw::c_uchar;
pub type TThostFtdcDAClientTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCombinInstrIDType��һ��������Լ��������\n"]
pub type TThostFtdcCombinInstrIDType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcCombinSettlePriceType��һ�����Ƚ��������\n"]
pub type TThostFtdcCombinSettlePriceType = [::std::os::raw::c_uchar; 61usize];
#[doc = "\nTFtdcDCEPriorityType��һ�����ȼ�����\n"]
pub type TThostFtdcDCEPriorityType = ::std::os::raw::c_int;
#[doc = "\nTFtdcTradeGroupIDType��һ���ɽ��������\n"]
pub type TThostFtdcTradeGroupIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcIsCheckPrepaType��һ���Ƿ�У�鿪�������ʽ�����\n"]
pub type TThostFtdcIsCheckPrepaType = ::std::os::raw::c_int;
pub type TThostFtdcUOAAssetmgrTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDirectionEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcOffsetFlagEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcHedgeFlagEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundIOTypeEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundTypeEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundDirectionEnType = ::std::os::raw::c_uchar;
pub type TThostFtdcFundMortDirectionEnType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcSwapBusinessTypeType��һ������ҵ����������\n"]
pub type TThostFtdcSwapBusinessTypeType = [::std::os::raw::c_uchar; 3usize];
pub type TThostFtdcOptionsTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcStrikeModeType = ::std::os::raw::c_uchar;
pub type TThostFtdcStrikeTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcApplyTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcGiveUpDataSourceType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcExecOrderSysIDType��һ��\u{5b4}������ϵͳ�������\n"]
pub type TThostFtdcExecOrderSysIDType = [::std::os::raw::c_uchar; 21usize];
pub type TThostFtdcExecResultType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcStrikeSequenceType��һ��\u{5b4}���������\n"]
pub type TThostFtdcStrikeSequenceType = ::std::os::raw::c_int;
#[doc = "\nTFtdcStrikeTimeType��һ��\u{5b4}��ʱ������\n"]
pub type TThostFtdcStrikeTimeType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcCombinationTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcDceCombinationTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcOptionRoyaltyPriceTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcBalanceAlgorithmType = ::std::os::raw::c_uchar;
pub type TThostFtdcActionTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcForQuoteStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcValueMethodType = ::std::os::raw::c_uchar;
pub type TThostFtdcExecOrderPositionFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcExecOrderCloseFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcCZCEUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcDCEUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcSHFEUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcCFFEXUploadFileNameType = ::std::os::raw::c_uchar;
pub type TThostFtdcCombDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcStrikeOffsetTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcReserveOpenAccStasType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcLoginRemarkType��һ����¼��ע����\n"]
pub type TThostFtdcLoginRemarkType = [::std::os::raw::c_uchar; 36usize];
#[doc = "\nTFtdcInvestUnitIDType��һ��Ͷ�ʵ�Ԫ��������\n"]
pub type TThostFtdcInvestUnitIDType = [::std::os::raw::c_uchar; 17usize];
#[doc = "\nTFtdcBulletinIDType��һ������������\n"]
pub type TThostFtdcBulletinIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcNewsTypeType��һ��������������\n"]
pub type TThostFtdcNewsTypeType = [::std::os::raw::c_uchar; 3usize];
#[doc = "\nTFtdcNewsUrgencyType��һ�������\u{336}�����\n"]
pub type TThostFtdcNewsUrgencyType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcAbstractType��һ����ϢժҪ����\n"]
pub type TThostFtdcAbstractType = [::std::os::raw::c_uchar; 81usize];
#[doc = "\nTFtdcComeFromType��һ����Ϣ��Դ����\n"]
pub type TThostFtdcComeFromType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcURLLinkType��һ��WEB��\u{5b7}����\n"]
pub type TThostFtdcURLLinkType = [::std::os::raw::c_uchar; 201usize];
#[doc = "\nTFtdcLongIndividualNameType��һ����������������\n"]
pub type TThostFtdcLongIndividualNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = "\nTFtdcLongFBEBankAccountNameType��һ�������������˻�������\n"]
pub type TThostFtdcLongFBEBankAccountNameType = [::std::os::raw::c_uchar; 161usize];
#[doc = "\nTFtdcDateTimeType��һ������ʱ������\n"]
pub type TThostFtdcDateTimeType = [::std::os::raw::c_uchar; 17usize];
pub type TThostFtdcWeakPasswordSourceType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcRandomStringType��һ�����������\n"]
pub type TThostFtdcRandomStringType = [::std::os::raw::c_uchar; 17usize];
#[doc = "\nTFtdcOrderMemoType��һ�����������\u{5b6}�����\n"]
pub type TThostFtdcOrderMemoType = [::std::os::raw::c_uchar; 13usize];
pub type TThostFtdcOptSelfCloseFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcBizTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcAppTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcAppIDType��һ��App��������\n"]
pub type TThostFtdcAppIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcSystemInfoLenType��һ��ϵͳ��Ϣ��������\n"]
pub type TThostFtdcSystemInfoLenType = ::std::os::raw::c_int;
#[doc = "\nTFtdcAdditionalInfoLenType��һ��������Ϣ��������\n"]
pub type TThostFtdcAdditionalInfoLenType = ::std::os::raw::c_int;
#[doc = "\nTFtdcClientSystemInfoType��һ�������ն�ϵͳ��Ϣ����\n"]
pub type TThostFtdcClientSystemInfoType = [::std::os::raw::c_uchar; 273usize];
#[doc = "\nTFtdcAdditionalInfoType��һ��ϵͳ�ⲿ��Ϣ����\n"]
pub type TThostFtdcAdditionalInfoType = [::std::os::raw::c_uchar; 261usize];
#[doc = "\nTFtdcBase64ClientSystemInfoType��һ��base64�����ն�ϵͳ��Ϣ����\n"]
pub type TThostFtdcBase64ClientSystemInfoType = [::std::os::raw::c_uchar; 365usize];
#[doc = "\nTFtdcBase64AdditionalInfoType��һ��base64ϵͳ�ⲿ��Ϣ����\n"]
pub type TThostFtdcBase64AdditionalInfoType = [::std::os::raw::c_uchar; 349usize];
#[doc = "\nTFtdcCurrentAuthMethodType��һ����ǰ���õ���\u{5a4}ģʽ��0����������\u{5a4}ģʽ A�ӵ�λ��ʼ���һλ����ͼƬ��\u{5a4}�룬�����ڶ�λ������\u{32c}���\u{e8ec}��������λ����������\u{5a4}������\n"]
pub type TThostFtdcCurrentAuthMethodType = ::std::os::raw::c_int;
#[doc = "\nTFtdcCaptchaInfoLenType��һ��ͼƬ��\u{5a4}��Ϣ��������\n"]
pub type TThostFtdcCaptchaInfoLenType = ::std::os::raw::c_int;
#[doc = "\nTFtdcCaptchaInfoType��һ��ͼƬ��\u{5a4}��Ϣ����\n"]
pub type TThostFtdcCaptchaInfoType = [::std::os::raw::c_uchar; 2561usize];
#[doc = "\nTFtdcUserTextSeqType��һ���û�������\u{5a4}��ı������\n"]
pub type TThostFtdcUserTextSeqType = ::std::os::raw::c_int;
#[doc = "\nTFtdcHandshakeDataType��һ������������������\n"]
pub type TThostFtdcHandshakeDataType = [::std::os::raw::c_uchar; 301usize];
#[doc = "\nTFtdcHandshakeDataLenType��һ�������������ݳ�������\n"]
pub type TThostFtdcHandshakeDataLenType = ::std::os::raw::c_int;
#[doc = "\nTFtdcCryptoKeyVersionType��һ��api��front\u{368}����Կ�汾������\n"]
pub type TThostFtdcCryptoKeyVersionType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcRsaKeyVersionType��һ����Կ�汾������\n"]
pub type TThostFtdcRsaKeyVersionType = ::std::os::raw::c_int;
#[doc = "\nTFtdcSoftwareProviderIDType��һ������������ID����\n"]
pub type TThostFtdcSoftwareProviderIDType = [::std::os::raw::c_uchar; 22usize];
#[doc = "\nTFtdcCollectTimeType��һ����Ϣ�ɼ�ʱ������\n"]
pub type TThostFtdcCollectTimeType = [::std::os::raw::c_uchar; 21usize];
#[doc = "\nTFtdcQueryFreqType��һ����ѯƵ������\n"]
pub type TThostFtdcQueryFreqType = ::std::os::raw::c_int;
pub type TThostFtdcResponseValueType = ::std::os::raw::c_uchar;
pub type TThostFtdcOTCTradeTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcMatchTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcOTCTraderIDType��һ��OTC����Ա��������\n"]
pub type TThostFtdcOTCTraderIDType = [::std::os::raw::c_uchar; 31usize];
#[doc = "\nTFtdcRiskValueType��һ���ڻ�����\u{5b5}����\n"]
pub type TThostFtdcRiskValueType = f64;
#[doc = "\nTFtdcIDBNameType��һ������������������\n"]
pub type TThostFtdcIDBNameType = [::std::os::raw::c_uchar; 100usize];
#[doc = "\nTFtdcDiscountRatioType��һ���ۿ�������\n"]
pub type TThostFtdcDiscountRatioType = f64;
pub type TThostFtdcAuthTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcClassTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcTradingTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcProductStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcSyncDeltaStatusType = ::std::os::raw::c_uchar;
pub type TThostFtdcActionDirectionType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderCancelAlgType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcSyncDescriptionType��һ��\u{5f7}ƽ��������\n"]
pub type TThostFtdcSyncDescriptionType = [::std::os::raw::c_uchar; 257usize];
#[doc = "\nTFtdcCommonIntType��һ��\u{368}��int��������\n"]
pub type TThostFtdcCommonIntType = ::std::os::raw::c_int;
#[doc = "\nTFtdcSysVersionType��һ��ϵͳ�汾����\n"]
pub type TThostFtdcSysVersionType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcOpenLimitControlLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcOrderFreqControlLevelType = ::std::os::raw::c_uchar;
pub type TThostFtdcEnumBoolType = ::std::os::raw::c_uchar;
pub type TThostFtdcTimeRangeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcDeltaType��һ��Delta��������\n"]
pub type TThostFtdcDeltaType = f64;
#[doc = "\nTFtdcSpreadIdType��һ���\u{5bf}������ȼ�����\n"]
pub type TThostFtdcSpreadIdType = ::std::os::raw::c_int;
pub type TThostFtdcPortfolioType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcPortfolioDefIDType��һ��SPBM����ײ�ID����\n"]
pub type TThostFtdcPortfolioDefIDType = ::std::os::raw::c_int;
pub type TThostFtdcWithDrawParamIDType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcWithDrawParamValueType��һ��������Ʋ�����������\n"]
pub type TThostFtdcWithDrawParamValueType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcInvstTradingRightType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcThostFunctionCodeType��һ��Thost�ն˹��\u{734}�������\n"]
pub type TThostFtdcThostFunctionCodeType = ::std::os::raw::c_int;
#[doc = "\nTFtdcSPMMDiscountRatioType��һ��SPMM�ۿ�������\n"]
pub type TThostFtdcSPMMDiscountRatioType = f64;
#[doc = "\nTFtdcSPMMModelDescType��һ��SPMMģ����������\n"]
pub type TThostFtdcSPMMModelDescType = [::std::os::raw::c_uchar; 129usize];
#[doc = "\nTFtdcSPMMModelIDType��һ��SPMMģ��ID����\n"]
pub type TThostFtdcSPMMModelIDType = [::std::os::raw::c_uchar; 33usize];
#[doc = "\nTFtdcSPMMProductIDType��һ��SPMM��ƷȺ��Ʒ��ID����\n"]
pub type TThostFtdcSPMMProductIDType = [::std::os::raw::c_uchar; 41usize];
pub type TThostFtdcInstMarginCalIDType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcProductIDType��һ����ƷID����\n"]
pub type TThostFtdcProductIDType = [::std::os::raw::c_uchar; 41usize];
#[doc = "\nTFtdcHedgeRateType��һ��HedgeRate��������\n"]
pub type TThostFtdcHedgeRateType = f64;
#[doc = "\nTFtdcRCAMSPriorityType��һ�����ȼ�����\n"]
pub type TThostFtdcRCAMSPriorityType = ::std::os::raw::c_int;
#[doc = "\nTFtdcAdjustValueType��һ����ͷ��Ȩ���յ�����\u{5fc}��������\n"]
pub type TThostFtdcAdjustValueType = f64;
pub type TThostFtdcRCAMSCombinationTypeType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcRuleIdType��һ������id����\n"]
pub type TThostFtdcRuleIdType = [::std::os::raw::c_uchar; 51usize];
pub type TThostFtdcPortfTypeType = ::std::os::raw::c_uchar;
pub type TThostFtdcInstrumentClassType = ::std::os::raw::c_uchar;
#[doc = "\nTFtdcCommodityGroupIDType��һ����ƷȺ������\n"]
pub type TThostFtdcCommodityGroupIDType = ::std::os::raw::c_int;
#[doc = "\nTFtdcStdPositionType��һ����\u{5fc}�\u{5b2}���������\n"]
pub type TThostFtdcStdPositionType = f64;
pub type TThostFtdcProdChangeFlagType = ::std::os::raw::c_uchar;
pub type TThostFtdcPwdRcdSrcType = ::std::os::raw::c_uchar;
#[doc = "��Ϣ�\u{5b7}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcDisseminationField {
    #[doc = "����ϵ�к�"]
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "�û���¼����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��\u{32c}����"]
    pub OneTimePassword: TThostFtdcPasswordType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcReqUserLoginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û���¼Ӧ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspUserLoginField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��¼�ɹ�ʱ��"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����ϵͳ����"]
    pub SystemName: TThostFtdcSystemNameType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��\u{f1a35}�����"]
    pub MaxOrderRef: TThostFtdcOrderRefType,
    #[doc = "������ʱ��"]
    pub SHFETime: TThostFtdcTimeType,
    #[doc = "������ʱ��"]
    pub DCETime: TThostFtdcTimeType,
    #[doc = "\u{5a3}����ʱ��"]
    pub CZCETime: TThostFtdcTimeType,
    #[doc = "�н���ʱ��"]
    pub FFEXTime: TThostFtdcTimeType,
    #[doc = "��Դ����ʱ��"]
    pub INETime: TThostFtdcTimeType,
    #[doc = "��\u{328}�汾��Ϣ"]
    pub SysVersion: TThostFtdcSysVersionType,
    #[doc = "������ʱ��"]
    pub GFEXTime: TThostFtdcTimeType,
}
impl Default for CThostFtdcRspUserLoginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û��ǳ�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcUserLogoutField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "ǿ�ƽ���Ա�˳�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcForceUserLogoutField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "�ͻ�����\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqAuthenticateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "��\u{5a4}��"]
    pub AuthCode: TThostFtdcAuthCodeType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
}
impl Default for CThostFtdcReqAuthenticateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ͻ�����\u{5a4}��Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspAuthenticateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "App����"]
    pub AppType: TThostFtdcAppTypeType,
}
impl Default for CThostFtdcRspAuthenticateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ͻ�����\u{5a4}��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthenticationInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "��\u{5a4}��Ϣ"]
    pub AuthInfo: TThostFtdcAuthInfoType,
    #[doc = "�Ƿ�Ϊ��\u{5a4}���"]
    pub IsResult: TThostFtdcBoolType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "App����"]
    pub AppType: TThostFtdcAppTypeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcAuthenticationInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û���¼Ӧ��2"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspUserLogin2Field {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��¼�ɹ�ʱ��"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����ϵͳ����"]
    pub SystemName: TThostFtdcSystemNameType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��\u{f1a35}�����"]
    pub MaxOrderRef: TThostFtdcOrderRefType,
    #[doc = "������ʱ��"]
    pub SHFETime: TThostFtdcTimeType,
    #[doc = "������ʱ��"]
    pub DCETime: TThostFtdcTimeType,
    #[doc = "\u{5a3}����ʱ��"]
    pub CZCETime: TThostFtdcTimeType,
    #[doc = "�н���ʱ��"]
    pub FFEXTime: TThostFtdcTimeType,
    #[doc = "��Դ����ʱ��"]
    pub INETime: TThostFtdcTimeType,
    #[doc = "�����"]
    pub RandomString: TThostFtdcRandomStringType,
}
impl Default for CThostFtdcRspUserLogin2Field {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����ת�ʱ���ͷ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferHeaderField {
    #[doc = "�汾�ţ�������1.0"]
    pub Version: TThostFtdcVersionType,
    #[doc = "���״��룬����"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "�������ڣ����\u{e8ec}��ʽ��yyyymmdd"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ�䣬���\u{e8ec}��ʽ��hhmmss"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ�ţ�N/A"]
    pub TradeSerial: TThostFtdcTradeSerialType,
    #[doc = "�ڻ���˾���룬����"]
    pub FutureID: TThostFtdcFutureIDType,
    #[doc = "���д��룬���ݲ�ѯ���еõ�������"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ��룬���ݲ�ѯ���еõ�������"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "����Ա��N/A"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "�����豸���\u{363}�N/A"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "��¼����N/A"]
    pub RecordNum: TThostFtdcRecordNumType,
    #[doc = "�Ự��ţ�N/A"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�����ţ�N/A"]
    pub RequestID: TThostFtdcRequestIDType,
}
#[doc = "�����ʽ�ת�ڻ�����TradeCode=202001"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureReqField {
    #[doc = "�ڻ��ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "�����־"]
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    #[doc = "����"]
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    #[doc = "ת�˽��"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "�ͻ�������"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "���\u{5a3}�RMB-����� USD-��Բ HKD-��Ԫ"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[doc = "�����ʽ�ת�ڻ�������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferBankToFutureRspField {
    #[doc = "��Ӧ����"]
    pub RetCode: TThostFtdcRetCodeType,
    #[doc = "��Ӧ��Ϣ"]
    pub RetInfo: TThostFtdcRetInfoType,
    #[doc = "�ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "Ӧ�տͻ�������"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "����"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
impl Default for CThostFtdcTransferBankToFutureRspField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ڻ��ʽ�ת��������TradeCode=202002"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankReqField {
    #[doc = "�ڻ��ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "�����־"]
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    #[doc = "����"]
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    #[doc = "ת�˽��"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "�ͻ�������"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "���\u{5a3}�RMB-����� USD-��Բ HKD-��Ԫ"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[doc = "�ڻ��ʽ�ת����������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferFutureToBankRspField {
    #[doc = "��Ӧ����"]
    pub RetCode: TThostFtdcRetCodeType,
    #[doc = "��Ӧ��Ϣ"]
    pub RetInfo: TThostFtdcRetInfoType,
    #[doc = "�ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "Ӧ�տͻ�������"]
    pub CustFee: TThostFtdcMoneyType,
    #[doc = "����"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
impl Default for CThostFtdcTransferFutureToBankRspField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�����ʽ�����TradeCode=204002"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferQryBankReqField {
    #[doc = "�ڻ��ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "�����־"]
    pub FuturePwdFlag: TThostFtdcFuturePwdFlagType,
    #[doc = "����"]
    pub FutureAccPwd: TThostFtdcFutureAccPwdType,
    #[doc = "���\u{5a3}�RMB-����� USD-��Բ HKD-��Ԫ"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
#[doc = "��ѯ�����ʽ�������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryBankRspField {
    #[doc = "��Ӧ����"]
    pub RetCode: TThostFtdcRetCodeType,
    #[doc = "��Ӧ��Ϣ"]
    pub RetInfo: TThostFtdcRetInfoType,
    #[doc = "�ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
    #[doc = "�������"]
    pub TradeAmt: TThostFtdcMoneyType,
    #[doc = "���п������"]
    pub UseAmt: TThostFtdcMoneyType,
    #[doc = "���п�ȡ���"]
    pub FetchAmt: TThostFtdcMoneyType,
    #[doc = "����"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
}
impl Default for CThostFtdcTransferQryBankRspField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ���н�����ϸ����TradeCode=204999"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTransferQryDetailReqField {
    #[doc = "�ڻ��ʽ��˻�"]
    pub FutureAccount: TThostFtdcAccountIDType,
}
#[doc = "��ѯ���н�����ϸ������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferQryDetailRspField {
    #[doc = "��������"]
    pub TradeDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "���״���"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "�ڻ���ˮ��"]
    pub FutureSerial: TThostFtdcTradeSerialNoType,
    #[doc = "�ڻ���˾����"]
    pub FutureID: TThostFtdcFutureIDType,
    #[doc = "�ʽ��ʺ�"]
    pub FutureAccount: TThostFtdcFutureAccountType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcTradeSerialNoType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "�����˺�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "\u{5a4}������"]
    pub CertCode: TThostFtdcCertCodeType,
    #[doc = "���Ҵ���"]
    pub CurrencyCode: TThostFtdcCurrencyCodeType,
    #[doc = "�������"]
    pub TxAmount: TThostFtdcMoneyType,
    #[doc = "��Ч��־"]
    pub Flag: TThostFtdcTransferValidFlagType,
}
impl Default for CThostFtdcTransferQryDetailRspField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ӧ��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspInfoField {
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcRspInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������"]
    pub ExchangeName: TThostFtdcExchangeNameType,
    #[doc = "����������"]
    pub ExchangeProperty: TThostFtdcExchangePropertyType,
}
impl Default for CThostFtdcExchangeField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ʒ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcProductField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ʒ����"]
    pub ProductName: TThostFtdcProductNameType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductClass: TThostFtdcProductClassType,
    #[doc = "��Լ��������"]
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    #[doc = "��С�䶯��λ"]
    pub PriceTick: TThostFtdcPriceType,
    #[doc = "�м۵�����µ���"]
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "�м۵���С�µ���"]
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{7bc}۵�����µ���"]
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{7bc}۵���С�µ���"]
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{5b2}�����"]
    pub PositionType: TThostFtdcPositionTypeType,
    #[doc = "�\u{5b2}���������"]
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    #[doc = "ƽ�\u{5b4}�������"]
    pub CloseDealType: TThostFtdcCloseDealTypeType,
    #[doc = "���ױ�������"]
    pub TradeCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��Ѻ�ʽ���÷�Χ"]
    pub MortgageFundUseRange: TThostFtdcMortgageFundUseRangeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ������Ʒ����"]
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��������Ʒ����"]
    pub ExchangeProductID: TThostFtdcInstrumentIDType,
    #[doc = "��������������"]
    pub OpenLimitControlLevel: TThostFtdcOpenLimitControlLevelType,
    #[doc = "����Ƶ�ʿ�������"]
    pub OrderFreqControlLevel: TThostFtdcOrderFreqControlLevelType,
}
impl Default for CThostFtdcProductField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Լ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentName: TThostFtdcInstrumentNameType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ʒ����"]
    pub ProductClass: TThostFtdcProductClassType,
    #[doc = "�������"]
    pub DeliveryYear: TThostFtdcYearType,
    #[doc = "������"]
    pub DeliveryMonth: TThostFtdcMonthType,
    #[doc = "�м۵�����µ���"]
    pub MaxMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "�м۵���С�µ���"]
    pub MinMarketOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{7bc}۵�����µ���"]
    pub MaxLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "�\u{7bc}۵���С�µ���"]
    pub MinLimitOrderVolume: TThostFtdcVolumeType,
    #[doc = "��Լ��������"]
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    #[doc = "��С�䶯��λ"]
    pub PriceTick: TThostFtdcPriceType,
    #[doc = "������"]
    pub CreateDate: TThostFtdcDateType,
    #[doc = "������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "������"]
    pub ExpireDate: TThostFtdcDateType,
    #[doc = "��ʼ������"]
    pub StartDelivDate: TThostFtdcDateType,
    #[doc = "����������"]
    pub EndDelivDate: TThostFtdcDateType,
    #[doc = "��Լ��������״\u{32c}"]
    pub InstLifePhase: TThostFtdcInstLifePhaseType,
    #[doc = "��ǰ�Ƿ���"]
    pub IsTrading: TThostFtdcBoolType,
    #[doc = "�\u{5b2}�����"]
    pub PositionType: TThostFtdcPositionTypeType,
    #[doc = "�\u{5b2}���������"]
    pub PositionDateType: TThostFtdcPositionDateTypeType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatio: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatio: TThostFtdcRatioType,
    #[doc = "�Ƿ�ʹ�ô�\u{ed65}�\u{7f1}�\u{5a4}���㷨"]
    pub MaxMarginSideAlgorithm: TThostFtdcMaxMarginSideAlgorithmType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve4: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b4}�м�"]
    pub StrikePrice: TThostFtdcPriceType,
    #[doc = "��Ȩ����"]
    pub OptionsType: TThostFtdcOptionsTypeType,
    #[doc = "��Լ������Ʒ����"]
    pub UnderlyingMultiple: TThostFtdcUnderlyingMultipleType,
    #[doc = "�������"]
    pub CombinationType: TThostFtdcCombinationTypeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "������Ʒ����"]
    pub UnderlyingInstrID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInstrumentField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���\u{379}�˾"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{379}�˾���"]
    pub BrokerAbbr: TThostFtdcBrokerAbbrType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerName: TThostFtdcBrokerNameType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
impl Default for CThostFtdcBrokerField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����������Ա"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTraderField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ����"]
    pub InstallCount: TThostFtdcInstallCountType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����ʱѡ��ϯλ�㷨"]
    pub OrderCancelAlg: TThostFtdcOrderCancelAlgType,
    #[doc = "���ױ��\u{330}�װ����"]
    pub TradeInstallCount: TThostFtdcInstallCountType,
    #[doc = "���鱨�\u{330}�װ����"]
    pub MDInstallCount: TThostFtdcInstallCountType,
}
impl Default for CThostFtdcTraderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ��������"]
    pub InvestorName: TThostFtdcPartyNameType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "��ϵ�绰"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "\u{368}Ѷ��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "�\u{5bb}�"]
    pub Mobile: TThostFtdcMobileType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
    #[doc = "�Ƿ�Ƶ�ʿ���"]
    pub IsOrderFreq: TThostFtdcEnumBoolType,
    #[doc = "�Ƿ\u{7fab2}�����"]
    pub IsOpenVolLimit: TThostFtdcEnumBoolType,
}
impl Default for CThostFtdcInvestorField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ױ���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTradingCodeField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "���ױ�������"]
    pub ClientIDType: TThostFtdcClientIDTypeType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "ҵ������"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "��Ա����;��\u{379}�˾������ձ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcPartBrokerField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
#[doc = "�����û�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSuperUserField {
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û�����"]
    pub UserName: TThostFtdcUserNameType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
impl Default for CThostFtdcSuperUserField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����û�����Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSuperUserFunctionField {
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{734}���"]
    pub FunctionCode: TThostFtdcFunctionCodeType,
}
#[doc = "Ͷ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorGroupField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���߷�������"]
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
impl Default for CThostFtdcInvestorGroupField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ʽ��˻�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTradingAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ϴ���Ѻ���"]
    pub PreMortgage: TThostFtdcMoneyType,
    #[doc = "�ϴ����ö��"]
    pub PreCredit: TThostFtdcMoneyType,
    #[doc = "�ϴδ���"]
    pub PreDeposit: TThostFtdcMoneyType,
    #[doc = "�ϴν���\u{5fc}����"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub InterestBase: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub Interest: TThostFtdcMoneyType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "��ǰ��\u{5a4}���\u{736}�"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ڻ�����\u{5fc}����"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "�����ʽ�"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "��ȡ�ʽ�"]
    pub WithdrawQuota: TThostFtdcMoneyType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���ö��"]
    pub Credit: TThostFtdcMoneyType,
    #[doc = "��Ѻ���"]
    pub Mortgage: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7fd}��\u{ec63}\u{5a4}��"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "���������\u{ec63}\u{5a4}��"]
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    #[doc = "�����ڻ�����\u{5fc}����"]
    pub ReserveBalance: TThostFtdcMoneyType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ϴλ���������"]
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�ϴλ����ʳ����"]
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub FundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�����ʳ����"]
    pub FundMortgageOut: TThostFtdcMoneyType,
    #[doc = "������Ѻ���"]
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    #[doc = "����Ѻ���ҽ��"]
    pub MortgageableFund: TThostFtdcMoneyType,
    #[doc = "�����Ʒռ�ñ�\u{5a4}��"]
    pub SpecProductMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ���ᱣ\u{5a4}��"]
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ������"]
    pub SpecProductCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ����������"]
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    #[doc = "�����Ʒƽ��ӯ��"]
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    #[doc = "���ݳ\u{5b2}�ӯ���㷨����������Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    #[doc = "�����Ʒ��������\u{5a4}��"]
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    #[doc = "ҵ������"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "��ʱ���㶳����"]
    pub FrozenSwap: TThostFtdcMoneyType,
    #[doc = "ʣ�\u{efb}����"]
    pub RemainSwap: TThostFtdcMoneyType,
}
#[doc = "Ͷ���\u{7f3}\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPositionField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�\u{5b2}\u{5b6}�շ���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�\u{5b2}�����"]
    pub PositionDate: TThostFtdcPositionDateType,
    #[doc = "���ճ\u{5b2}�"]
    pub YdPosition: TThostFtdcVolumeType,
    #[doc = "���ճ\u{5b2}�"]
    pub Position: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub LongFrozen: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub ShortFrozen: TThostFtdcVolumeType,
    #[doc = "���\u{5b6}�����"]
    pub LongFrozenAmount: TThostFtdcMoneyType,
    #[doc = "���\u{5b6}�����"]
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    #[doc = "������"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "���\u{5bd}��"]
    pub OpenAmount: TThostFtdcMoneyType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}\u{5b3}ɱ�"]
    pub PositionCost: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "ռ�õı�\u{5a4}��"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{5b3}ɱ�"]
    pub OpenCost: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ϳɽ��γɵĳ\u{5b2}�"]
    pub CombPosition: TThostFtdcVolumeType,
    #[doc = "��϶�ͷ����"]
    pub CombLongFrozen: TThostFtdcVolumeType,
    #[doc = "��Ͽ�ͷ����"]
    pub CombShortFrozen: TThostFtdcVolumeType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ճ\u{5b2}�"]
    pub TodayPosition: TThostFtdcVolumeType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}�ж���"]
    pub StrikeFrozen: TThostFtdcVolumeType,
    #[doc = "\u{5b4}�ж�����"]
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    #[doc = "����\u{5b4}�ж���"]
    pub AbandonFrozen: TThostFtdcVolumeType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}�ж�������"]
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�\u{5b2}\u{5b3}ɱ���\u{5b5}"]
    pub PositionCostOffset: TThostFtdcMoneyType,
    #[doc = "tas�\u{5b2}�����"]
    pub TasPosition: TThostFtdcVolumeType,
    #[doc = "tas�\u{5b2}\u{5b3}ɱ�"]
    pub TasPositionCost: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInvestorPositionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Լ��\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���Խ�������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInstrumentMarginRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Լ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentCommissionRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "ҵ������"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInstrumentCommissionRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDepthMarketDataField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{5b2}���"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "����"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "��\u{7fc}�"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "��ͼ�"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ����"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}���"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "������"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "����ʵ��"]
    pub PreDelta: TThostFtdcRatioType,
    #[doc = "����ʵ��"]
    pub CurrDelta: TThostFtdcRatioType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}ĺ���"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "�����һ"]
    pub BidPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub BidVolume1: TThostFtdcVolumeType,
    #[doc = "������һ"]
    pub AskPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub AskVolume1: TThostFtdcVolumeType,
    #[doc = "����۶�"]
    pub BidPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume2: TThostFtdcVolumeType,
    #[doc = "�����۶�"]
    pub AskPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume2: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume3: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume3: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume4: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume4: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume5: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume5: TThostFtdcVolumeType,
    #[doc = "���վ���"]
    pub AveragePrice: TThostFtdcPriceType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "�ϴ���"]
    pub BandingUpperPrice: TThostFtdcPriceType,
    #[doc = "�´���"]
    pub BandingLowerPrice: TThostFtdcPriceType,
}
impl Default for CThostFtdcDepthMarketDataField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���ߺ�Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentTradingRightField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����Ȩ��"]
    pub TradingRight: TThostFtdcTradingRightType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInstrumentTradingRightField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���\u{379}�˾�û�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û�����"]
    pub UserName: TThostFtdcUserNameType,
    #[doc = "�û�����"]
    pub UserType: TThostFtdcUserTypeType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "�Ƿ�ʹ������"]
    pub IsUsingOTP: TThostFtdcBoolType,
    #[doc = "�Ƿ�ǿ���ն���\u{5a4}"]
    pub IsAuthForce: TThostFtdcBoolType,
}
impl Default for CThostFtdcBrokerUserField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���\u{379}�˾�û�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserPasswordField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�ϴ��\u{7b8}�ʱ��"]
    pub LastUpdateTime: TThostFtdcDateTimeType,
    #[doc = "�ϴε�½ʱ��"]
    pub LastLoginTime: TThostFtdcDateTimeType,
    #[doc = "�������ʱ��"]
    pub ExpireDate: TThostFtdcDateType,
    #[doc = "���������ʱ��"]
    pub WeakExpireDate: TThostFtdcDateType,
}
impl Default for CThostFtdcBrokerUserPasswordField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���\u{379}�˾�û�����Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerUserFunctionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾���\u{734}���"]
    pub BrokerFunctionCode: TThostFtdcBrokerFunctionCodeType,
}
#[doc = "����������Ա���\u{33b}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTraderOfferField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������Ա����״\u{32c}"]
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    #[doc = "�����������������"]
    pub ConnectRequestDate: TThostFtdcDateType,
    #[doc = "�������������ʱ��"]
    pub ConnectRequestTime: TThostFtdcTimeType,
    #[doc = "�ϴα�������"]
    pub LastReportDate: TThostFtdcDateType,
    #[doc = "�ϴα���ʱ��"]
    pub LastReportTime: TThostFtdcTimeType,
    #[doc = "�����������"]
    pub ConnectDate: TThostFtdcDateType,
    #[doc = "�������ʱ��"]
    pub ConnectTime: TThostFtdcTimeType,
    #[doc = "��������"]
    pub StartDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub StartTime: TThostFtdcTimeType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��ϯλ���ɽ����"]
    pub MaxTradeID: TThostFtdcTradeIDType,
    #[doc = "��ϯλ��\u{f1a35}�����"]
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
    #[doc = "����ʱѡ��ϯλ�㷨"]
    pub OrderCancelAlg: TThostFtdcOrderCancelAlgType,
}
impl Default for CThostFtdcTraderOfferField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���\u{7fd}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSettlementInfoField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��Ϣ����"]
    pub Content: TThostFtdcContentType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcSettlementInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Լ��\u{5a4}���ʵ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateAdjustField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���Խ�������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInstrumentMarginRateAdjustField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcExchangeMarginRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������\u{5a4}���ʵ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeMarginRateAdjustField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���潻����Ͷ���߶�ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "���潻����Ͷ���߶�ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "���潻����Ͷ���߿�ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "���潻����Ͷ���߿�ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��������ͷ��\u{5a4}����"]
    pub ExchLongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��������ͷ��\u{5a4}���"]
    pub ExchLongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��������ͷ��\u{5a4}����"]
    pub ExchShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��������ͷ��\u{5a4}���"]
    pub ExchShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�����潻����Ͷ���߶�ͷ��\u{5a4}����"]
    pub NoLongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����潻����Ͷ���߶�ͷ��\u{5a4}���"]
    pub NoLongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�����潻����Ͷ���߿�ͷ��\u{5a4}����"]
    pub NoShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����潻����Ͷ���߿�ͷ��\u{5a4}���"]
    pub NoShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcExchangeMarginRateAdjustField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcExchangeRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Դ���\u{5b5}�λ����"]
    pub FromCurrencyUnit: TThostFtdcCurrencyUnitType,
    #[doc = "Ŀ�����"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "����"]
    pub ExchangeRate: TThostFtdcExchangeRateType,
}
#[doc = "��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSettlementRefField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
}
#[doc = "��ǰʱ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCurrentTimeField {
    #[doc = "��ǰ������"]
    pub CurrDate: TThostFtdcDateType,
    #[doc = "��ǰʱ��"]
    pub CurrTime: TThostFtdcTimeType,
    #[doc = "��ǰʱ�䣨���룩"]
    pub CurrMillisec: TThostFtdcMillisecType,
    #[doc = "��Ȼ����"]
    pub ActionDay: TThostFtdcDateType,
}
#[doc = "\u{368}Ѷ�\u{5f6}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCommPhaseField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "\u{368}Ѷʱ�α��"]
    pub CommPhaseNo: TThostFtdcCommPhaseNoType,
    #[doc = "ϵͳ���"]
    pub SystemID: TThostFtdcSystemIDType,
}
#[doc = "��¼��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginInfoField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��¼����"]
    pub LoginDate: TThostFtdcDateType,
    #[doc = "��¼ʱ��"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "ϵͳ����"]
    pub SystemName: TThostFtdcSystemNameType,
    #[doc = "����,������"]
    pub PasswordDeprecated: TThostFtdcPasswordType,
    #[doc = "��\u{f1a35}�����"]
    pub MaxOrderRef: TThostFtdcOrderRefType,
    #[doc = "������ʱ��"]
    pub SHFETime: TThostFtdcTimeType,
    #[doc = "������ʱ��"]
    pub DCETime: TThostFtdcTimeType,
    #[doc = "\u{5a3}����ʱ��"]
    pub CZCETime: TThostFtdcTimeType,
    #[doc = "�н���ʱ��"]
    pub FFEXTime: TThostFtdcTimeType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��\u{32c}����"]
    pub OneTimePassword: TThostFtdcPasswordType,
    #[doc = "��Դ����ʱ��"]
    pub INETime: TThostFtdcTimeType,
    #[doc = "��ѯʱ�Ƿ���Ҫ����"]
    pub IsQryControl: TThostFtdcBoolType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcLoginInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��¼��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLogoutAllField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "ϵͳ����"]
    pub SystemName: TThostFtdcSystemNameType,
}
impl Default for CThostFtdcLogoutAllField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "ǰ��״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcFrontStatusField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�ϴα�������"]
    pub LastReportDate: TThostFtdcDateType,
    #[doc = "�ϴα���ʱ��"]
    pub LastReportTime: TThostFtdcTimeType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
#[doc = "�û�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserPasswordUpdateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ԭ���Ŀ���"]
    pub OldPassword: TThostFtdcPasswordType,
    #[doc = "�µĿ���"]
    pub NewPassword: TThostFtdcPasswordType,
}
impl Default for CThostFtdcUserPasswordUpdateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���뱨��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "�û�ǿƽ��־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcInputOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������Դ"]
    pub OrderSource: TThostFtdcOrderSourceType,
    #[doc = "����״\u{32c}"]
    pub OrderStatus: TThostFtdcOrderStatusType,
    #[doc = "��������"]
    pub OrderType: TThostFtdcOrderTypeType,
    #[doc = "��ɽ�����"]
    pub VolumeTraded: TThostFtdcVolumeType,
    #[doc = "ʣ������"]
    pub VolumeTotal: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "ί��ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub ActiveTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub SuspendTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}Ľ���������Ա����"]
    pub ActiveTraderID: TThostFtdcTraderIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�û�ǿƽ��־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "��ر���"]
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "\u{5a3}�����ɽ�����"]
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderField {
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������Դ"]
    pub OrderSource: TThostFtdcOrderSourceType,
    #[doc = "����״\u{32c}"]
    pub OrderStatus: TThostFtdcOrderStatusType,
    #[doc = "��������"]
    pub OrderType: TThostFtdcOrderTypeType,
    #[doc = "��ɽ�����"]
    pub VolumeTraded: TThostFtdcVolumeType,
    #[doc = "ʣ������"]
    pub VolumeTotal: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "ί��ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub ActiveTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub SuspendTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}Ľ���������Ա����"]
    pub ActiveTraderID: TThostFtdcTraderIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExchangeOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������������ʧ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderInsertErrorField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcExchangeOrderInsertErrorField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���뱨������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcInputOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExchangeOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������������ʧ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOrderActionErrorField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcExchangeOrderActionErrorField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�������ɽ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeTradeField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "���\u{5fd}�ɫ"]
    pub TradingRole: TThostFtdcTradingRoleType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�۸�"]
    pub Price: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ�ʱ��"]
    pub TradeDate: TThostFtdcDateType,
    #[doc = "�ɽ�ʱ��"]
    pub TradeTime: TThostFtdcTimeType,
    #[doc = "�ɽ�����"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "�ɽ�����Դ"]
    pub PriceSource: TThostFtdcPriceSourceType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "�ɽ���Դ"]
    pub TradeSource: TThostFtdcTradeSourceType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcExchangeTradeField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ɽ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "���\u{5fd}�ɫ"]
    pub TradingRole: TThostFtdcTradingRoleType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�۸�"]
    pub Price: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ�ʱ��"]
    pub TradeDate: TThostFtdcDateType,
    #[doc = "�ɽ�ʱ��"]
    pub TradeTime: TThostFtdcTimeType,
    #[doc = "�ɽ�����"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "�ɽ�����Դ"]
    pub PriceSource: TThostFtdcPriceSourceType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "�ɽ���Դ"]
    pub TradeSource: TThostFtdcTradeSourceType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcTradeField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û��Ự"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserSessionField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��¼����"]
    pub LoginDate: TThostFtdcDateType,
    #[doc = "��¼ʱ��"]
    pub LoginTime: TThostFtdcTimeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcUserSessionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��\u{f1a35}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMaxOrderVolumeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���������������"]
    pub MaxVolume: TThostFtdcVolumeType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryMaxOrderVolumeField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���\u{7fd}�����ȷ����Ϣ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSettlementInfoConfirmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "ȷ������"]
    pub ConfirmDate: TThostFtdcDateType,
    #[doc = "ȷ��ʱ��"]
    pub ConfirmTime: TThostFtdcTimeType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "�����\u{36c}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDepositField {
    #[doc = "�������ˮ��"]
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "�Ƿ�ǿ�ƽ���"]
    pub IsForce: TThostFtdcBoolType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�Ƿ��Ǹ�����Ȩ��ת"]
    pub IsFromSopt: TThostFtdcBoolType,
    #[doc = "�ʽ�����"]
    pub TradingPassword: TThostFtdcPasswordType,
    #[doc = "�Ƿ���������\u{335}���ת"]
    pub IsSecAgentTranfer: TThostFtdcBoolType,
}
impl Default for CThostFtdcSyncDepositField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������Ѻ\u{36c}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncFundMortgageField {
    #[doc = "������Ѻ��ˮ��"]
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��Ѻ���"]
    pub MortgageAmount: TThostFtdcMoneyType,
    #[doc = "Ŀ�����"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "���\u{379}�˾\u{36c}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerSyncField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "����\u{36c}���е�Ͷ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ��������"]
    pub InvestorName: TThostFtdcPartyNameType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "��ϵ�绰"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "\u{368}Ѷ��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "�\u{5bb}�"]
    pub Mobile: TThostFtdcMobileType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
    #[doc = "�Ƿ�Ƶ�ʿ���"]
    pub IsOrderFreq: TThostFtdcEnumBoolType,
    #[doc = "�Ƿ\u{7fab2}�����"]
    pub IsOpenVolLimit: TThostFtdcEnumBoolType,
}
impl Default for CThostFtdcSyncingInvestorField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����\u{36c}���еĽ��״���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncingTradingCodeField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "���ױ�������"]
    pub ClientIDType: TThostFtdcClientIDTypeType,
}
#[doc = "����\u{36c}���е�Ͷ���߷���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorGroupField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���߷�������"]
    pub InvestorGroupName: TThostFtdcInvestorGroupNameType,
}
impl Default for CThostFtdcSyncingInvestorGroupField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����\u{36c}���еĽ����˺�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncingTradingAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ϴ���Ѻ���"]
    pub PreMortgage: TThostFtdcMoneyType,
    #[doc = "�ϴ����ö��"]
    pub PreCredit: TThostFtdcMoneyType,
    #[doc = "�ϴδ���"]
    pub PreDeposit: TThostFtdcMoneyType,
    #[doc = "�ϴν���\u{5fc}����"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub InterestBase: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub Interest: TThostFtdcMoneyType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "��ǰ��\u{5a4}���\u{736}�"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ڻ�����\u{5fc}����"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "�����ʽ�"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "��ȡ�ʽ�"]
    pub WithdrawQuota: TThostFtdcMoneyType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���ö��"]
    pub Credit: TThostFtdcMoneyType,
    #[doc = "��Ѻ���"]
    pub Mortgage: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7fd}��\u{ec63}\u{5a4}��"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "���������\u{ec63}\u{5a4}��"]
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    #[doc = "�����ڻ�����\u{5fc}����"]
    pub ReserveBalance: TThostFtdcMoneyType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ϴλ���������"]
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�ϴλ����ʳ����"]
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub FundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�����ʳ����"]
    pub FundMortgageOut: TThostFtdcMoneyType,
    #[doc = "������Ѻ���"]
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    #[doc = "����Ѻ���ҽ��"]
    pub MortgageableFund: TThostFtdcMoneyType,
    #[doc = "�����Ʒռ�ñ�\u{5a4}��"]
    pub SpecProductMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ���ᱣ\u{5a4}��"]
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ������"]
    pub SpecProductCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ����������"]
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    #[doc = "�����Ʒƽ��ӯ��"]
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    #[doc = "���ݳ\u{5b2}�ӯ���㷨����������Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    #[doc = "�����Ʒ��������\u{5a4}��"]
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ʱ���㶳����"]
    pub FrozenSwap: TThostFtdcMoneyType,
    #[doc = "ʣ�\u{efb}����"]
    pub RemainSwap: TThostFtdcMoneyType,
}
#[doc = "����\u{36c}���е�Ͷ���\u{7f3}\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInvestorPositionField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�\u{5b2}\u{5b6}�շ���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�\u{5b2}�����"]
    pub PositionDate: TThostFtdcPositionDateType,
    #[doc = "���ճ\u{5b2}�"]
    pub YdPosition: TThostFtdcVolumeType,
    #[doc = "���ճ\u{5b2}�"]
    pub Position: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub LongFrozen: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub ShortFrozen: TThostFtdcVolumeType,
    #[doc = "���\u{5b6}�����"]
    pub LongFrozenAmount: TThostFtdcMoneyType,
    #[doc = "���\u{5b6}�����"]
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    #[doc = "������"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "���\u{5bd}��"]
    pub OpenAmount: TThostFtdcMoneyType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}\u{5b3}ɱ�"]
    pub PositionCost: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "ռ�õı�\u{5a4}��"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{5b3}ɱ�"]
    pub OpenCost: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ϳɽ��γɵĳ\u{5b2}�"]
    pub CombPosition: TThostFtdcVolumeType,
    #[doc = "��϶�ͷ����"]
    pub CombLongFrozen: TThostFtdcVolumeType,
    #[doc = "��Ͽ�ͷ����"]
    pub CombShortFrozen: TThostFtdcVolumeType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ճ\u{5b2}�"]
    pub TodayPosition: TThostFtdcVolumeType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}�ж���"]
    pub StrikeFrozen: TThostFtdcVolumeType,
    #[doc = "\u{5b4}�ж�����"]
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    #[doc = "����\u{5b4}�ж���"]
    pub AbandonFrozen: TThostFtdcVolumeType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}�ж�������"]
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�\u{5b2}\u{5b3}ɱ���\u{5b5}"]
    pub PositionCostOffset: TThostFtdcMoneyType,
    #[doc = "tas�\u{5b2}�����"]
    pub TasPosition: TThostFtdcVolumeType,
    #[doc = "tas�\u{5b2}\u{5b3}ɱ�"]
    pub TasPositionCost: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcSyncingInvestorPositionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����\u{36c}���еĺ�Լ��\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentMarginRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���Խ�������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcSyncingInstrumentMarginRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����\u{36c}���еĺ�Լ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentCommissionRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcSyncingInstrumentCommissionRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����\u{36c}���еĺ�Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncingInstrumentTradingRightField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����Ȩ��"]
    pub TradingRight: TThostFtdcTradingRightType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcSyncingInstrumentTradingRightField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�ɽ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryTradeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��ʼʱ��"]
    pub TradeTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub TradeTimeEnd: TThostFtdcTimeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryTradeField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯͶ���\u{7f3}\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInvestorPositionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�ʽ��˻�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTradingAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ҵ������"]
    pub BizType: TThostFtdcBizTypeType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
}
#[doc = "��ѯͶ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "��ѯ���ױ���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTradingCodeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "���ױ�������"]
    pub ClientIDType: TThostFtdcClientIDTypeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "��ѯͶ������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorGroupField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "��ѯ��Լ��\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentMarginRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInstrumentMarginRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentCommissionRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInstrumentCommissionRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentTradingRightField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInstrumentTradingRightField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ���\u{379}�˾"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "��ѯ����Ա"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTraderField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "��ѯ�����û�����Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySuperUserFunctionField {
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "��ѯ�û��Ự"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryUserSessionField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "��ѯ���\u{379}�˾��Ա����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryPartBrokerField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
}
#[doc = "��ѯǰ��״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryFrontStatusField {
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
}
#[doc = "��ѯ����������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcQryExchangeOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "��ѯ��������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeOrderActionField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "��ѯ�����û�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySuperUserField {
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "��ѯ������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "��ѯ��Ʒ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryProductField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ʒ����"]
    pub ProductClass: TThostFtdcProductClassType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryProductField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��Լ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInstrumentField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryDepthMarketDataField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Ʒ����"]
    pub ProductClass: TThostFtdcProductClassType,
}
impl Default for CThostFtdcQryDepthMarketDataField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ���\u{379}�˾�û�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "��ѯ���\u{379}�˾�û�Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserFunctionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "��ѯ����Ա���\u{33b}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTraderOfferField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "��ѯ�������ˮ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySyncDepositField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�������ˮ��"]
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
}
#[doc = "��ѯͶ���\u{7fd}�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "��ѯ��������\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryExchangeMarginRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ������������\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeMarginRateAdjustField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryExchangeMarginRateAdjustField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Ŀ�����"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "��ѯ������Ѻ��ˮ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySyncFundMortgageField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "������Ѻ��ˮ��"]
    pub MortgageSeqNo: TThostFtdcDepositSeqNoType,
}
#[doc = "��ѯ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryHisOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryHisOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ǰ��Ȩ��Լ��С��\u{5a4}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrMiniMarginField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��λ���\u{5a3}���Ȩ��Լ��С��\u{5a4}��"]
    pub MinMargin: TThostFtdcMoneyType,
    #[doc = "ȡ\u{5b5}��ʽ"]
    pub ValueMethod: TThostFtdcValueMethodType,
    #[doc = "�Ƿ���潻������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcOptionInstrMiniMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ǰ��Ȩ��Լ��\u{5a4}�����ϵ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrMarginAdjustField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���潻������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcOptionInstrMarginAdjustField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ǰ��Ȩ��Լ�����ѵ���ϸ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrCommRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}����������"]
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    #[doc = "\u{5b4}��������"]
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcOptionInstrCommRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ȩ���׳ɱ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrTradeCostField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Լ��\u{5a4}�\u{32ef1}䲿��"]
    pub FixedMargin: TThostFtdcMoneyType,
    #[doc = "��Ȩ��Լ��С��\u{5a4}��"]
    pub MiniMargin: TThostFtdcMoneyType,
    #[doc = "��Ȩ��ԼȨ����"]
    pub Royalty: TThostFtdcMoneyType,
    #[doc = "��������Ȩ��Լ��\u{5a4}�\u{32ef1}䲿��"]
    pub ExchFixedMargin: TThostFtdcMoneyType,
    #[doc = "��������Ȩ��Լ��С��\u{5a4}��"]
    pub ExchMiniMargin: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcOptionInstrTradeCostField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ȩ���׳ɱ���ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradeCostField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Լ����"]
    pub InputPrice: TThostFtdcPriceType,
    #[doc = "��ļ۸�,��0����������"]
    pub UnderlyingPrice: TThostFtdcPriceType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryOptionInstrTradeCostField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ȩ�������ʲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionInstrCommRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryOptionInstrCommRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��\u{5b8}�\u{5bb}�\u{5b8}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcIndexPriceField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b8}���\u{5bb}����\u{33c}�"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcIndexPriceField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����\u{5b4}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "����ͷ������ĳ\u{5b2}\u{5b7}���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ȩ��Ȩ���Ƿ����ڻ�ͷ��ı��,���\u{5b6}��ѷ���"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "��Ȩ��Ȩ�����ɵ�ͷ���Ƿ��Զ�ƽ��"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcInputExecOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����\u{5b4}���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5b4}�������������"]
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}������������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcInputExecOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{5b4}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "����ͷ������ĳ\u{5b2}\u{5b7}���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ȩ��Ȩ���Ƿ����ڻ�ͷ��ı��,���\u{5b6}��ѷ���"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "��Ȩ��Ȩ�����ɵ�ͷ���Ƿ��Զ�ƽ��"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "����\u{5b4}��������"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "\u{5b4}�������ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "\u{5b4}��������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "\u{5b4}�н��"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerExecOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExecOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{5b4}���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5b4}�������������"]
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}������������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "����\u{5b4}��������"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExecOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{5b4}�������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}��������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryExecOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������\u{5b4}��������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderField {
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "����ͷ������ĳ\u{5b2}\u{5b7}���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ȩ��Ȩ���Ƿ����ڻ�ͷ��ı��,���\u{5b6}��ѷ���"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "��Ȩ��Ȩ�����ɵ�ͷ���Ƿ��Զ�ƽ��"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "����\u{5b4}��������"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "\u{5b4}�������ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "\u{5b4}��������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "\u{5b4}�н��"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExchangeExecOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������\u{5b4}�������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcQryExchangeExecOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{5b4}�����������ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "������\u{5b4}���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeExecOrderActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}������������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "����\u{5b4}��������"]
    pub ExecOrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcExchangeExecOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������\u{5b4}�����������ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeExecOrderActionField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "����\u{5b4}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "\u{5b4}������"]
    pub ActionType: TThostFtdcActionTypeType,
    #[doc = "����ͷ������ĳ\u{5b2}\u{5b7}���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ȩ��Ȩ���Ƿ����ڻ�ͷ��ı��,���\u{5b6}��ѷ���"]
    pub ReservePositionFlag: TThostFtdcExecOrderPositionFlagType,
    #[doc = "��Ȩ��Ȩ�����ɵ�ͷ���Ƿ��Զ�ƽ��"]
    pub CloseFlag: TThostFtdcExecOrderCloseFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcErrExecOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ����\u{5b4}������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "����\u{5b4}���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5b4}�������������"]
    pub ExecOrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "\u{5b4}����������"]
    pub ExecOrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}������������"]
    pub ExecOrderSysID: TThostFtdcExecOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcErrExecOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ����\u{5b4}���������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryErrExecOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "Ͷ������Ȩ��Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrTradingRightField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "����Ȩ��"]
    pub TradingRight: TThostFtdcTradingRightType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcOptionInstrTradingRightField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��Ȩ��Լ����Ȩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionInstrTradingRightField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryOptionInstrTradingRightField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����ѯ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputForQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "ѯ������"]
    pub ForQuoteRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcInputForQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "ѯ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "ѯ������"]
    pub ForQuoteRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����ѯ�۱��"]
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "ѯ��״\u{32c}"]
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾ѯ�۱��"]
    pub BrokerForQutoSeq: TThostFtdcSequenceNoType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcForQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "ѯ�۲�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryForQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryForQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������ѯ����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeForQuoteField {
    #[doc = "����ѯ�۱��"]
    pub ForQuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "ѯ��״\u{32c}"]
    pub ForQuoteStatus: TThostFtdcForQuoteStatusType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExchangeForQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������ѯ�۲�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeForQuoteField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcQryExchangeForQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����ı���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���۸�"]
    pub AskPrice: TThostFtdcPriceType,
    #[doc = "��۸�"]
    pub BidPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub AskVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub BidVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "����ƽ��־"]
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��ƽ��־"]
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��������������"]
    pub AskOrderRef: TThostFtdcOrderRefType,
    #[doc = "�����\u{b1a35}�����"]
    pub BidOrderRef: TThostFtdcOrderRefType,
    #[doc = "Ӧ�۱��"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������"]
    pub ReplaceSysID: TThostFtdcOrderSysIDType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcInputQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���뱨�۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputQuoteActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���۲�������"]
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���۲������"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcInputQuoteActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���۸�"]
    pub AskPrice: TThostFtdcPriceType,
    #[doc = "��۸�"]
    pub BidPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub AskVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub BidVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "����ƽ��־"]
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��ƽ��־"]
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���ر��۱��"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���۱��"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����״\u{32c}"]
    pub QuoteStatus: TThostFtdcOrderStatusType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "�����������"]
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "�\u{b7f71}������"]
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾���۱��"]
    pub BrokerQuoteSeq: TThostFtdcSequenceNoType,
    #[doc = "��������������"]
    pub AskOrderRef: TThostFtdcOrderRefType,
    #[doc = "�����\u{b1a35}�����"]
    pub BidOrderRef: TThostFtdcOrderRefType,
    #[doc = "Ӧ�۱��"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������"]
    pub ReplaceSysID: TThostFtdcOrderSysIDType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQuoteActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���۲�������"]
    pub QuoteActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub QuoteRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���۲������"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر��۱��"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcQuoteActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���۲�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryQuoteField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���۱��"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeQuoteField {
    #[doc = "���۸�"]
    pub AskPrice: TThostFtdcPriceType,
    #[doc = "��۸�"]
    pub BidPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub AskVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub BidVolume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "����ƽ��־"]
    pub AskOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��ƽ��־"]
    pub BidOffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub AskHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ͷ���ױ���־"]
    pub BidHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���ر��۱��"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���۱��"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����״\u{32c}"]
    pub QuoteStatus: TThostFtdcOrderStatusType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "�����������"]
    pub AskOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "�\u{b7f71}������"]
    pub BidOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "Ӧ�۱��"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
}
impl Default for CThostFtdcExchangeQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���������۲�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcQryExchangeQuoteField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���۲�����ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryQuoteActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "���������۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeQuoteActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���۲������"]
    pub QuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر��۱��"]
    pub QuoteLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExchangeQuoteActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���������۲�����ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeQuoteActionField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "��Ȩ��Լdelta\u{5b5}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionInstrDeltaField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Delta\u{5b5}"]
    pub Delta: TThostFtdcRatioType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcOptionInstrDeltaField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���������\u{335}�ѯ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteRspField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "ѯ�۱��"]
    pub ForQuoteSysID: TThostFtdcOrderSysIDType,
    #[doc = "ѯ��ʱ��"]
    pub ForQuoteTime: TThostFtdcTimeType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcForQuoteRspField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ǰ��Ȩ��Լ\u{5b4}��ƫ��\u{5b5}����ϸ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcStrikeOffsetField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5b4}��ƫ��\u{5b5}"]
    pub Offset: TThostFtdcMoneyType,
    #[doc = "\u{5b4}��ƫ������"]
    pub OffsetType: TThostFtdcStrikeOffsetTypeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcStrikeOffsetField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ȩ\u{5b4}��ƫ��\u{5b5}��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryStrikeOffsetField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryStrikeOffsetField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputBatchOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcInputBatchOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBatchOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcBatchOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeBatchOrderActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExchangeBatchOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBatchOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "��Ϻ�Լ��ȫϵ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombInstrumentGuardField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    pub GuarantRatio: TThostFtdcRatioType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcCombInstrumentGuardField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ϻ�Լ��ȫϵ����ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombInstrumentGuardField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryCombInstrumentGuardField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputCombActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "�������"]
    pub CombActionRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5b8}�\u{edfd}��"]
    pub CombDirection: TThostFtdcCombDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcInputCombActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "�������"]
    pub CombActionRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5b8}�\u{edfd}��"]
    pub CombDirection: TThostFtdcCombDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������ϱ��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���״\u{32c}"]
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��ϱ��"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcCombActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������ϲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryCombActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���������������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeCombActionField {
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5b8}�\u{edfd}��"]
    pub CombDirection: TThostFtdcCombDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������ϱ��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���״\u{32c}"]
    pub ActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��ϱ��"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExchangeCombActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������������ϲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryExchangeCombActionField {
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcQryExchangeCombActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ʒ���ۻ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcProductExchRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���۱�������"]
    pub QuoteCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "����"]
    pub ExchangeRate: TThostFtdcExchangeRateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcProductExchRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ʒ���ۻ��ʲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryProductExchRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryProductExchRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯѯ�ۼ۲����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryForQuoteParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryForQuoteParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "ѯ�ۼ۲����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcForQuoteParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "�۲�"]
    pub PriceInterval: TThostFtdcPriceType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcForQuoteParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ǰ��������Ȩ��Լ�����ѵ���ϸ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMMOptionInstrCommRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}����������"]
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    #[doc = "\u{5b4}��������"]
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcMMOptionInstrCommRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������Ȩ�������ʲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMMOptionInstrCommRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryMMOptionInstrCommRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����\u{33a}�Լ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMMInstrumentCommissionRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcMMInstrumentCommissionRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�����\u{33a}�Լ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMMInstrumentCommissionRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryMMInstrumentCommissionRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ǰ���������ѵ���ϸ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentOrderCommRateField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub OrderCommByVolume: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OrderActionCommByVolume: TThostFtdcRatioType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub OrderCommByTrade: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OrderActionCommByTrade: TThostFtdcRatioType,
}
impl Default for CThostFtdcInstrumentOrderCommRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����������ʲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentOrderCommRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInstrumentOrderCommRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ײ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradeParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������"]
    pub TradeParamID: TThostFtdcTradeParamIDType,
    #[doc = "��������\u{5b5}"]
    pub TradeParamValue: TThostFtdcSettlementParamValueType,
    #[doc = "��ע"]
    pub Memo: TThostFtdcMemoType,
}
impl Default for CThostFtdcTradeParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Լ��\u{5a4}���ʵ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentMarginRateULField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInstrumentMarginRateULField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ڻ��\u{5b2}����Ʋ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFutureLimitPosiParamField {
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����Ͷ��������������"]
    pub SpecOpenVolume: TThostFtdcVolumeType,
    #[doc = "��������������������"]
    pub ArbiOpenVolume: TThostFtdcVolumeType,
    #[doc = "����Ͷ��+����������������"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcFutureLimitPosiParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��\u{5b9}��¼IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginForbiddenIPField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcLoginForbiddenIPField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "IP�б�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcIPListField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�Ƿ������"]
    pub IsWhite: TThostFtdcBoolType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcIPListField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�������Ȩ�ԶԳ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ȩ�ԶԳ�����"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Ȩ��ͷ���Ƿ��ԶԳ�"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcInputOptionSelfCloseField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������Ȩ�ԶԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInputOptionSelfCloseActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Ȩ�ԶԳ��������"]
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��Ȩ�ԶԳ�����"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ȩ�ԶԳ�������"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcInputOptionSelfCloseActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ȩ�ԶԳ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ȩ�ԶԳ�����"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Ȩ��ͷ���Ƿ��ԶԳ�"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "������Ȩ�ԶԳ���"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��Ȩ�ԶԳ��ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "��Ȩ�ԶԳ���"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "�ԶԳ���"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerOptionSelfCloseSeq: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcOptionSelfCloseField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ȩ�ԶԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOptionSelfCloseActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Ȩ�ԶԳ��������"]
    pub OptionSelfCloseActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��Ȩ�ԶԳ�����"]
    pub OptionSelfCloseRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ȩ�ԶԳ�������"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "������Ȩ�ԶԳ���"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcOptionSelfCloseActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ȩ�ԶԳ��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ȩ�ԶԳ���"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "��ʼʱ��"]
    pub InsertTimeStart: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub InsertTimeEnd: TThostFtdcTimeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryOptionSelfCloseField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������Ȩ�ԶԳ���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseField {
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��Ȩ��Ȩ��ͷ���Ƿ��ԶԳ�"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "������Ȩ�ԶԳ���"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��Ȩ�ԶԳ��ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "��Ȩ�ԶԳ���"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "�ԶԳ���"]
    pub ExecResult: TThostFtdcExecResultType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcExchangeOptionSelfCloseField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ȩ�ԶԳ������ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryOptionSelfCloseActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "��������Ȩ�ԶԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcExchangeOptionSelfCloseActionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ȩ�ԶԳ�������"]
    pub OptionSelfCloseSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "������Ȩ�ԶԳ���"]
    pub OptionSelfCloseLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "��Ȩ��Ȩ��ͷ���Ƿ��ԶԳ�"]
    pub OptSelfCloseFlag: TThostFtdcOptSelfCloseFlagType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcExchangeOptionSelfCloseActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ʱ����\u{36c}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncDelaySwapField {
    #[doc = "������ˮ��"]
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Դ���"]
    pub FromAmount: TThostFtdcMoneyType,
    #[doc = "Դ���㶳����(���ö���)"]
    pub FromFrozenSwap: TThostFtdcMoneyType,
    #[doc = "Դʣ�\u{efb}����(���ᶳ��)"]
    pub FromRemainSwap: TThostFtdcMoneyType,
    #[doc = "Ŀ�����"]
    pub ToCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Ŀ����"]
    pub ToAmount: TThostFtdcMoneyType,
    #[doc = "�Ƿ��\u{5b9}�����"]
    pub IsManualSwap: TThostFtdcBoolType,
    #[doc = "�Ƿ�������ҵ�ʣ�\u{efb}��������Ϊ0"]
    pub IsAllRemainSetZero: TThostFtdcBoolType,
}
#[doc = "��ѯ��ʱ����\u{36c}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySyncDelaySwapField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��ʱ������ˮ��"]
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
}
#[doc = "Ͷ�ʵ�Ԫ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestUnitField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "Ͷ���ߵ�Ԫ����"]
    pub InvestorUnitName: TThostFtdcPartyNameType,
    #[doc = "Ͷ���߷������"]
    pub InvestorGroupID: TThostFtdcInvestorIDType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcInvestUnitField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯͶ�ʵ�Ԫ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryInvestUnitField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "�����������ʽ�У��ģʽ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSecAgentCheckModeField {
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�����н�����ʽ��ʺ�"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    #[doc = "�Ƿ���ҪУ���Լ����ʽ��˻�"]
    pub CheckSelfAccount: TThostFtdcBoolType,
}
#[doc = "������������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSecAgentTradeInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�����н�����ʽ��ʺ�"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������������"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcSecAgentTradeInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�г�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{5b2}���"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "����"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "��\u{7fc}�"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "��ͼ�"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ����"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}���"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "������"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "����ʵ��"]
    pub PreDelta: TThostFtdcRatioType,
    #[doc = "����ʵ��"]
    pub CurrDelta: TThostFtdcRatioType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}ĺ���"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcMarketDataField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBaseField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{5b2}���"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "����ʵ��"]
    pub PreDelta: TThostFtdcRatioType,
}
#[doc = "���龲\u{32c}����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataStaticField {
    #[doc = "����"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "��\u{7fc}�"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "��ͼ�"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "����ʵ��"]
    pub CurrDelta: TThostFtdcRatioType,
}
#[doc = "�������³ɽ�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataLastMatchField {
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ����"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}���"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
}
#[doc = "�������ż�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBestPriceField {
    #[doc = "�����һ"]
    pub BidPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub BidVolume1: TThostFtdcVolumeType,
    #[doc = "������һ"]
    pub AskPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub AskVolume1: TThostFtdcVolumeType,
}
#[doc = "�����������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBid23Field {
    #[doc = "����۶�"]
    pub BidPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume2: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume3: TThostFtdcVolumeType,
}
#[doc = "������������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataAsk23Field {
    #[doc = "�����۶�"]
    pub AskPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume2: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume3: TThostFtdcVolumeType,
}
#[doc = "���������ġ�������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBid45Field {
    #[doc = "�������"]
    pub BidPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume4: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume5: TThostFtdcVolumeType,
}
#[doc = "���������ġ�������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataAsk45Field {
    #[doc = "��������"]
    pub AskPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume4: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume5: TThostFtdcVolumeType,
}
#[doc = "�������ʱ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarketDataUpdateTimeField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}ĺ���"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcMarketDataUpdateTimeField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�������´���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataBandingPriceField {
    #[doc = "�ϴ���"]
    pub BandingUpperPrice: TThostFtdcPriceType,
    #[doc = "�´���"]
    pub BandingLowerPrice: TThostFtdcPriceType,
}
#[doc = "���齻������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataExchangeField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "\u{5b8}���ĺ�Լ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSpecificInstrumentField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcSpecificInstrumentField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Լ״\u{32c}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInstrumentStatusField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "���������"]
    pub SettlementGroupID: TThostFtdcSettlementGroupIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����״\u{32c}"]
    pub InstrumentStatus: TThostFtdcInstrumentStatusType,
    #[doc = "���\u{5fd}\u{5f6}α��"]
    pub TradingSegmentSN: TThostFtdcTradingSegmentSNType,
    #[doc = "���뱾״\u{32c}ʱ��"]
    pub EnterTime: TThostFtdcTimeType,
    #[doc = "���뱾״\u{32c}ԭ��"]
    pub EnterReason: TThostFtdcInstStatusEnterReasonType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInstrumentStatusField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��Լ״\u{32c}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInstrumentStatusField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldExchangeInstIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
}
impl Default for CThostFtdcQryInstrumentStatusField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ�����˻�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcInvestorAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "����ӯ���㷨"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcPositionProfitAlgorithmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "ӯ���㷨"]
    pub Algorithm: TThostFtdcAlgorithmType,
    #[doc = "��ע"]
    pub Memo: TThostFtdcMemoType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcPositionProfitAlgorithmField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��Ա�ʽ��ۿ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcDiscountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�ʽ��ۿ۱���"]
    pub Discount: TThostFtdcRatioType,
}
#[doc = "��ѯת������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTransferBankField {
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[doc = "ת������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferBankField {
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "��������"]
    pub BankName: TThostFtdcBankNameType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
}
impl Default for CThostFtdcTransferBankField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯͶ���\u{7f3}\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionDetailField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInvestorPositionDetailField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���\u{7f3}\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPositionDetailField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5bc}�"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�ɽ�����"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ն��г\u{5b2}�ӯ��"]
    pub PositionProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�\u{5b2}�ӯ��"]
    pub PositionProfitByTrade: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "������"]
    pub LastSettlementPrice: TThostFtdcPriceType,
    #[doc = "�����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�ȿ���ƽʣ������"]
    pub TimeFirstVolume: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "����\u{5b2}\u{5b1}�־"]
    pub SpecPosiType: TThostFtdcSpecPosiTypeType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInvestorPositionDetailField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ʽ��˻�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcTradingAccountPasswordField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���������鱨�\u{33b}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMDTraderOfferField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������Ա����״\u{32c}"]
    pub TraderConnectStatus: TThostFtdcTraderConnectStatusType,
    #[doc = "�����������������"]
    pub ConnectRequestDate: TThostFtdcDateType,
    #[doc = "�������������ʱ��"]
    pub ConnectRequestTime: TThostFtdcTimeType,
    #[doc = "�ϴα�������"]
    pub LastReportDate: TThostFtdcDateType,
    #[doc = "�ϴα���ʱ��"]
    pub LastReportTime: TThostFtdcTimeType,
    #[doc = "�����������"]
    pub ConnectDate: TThostFtdcDateType,
    #[doc = "�������ʱ��"]
    pub ConnectTime: TThostFtdcTimeType,
    #[doc = "��������"]
    pub StartDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub StartTime: TThostFtdcTimeType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��ϯλ���ɽ����"]
    pub MaxTradeID: TThostFtdcTradeIDType,
    #[doc = "��ϯλ��\u{f1a35}�����"]
    pub MaxOrderMessageReference: TThostFtdcReturnCodeType,
    #[doc = "����ʱѡ��ϯλ�㷨"]
    pub OrderCancelAlg: TThostFtdcOrderCancelAlgType,
}
impl Default for CThostFtdcMDTraderOfferField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ���鱨�\u{33b}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryMDTraderOfferField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "��ѯ�ͻ�\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryNoticeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "�ͻ�\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNoticeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Ϣ����"]
    pub Content: TThostFtdcContentType,
    #[doc = "���\u{379}�˾\u{368}\u{5aa}�������к�"]
    pub SequenceLabel: TThostFtdcSequenceLabelType,
}
impl Default for CThostFtdcNoticeField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û�Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcUserRightField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�ͻ�Ȩ������"]
    pub UserRightType: TThostFtdcUserRightTypeType,
    #[doc = "�Ƿ��\u{5b9}"]
    pub IsForbidden: TThostFtdcBoolType,
}
#[doc = "��ѯ������Ϣȷ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySettlementInfoConfirmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "װ�ؽ�����Ϣ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcLoadSettlementInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "���\u{379}�˾�����ʽ��㷨��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerWithdrawAlgorithmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�����ʽ��㷨"]
    pub WithdrawAlgorithm: TThostFtdcAlgorithmType,
    #[doc = "�ʽ�ʹ����"]
    pub UsingRatio: TThostFtdcRatioType,
    #[doc = "�����Ƿ����ƽ��ӯ��"]
    pub IncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    #[doc = "�����\u{7b2}����\u{7b3}ɽ��ͻ��Ƿ��\u{73f}����������"]
    pub AllWithoutTrade: TThostFtdcAllWithoutTradeType,
    #[doc = "�����Ƿ����ƽ��ӯ��"]
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    #[doc = "�Ƿ������û��¼�"]
    pub IsBrokerUserEvent: TThostFtdcBoolType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������Ѻ����"]
    pub FundMortgageRatio: TThostFtdcRatioType,
    #[doc = "Ȩ���㷨"]
    pub BalanceAlgorithm: TThostFtdcBalanceAlgorithmType,
}
#[doc = "�ʽ��˻���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateV1Field {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "ԭ���Ŀ���"]
    pub OldPassword: TThostFtdcPasswordType,
    #[doc = "�µĿ���"]
    pub NewPassword: TThostFtdcPasswordType,
}
impl Default for CThostFtdcTradingAccountPasswordUpdateV1Field {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ʽ��˻���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingAccountPasswordUpdateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "ԭ���Ŀ���"]
    pub OldPassword: TThostFtdcPasswordType,
    #[doc = "�µĿ���"]
    pub NewPassword: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcTradingAccountPasswordUpdateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��Ϻ�Լ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombinationLegField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���Ⱥ�Լ����"]
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryCombinationLegField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��Ϻ�Լ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySyncStatusField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
}
#[doc = "��Ͻ��\u{5fa}�Լ�ĵ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombinationLegField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "���ȳ���"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "��������"]
    pub ImplyLevel: TThostFtdcImplyLevelType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���Ⱥ�Լ����"]
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcCombinationLegField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����\u{36c}��״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncStatusField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����\u{36c}��״\u{32c}"]
    pub DataSyncStatus: TThostFtdcDataSyncStatusType,
}
#[doc = "��ѯ��ϵ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryLinkManField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "��ϵ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLinkManField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ϵ������"]
    pub PersonType: TThostFtdcPersonTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "����"]
    pub PersonName: TThostFtdcPartyNameType,
    #[doc = "��ϵ�绰"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "\u{368}Ѷ��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "��������"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "���ȼ�"]
    pub Priority: TThostFtdcPriorityType,
    #[doc = "������������"]
    pub UOAZipCode: TThostFtdcUOAZipCodeType,
    #[doc = "ȫ��"]
    pub PersonFullName: TThostFtdcInvestorFullNameType,
}
impl Default for CThostFtdcLinkManField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ���\u{379}�˾�û��¼�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerUserEventField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��¼�����"]
    pub UserEventType: TThostFtdcUserEventTypeType,
}
#[doc = "��ѯ���\u{379}�˾�û��¼�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserEventField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û��¼�����"]
    pub UserEventType: TThostFtdcUserEventTypeType,
    #[doc = "�û��¼����"]
    pub EventSequenceNo: TThostFtdcSequenceNoType,
    #[doc = "�¼���������"]
    pub EventDate: TThostFtdcDateType,
    #[doc = "�¼�����ʱ��"]
    pub EventTime: TThostFtdcTimeType,
    #[doc = "�û��¼���Ϣ"]
    pub UserEventInfo: TThostFtdcUserEventInfoType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
}
impl Default for CThostFtdcBrokerUserEventField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯǩԼ��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryContractBankField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
}
#[doc = "��ѯǩԼ������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcContractBankField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з����Ĵ���"]
    pub BankBrchID: TThostFtdcBankBrchIDType,
    #[doc = "��������"]
    pub BankName: TThostFtdcBankNameType,
}
impl Default for CThostFtdcContractBankField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ������ϳ\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPositionCombineDetailField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ϱ��"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "��ϱ��"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "�\u{5b2}���"]
    pub TotalAmt: TThostFtdcVolumeType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "���ȳ���"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "�ɽ����"]
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��ϳ\u{5b2}\u{5ba}�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInvestorPositionCombineDetailField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ԥ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcParkedOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "�û�ǿƽ��־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ԥ�\u{71a35}����"]
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    #[doc = "�û�����"]
    pub UserType: TThostFtdcUserTypeType,
    #[doc = "Ԥ��״\u{32c}"]
    pub Status: TThostFtdcParkedOrderStatusType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcParkedOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����Ԥ�\u{75972}���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcParkedOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ԥ�\u{73df5}������"]
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    #[doc = "�û�����"]
    pub UserType: TThostFtdcUserTypeType,
    #[doc = "Ԥ�\u{73df5}�״\u{32c}"]
    pub Status: TThostFtdcParkedOrderStatusType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcParkedOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯԤ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryParkedOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryParkedOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯԤ�\u{73df5}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryParkedOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryParkedOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "ɾ��Ԥ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ԥ�\u{71a35}����"]
    pub ParkedOrderID: TThostFtdcParkedOrderIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "ɾ��Ԥ�\u{73df5}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcRemoveParkedOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ԥ�\u{73df5}����"]
    pub ParkedOrderActionID: TThostFtdcParkedOrderActionIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "���\u{379}�˾�����ʽ��㷨��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcInvestorWithdrawAlgorithmField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�����ʽ����"]
    pub UsingRatio: TThostFtdcRatioType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������Ѻ����"]
    pub FundMortgageRatio: TThostFtdcRatioType,
}
#[doc = "��ѯ��ϳ\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPositionCombineDetailField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��ϳ\u{5b2}\u{5ba}�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInvestorPositionCombineDetailField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ɽ�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMarketDataAveragePriceField {
    #[doc = "���վ���"]
    pub AveragePrice: TThostFtdcPriceType,
}
#[doc = "У��Ͷ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyInvestorPasswordField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
}
impl Default for CThostFtdcVerifyInvestorPasswordField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û�IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserIPField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "IP��\u{5b7}����"]
    pub IPMask: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcUserIPField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û��¼�\u{368}\u{5aa}��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingNoticeInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����ʱ��"]
    pub SendTime: TThostFtdcTimeType,
    #[doc = "��Ϣ����"]
    pub FieldContent: TThostFtdcContentType,
    #[doc = "����ϵ�к�"]
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
impl Default for CThostFtdcTradingNoticeInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û��¼�\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTradingNoticeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����ϵ�к�"]
    pub SequenceSeries: TThostFtdcSequenceSeriesType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����ʱ��"]
    pub SendTime: TThostFtdcTimeType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��Ϣ����"]
    pub FieldContent: TThostFtdcContentType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
impl Default for CThostFtdcTradingNoticeField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�����¼�\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTradingNoticeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "��ѯ���\u{f1a35}�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryErrOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "���\u{f1a35}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "�û�ǿƽ��־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ױ���"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcErrOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ���\u{f1a35}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrorConditionalOrderField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�����۸�����"]
    pub OrderPriceType: TThostFtdcOrderPriceTypeType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ͽ�ƽ��־"]
    pub CombOffsetFlag: TThostFtdcCombOffsetFlagType,
    #[doc = "���Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub VolumeTotalOriginal: TThostFtdcVolumeType,
    #[doc = "��Ч������"]
    pub TimeCondition: TThostFtdcTimeConditionType,
    #[doc = "GTD����"]
    pub GTDDate: TThostFtdcDateType,
    #[doc = "�ɽ�������"]
    pub VolumeCondition: TThostFtdcVolumeConditionType,
    #[doc = "��С�ɽ���"]
    pub MinVolume: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ContingentCondition: TThostFtdcContingentConditionType,
    #[doc = "\u{5b9}���"]
    pub StopPrice: TThostFtdcPriceType,
    #[doc = "ǿƽԭ��"]
    pub ForceCloseReason: TThostFtdcForceCloseReasonType,
    #[doc = "�Զ������־"]
    pub IsAutoSuspend: TThostFtdcBoolType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldExchangeInstIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�����ύ״\u{32c}"]
    pub OrderSubmitStatus: TThostFtdcOrderSubmitStatusType,
    #[doc = "������ʾ���"]
    pub NotifySequence: TThostFtdcSequenceNoType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������Դ"]
    pub OrderSource: TThostFtdcOrderSourceType,
    #[doc = "����״\u{32c}"]
    pub OrderStatus: TThostFtdcOrderStatusType,
    #[doc = "��������"]
    pub OrderType: TThostFtdcOrderTypeType,
    #[doc = "��ɽ�����"]
    pub VolumeTraded: TThostFtdcVolumeType,
    #[doc = "ʣ������"]
    pub VolumeTotal: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub InsertDate: TThostFtdcDateType,
    #[doc = "ί��ʱ��"]
    pub InsertTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub ActiveTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub SuspendTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����ʱ��"]
    pub CancelTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}Ľ���������Ա����"]
    pub ActiveTraderID: TThostFtdcTraderIDType,
    #[doc = "�����Ա���"]
    pub ClearingPartID: TThostFtdcParticipantIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "�û�ǿƽ��־"]
    pub UserForceClose: TThostFtdcBoolType,
    #[doc = "�����û�����"]
    pub ActiveUserID: TThostFtdcUserIDType,
    #[doc = "���\u{379}�˾�������"]
    pub BrokerOrderSeq: TThostFtdcSequenceNoType,
    #[doc = "��ر���"]
    pub RelativeOrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "\u{5a3}�����ɽ�����"]
    pub ZCETotalTradedVolume: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��������־"]
    pub IsSwapOrder: TThostFtdcBoolType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�ʽ��˺�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve3: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcErrorConditionalOrderField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ���\u{f1a35}�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryErrOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "���\u{f1a35}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcErrOrderActionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OrderActionRef: TThostFtdcOrderActionRefType,
    #[doc = "��������"]
    pub OrderRef: TThostFtdcOrderRefType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "ǰ�ñ��"]
    pub FrontID: TThostFtdcFrontIDType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�������"]
    pub OrderSysID: TThostFtdcOrderSysIDType,
    #[doc = "������־"]
    pub ActionFlag: TThostFtdcActionFlagType,
    #[doc = "�۸�"]
    pub LimitPrice: TThostFtdcPriceType,
    #[doc = "�����仯"]
    pub VolumeChange: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub ActionDate: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub ActionTime: TThostFtdcTimeType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "���ر������"]
    pub OrderLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "�������ر��"]
    pub ActionLocalID: TThostFtdcOrderLocalIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�ͻ�����"]
    pub ClientID: TThostFtdcClientIDType,
    #[doc = "ҵ��Ԫ"]
    pub BusinessUnit: TThostFtdcBusinessUnitType,
    #[doc = "��������״\u{32c}"]
    pub OrderActionStatus: TThostFtdcOrderActionStatusType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "״\u{32c}��Ϣ"]
    pub StatusMsg: TThostFtdcErrorMsgType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ӫҵ�����"]
    pub BranchID: TThostFtdcBranchIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldIPAddressType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
    #[doc = "���������\u{5b6}�"]
    pub OrderMemo: TThostFtdcOrderMemoType,
    #[doc = "session��������� api�Զ�ά��"]
    pub SessionReqSeq: TThostFtdcSequenceNo12Type,
}
impl Default for CThostFtdcErrOrderActionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ������״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryExchangeSequenceField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "������״\u{32c}"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcExchangeSequenceField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��Լ����״\u{32c}"]
    pub MarketStatus: TThostFtdcInstrumentStatusType,
}
#[doc = "���ݼ۸��ѯ��\u{f1a35}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMaxOrderVolumeWithPriceField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��ƽ��־"]
    pub OffsetFlag: TThostFtdcOffsetFlagType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "���������������"]
    pub MaxVolume: TThostFtdcVolumeType,
    #[doc = "�����۸�"]
    pub Price: TThostFtdcPriceType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryMaxOrderVolumeWithPriceField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ���\u{379}�˾���ײ���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingParamsField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
}
#[doc = "���\u{379}�˾���ײ���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerTradingParamsField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��\u{5a4}��۸�����"]
    pub MarginPriceType: TThostFtdcMarginPriceTypeType,
    #[doc = "ӯ���㷨"]
    pub Algorithm: TThostFtdcAlgorithmType,
    #[doc = "�����Ƿ����ƽ��ӯ��"]
    pub AvailIncludeCloseProfit: TThostFtdcIncludeCloseProfitType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "��ȨȨ����۸�����"]
    pub OptionRoyaltyPriceType: TThostFtdcOptionRoyaltyPriceTypeType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
}
#[doc = "��ѯ���\u{379}�˾�����㷨"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryBrokerTradingAlgosField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryBrokerTradingAlgosField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���\u{379}�˾�����㷨"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerTradingAlgosField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "�\u{5b2}\u{5b4}����㷨���"]
    pub HandlePositionAlgoID: TThostFtdcHandlePositionAlgoIDType,
    #[doc = "Ѱ�ұ�\u{5a4}�����㷨���"]
    pub FindMarginRateAlgoID: TThostFtdcFindMarginRateAlgoIDType,
    #[doc = "�ʽ����㷨���"]
    pub HandleTradingAccountAlgoID: TThostFtdcHandleTradingAccountAlgoIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcBrokerTradingAlgosField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ���\u{379}�˾�ʽ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQueryBrokerDepositField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
}
#[doc = "���\u{379}�˾�ʽ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerDepositField {
    #[doc = "��������"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "�ϴν���\u{5fc}����"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "��ǰ��\u{5a4}���\u{736}�"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�ڻ�����\u{5fc}����"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "�����ʽ�"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
}
#[doc = "��ѯ��\u{5a4}����ϵͳ���\u{379}�˾��Կ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryCFMMCBrokerKeyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "��\u{5a4}����ϵͳ���\u{379}�˾��Կ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCFMMCBrokerKeyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{379}�˾ͳһ����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "��Կ��������"]
    pub CreateDate: TThostFtdcDateType,
    #[doc = "��Կ����ʱ��"]
    pub CreateTime: TThostFtdcTimeType,
    #[doc = "��Կ���"]
    pub KeyID: TThostFtdcSequenceNoType,
    #[doc = "��\u{32c}��Կ"]
    pub CurrentKey: TThostFtdcCFMMCKeyType,
    #[doc = "��\u{32c}��Կ����"]
    pub KeyKind: TThostFtdcCFMMCKeyKindType,
}
#[doc = "��\u{5a4}����ϵͳ���\u{379}�˾�ʽ��˻���Կ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountKeyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{379}�˾ͳһ����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "��Կ���"]
    pub KeyID: TThostFtdcSequenceNoType,
    #[doc = "��\u{32c}��Կ"]
    pub CurrentKey: TThostFtdcCFMMCKeyType,
}
#[doc = "�����ѯ��\u{5a4}����ϵͳ���\u{379}�˾�ʽ��˻���Կ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryCFMMCTradingAccountKeyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "�û���\u{32c}���Ʋ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBrokerUserOTPParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{32c}�����ṩ��"]
    pub OTPVendorsID: TThostFtdcOTPVendorsIDType,
    #[doc = "��\u{32c}�������к�"]
    pub SerialNumber: TThostFtdcSerialNumberType,
    #[doc = "������Կ"]
    pub AuthKey: TThostFtdcAuthKeyType,
    #[doc = "Ư��\u{5b5}"]
    pub LastDrift: TThostFtdcLastDriftType,
    #[doc = "�ɹ�\u{5b5}"]
    pub LastSuccess: TThostFtdcLastSuccessType,
    #[doc = "��\u{32c}��������"]
    pub OTPType: TThostFtdcOTPTypeType,
}
impl Default for CThostFtdcBrokerUserOTPParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�\u{5b9}�\u{36c}���û���\u{32c}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcManualSyncBrokerUserOTPField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{32c}��������"]
    pub OTPType: TThostFtdcOTPTypeType,
    #[doc = "��һ����\u{32c}����"]
    pub FirstOTP: TThostFtdcPasswordType,
    #[doc = "�ڶ�����\u{32c}����"]
    pub SecondOTP: TThostFtdcPasswordType,
}
impl Default for CThostFtdcManualSyncBrokerUserOTPField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ������������ģ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCommRateModelField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
    #[doc = "ģ������"]
    pub CommModelName: TThostFtdcCommModelNameType,
}
impl Default for CThostFtdcCommRateModelField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����ѯͶ������������ģ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryCommRateModelField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��������ģ�����"]
    pub CommModelID: TThostFtdcInvestorIDType,
}
#[doc = "Ͷ���\u{7f1}�\u{5a4}����ģ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMarginModelField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
    #[doc = "ģ������"]
    pub MarginModelName: TThostFtdcCommModelNameType,
}
impl Default for CThostFtdcMarginModelField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����ѯͶ���\u{7f1}�\u{5a4}����ģ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryMarginModelField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��\u{5a4}����ģ�����"]
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[doc = "�\u{5b5}��۵���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcEWarrantOffsetField {
    #[doc = "��������"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcEWarrantOffsetField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�\u{5b5}��۵���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryEWarrantOffsetField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryEWarrantOffsetField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯͶ����Ʒ��/��Ʒ�\u{5b1}�\u{5a4}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorProductGroupMarginField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "Ʒ��/��Ʒ�\u{5b1}�ʾ"]
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInvestorProductGroupMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ����Ʒ��/��Ʒ�\u{5b1}�\u{5a4}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorProductGroupMarginField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "��ͷ����ı�\u{5a4}��"]
    pub LongFrozenMargin: TThostFtdcMoneyType,
    #[doc = "��ͷ����ı�\u{5a4}��"]
    pub ShortFrozenMargin: TThostFtdcMoneyType,
    #[doc = "ռ�õı�\u{5a4}��"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}��"]
    pub LongUseMargin: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}��"]
    pub ShortUseMargin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��������ͷ��\u{5a4}��"]
    pub LongExchMargin: TThostFtdcMoneyType,
    #[doc = "��������ͷ��\u{5a4}��"]
    pub ShortExchMargin: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�۵��\u{73d}��"]
    pub OffsetAmount: TThostFtdcMoneyType,
    #[doc = "��ͷ�۵��\u{73d}��"]
    pub LongOffsetAmount: TThostFtdcMoneyType,
    #[doc = "��ͷ�۵��\u{73d}��"]
    pub ShortOffsetAmount: TThostFtdcMoneyType,
    #[doc = "�������۵��\u{73d}��"]
    pub ExchOffsetAmount: TThostFtdcMoneyType,
    #[doc = "��������ͷ�۵��\u{73d}��"]
    pub LongExchOffsetAmount: TThostFtdcMoneyType,
    #[doc = "��������ͷ�۵��\u{73d}��"]
    pub ShortExchOffsetAmount: TThostFtdcMoneyType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "Ʒ��/��Ʒ�\u{5b1}�ʾ"]
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcInvestorProductGroupMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��������û�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQueryCFMMCTradingAccountTokenField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
}
#[doc = "��������û�����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCFMMCTradingAccountTokenField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{379}�˾ͳһ����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "��Կ���"]
    pub KeyID: TThostFtdcSequenceNoType,
    #[doc = "��\u{32c}����"]
    pub Token: TThostFtdcCFMMCTokenType,
}
#[doc = "��ѯ��Ʒ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryProductGroupField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryProductGroupField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ����Ʒ��/��Ʒ�\u{5b1}�\u{5a4}���Ʒ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcProductGroupField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve2: TThostFtdcOldInstrumentIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��Ʒ�����"]
    pub ProductGroupID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcProductGroupField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcBulletinField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub BulletinID: TThostFtdcBulletinIDType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��������"]
    pub NewsType: TThostFtdcNewsTypeType,
    #[doc = "�����\u{336}�"]
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
    #[doc = "����ʱ��"]
    pub SendTime: TThostFtdcTimeType,
    #[doc = "��ϢժҪ"]
    pub Abstract: TThostFtdcAbstractType,
    #[doc = "��Ϣ��Դ"]
    pub ComeFrom: TThostFtdcComeFromType,
    #[doc = "��Ϣ����"]
    pub Content: TThostFtdcContentType,
    #[doc = "WEB��\u{5b7}"]
    pub URLLink: TThostFtdcURLLinkType,
    #[doc = "�г�����"]
    pub MarketID: TThostFtdcMarketIDType,
}
impl Default for CThostFtdcBulletinField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ����������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryBulletinField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "������"]
    pub BulletinID: TThostFtdcBulletinIDType,
    #[doc = "���к�"]
    pub SequenceNo: TThostFtdcSequenceNoType,
    #[doc = "��������"]
    pub NewsType: TThostFtdcNewsTypeType,
    #[doc = "�����\u{336}�"]
    pub NewsUrgency: TThostFtdcNewsUrgencyType,
}
#[doc = "MulticastInstrument"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcMulticastInstrumentField {
    #[doc = "�����"]
    pub TopicID: TThostFtdcInstallIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ���"]
    pub InstrumentNo: TThostFtdcInstallIDType,
    #[doc = "��\u{5fc}��"]
    pub CodePrice: TThostFtdcPriceType,
    #[doc = "��Լ��������"]
    pub VolumeMultiple: TThostFtdcVolumeMultipleType,
    #[doc = "��С�䶯��λ"]
    pub PriceTick: TThostFtdcPriceType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcMulticastInstrumentField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "QryMulticastInstrument"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryMulticastInstrumentField {
    #[doc = "�����"]
    pub TopicID: TThostFtdcInstallIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryMulticastInstrumentField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "App�ͻ���Ȩ�\u{7b7}���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAppIDAuthAssignField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
impl Default for CThostFtdcAppIDAuthAssignField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "ת�ʿ�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqOpenAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�㳮��־"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqOpenAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "ת����������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqCancelAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�㳮��־"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqCancelAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������˻�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqChangeAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "�������ʺ�"]
    pub NewBankAccount: TThostFtdcBankAccountType,
    #[doc = "����������"]
    pub NewBankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqChangeAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "ת������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqTransferField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "�ڻ���ȡ���"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "����\u{5a7}����־"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "���ͷ������շ�����Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ת�˽���״\u{32c}"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqTransferField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���з��������ʽ�ת�ڻ���Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspTransferField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "�ڻ���ȡ���"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "����\u{5a7}����־"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "���ͷ������շ�����Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ת�˽���״\u{32c}"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcRspTransferField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqRepealField {
    #[doc = "����ʱ����"]
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    #[doc = "�Ѿ���������"]
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    #[doc = "���г�����־"]
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    #[doc = "���\u{333}�����־"]
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    #[doc = "������ƽ\u{328}��ˮ��"]
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    #[doc = "������������ˮ��"]
    pub BankRepealSerial: TThostFtdcBankSerialType,
    #[doc = "�������ڻ���ˮ��"]
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "�ڻ���ȡ���"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "����\u{5a7}����־"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "���ͷ������շ�����Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ת�˽���״\u{32c}"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqRepealField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspRepealField {
    #[doc = "����ʱ����"]
    pub RepealTimeInterval: TThostFtdcRepealTimeIntervalType,
    #[doc = "�Ѿ���������"]
    pub RepealedTimes: TThostFtdcRepealedTimesType,
    #[doc = "���г�����־"]
    pub BankRepealFlag: TThostFtdcBankRepealFlagType,
    #[doc = "���\u{333}�����־"]
    pub BrokerRepealFlag: TThostFtdcBrokerRepealFlagType,
    #[doc = "������ƽ\u{328}��ˮ��"]
    pub PlateRepealSerial: TThostFtdcPlateSerialType,
    #[doc = "������������ˮ��"]
    pub BankRepealSerial: TThostFtdcBankSerialType,
    #[doc = "�������ڻ���ˮ��"]
    pub FutureRepealSerial: TThostFtdcFutureSerialType,
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "�ڻ���ȡ���"]
    pub FutureFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "����\u{5a7}����־"]
    pub FeePayFlag: TThostFtdcFeePayFlagType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "���ͷ������շ�����Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ת�˽���״\u{32c}"]
    pub TransferStatus: TThostFtdcTransferStatusType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcRspRepealField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�˻���Ϣ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqQueryAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqQueryAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�˻���Ϣ��Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspQueryAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "���п��ý��"]
    pub BankUseAmount: TThostFtdcTradeAmountType,
    #[doc = "���п�ȡ���"]
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcRspQueryAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����ǩ��ǩ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFutureSignIOField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
}
impl Default for CThostFtdcFutureSignIOField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����ǩ����Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspFutureSignInField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "PIN��Կ"]
    pub PinKey: TThostFtdcPasswordKeyType,
    #[doc = "MAC��Կ"]
    pub MacKey: TThostFtdcPasswordKeyType,
}
impl Default for CThostFtdcRspFutureSignInField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����ǩ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqFutureSignOutField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
}
impl Default for CThostFtdcReqFutureSignOutField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����ǩ����Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspFutureSignOutField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcRspFutureSignOutField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ\u{5b8}����ˮ�ŵĽ��\u{5fd}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqQueryTradeResultBySerialField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��ˮ��"]
    pub Reference: TThostFtdcSerialType,
    #[doc = "����ˮ�ŷ����ߵĻ�������"]
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    #[doc = "����ˮ�ŷ����\u{7fb}�������"]
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcReqQueryTradeResultBySerialField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ\u{5b8}����ˮ�ŵĽ��\u{5fd}����Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspQueryTradeResultBySerialField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "��ˮ��"]
    pub Reference: TThostFtdcSerialType,
    #[doc = "����ˮ�ŷ����ߵĻ�������"]
    pub RefrenceIssureType: TThostFtdcInstitutionTypeType,
    #[doc = "����ˮ�ŷ����\u{7fb}�������"]
    pub RefrenceIssure: TThostFtdcOrganCodeType,
    #[doc = "ԭʼ���ش���"]
    pub OriginReturnCode: TThostFtdcReturnCodeType,
    #[doc = "ԭʼ����������"]
    pub OriginDescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ת�ʽ��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
}
impl Default for CThostFtdcRspQueryTradeResultBySerialField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����ļ���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqDayEndFileReadyField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ļ�ҵ����"]
    pub FileBusinessCode: TThostFtdcFileBusinessCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
}
impl Default for CThostFtdcReqDayEndFileReadyField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ؽ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReturnResultField {
    #[doc = "���ش���"]
    pub ReturnCode: TThostFtdcReturnCodeType,
    #[doc = "����������"]
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
impl Default for CThostFtdcReturnResultField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��\u{5a4}�ڻ��ʽ�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcVerifyFuturePasswordField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��\u{5a4}�ͻ���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyCustInfoField {
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcVerifyCustInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��\u{5a4}�ڻ��ʽ�����Ϳͻ���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcVerifyFuturePasswordAndCustInfoField {
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcVerifyFuturePasswordAndCustInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��\u{5a4}�ڻ��ʽ�����Ϳͻ���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcDepositResultInformField {
    #[doc = "�������ˮ�ţ�����ˮ��Ϊ���ڱ��\u{337}��ص���ˮ��"]
    pub DepositSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "���ش���"]
    pub ReturnCode: TThostFtdcReturnCodeType,
    #[doc = "����������"]
    pub DescrInfoForReturnCode: TThostFtdcDescrInfoForReturnCodeType,
}
impl Default for CThostFtdcDepositResultInformField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���\u{5fa}��������ڱ��\u{337}�����Կ\u{36c}������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqSyncKeyField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{5fa}��ĸ����ڱ��\u{335}���Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
}
impl Default for CThostFtdcReqSyncKeyField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���\u{5fa}��������ڱ��\u{337}�����Կ\u{36c}����Ӧ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspSyncKeyField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{5fa}��ĸ����ڱ��\u{335}���Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcRspSyncKeyField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�˻���Ϣ\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyQueryAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "���п��ý��"]
    pub BankUseAmount: TThostFtdcTradeAmountType,
    #[doc = "���п�ȡ���"]
    pub BankFetchAmount: TThostFtdcTradeAmountType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcNotifyQueryAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����ת�˽�����ˮ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcTransferSerialField {
    #[doc = "ƽ\u{328}��ˮ��"]
    pub PlateSerial: TThostFtdcPlateSerialType,
    #[doc = "���\u{5f7}�������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "��������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "���״���"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "�Ự���"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "���б���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "�ڻ���˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "�ڻ���˾�ʺ�����"]
    pub FutureAccType: TThostFtdcFutureAccTypeType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�ڻ���˾��ˮ��"]
    pub FutureSerial: TThostFtdcFutureSerialType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���\u{5fd}��"]
    pub TradeAmount: TThostFtdcTradeAmountType,
    #[doc = "Ӧ�տͻ�����"]
    pub CustFee: TThostFtdcCustFeeType,
    #[doc = "Ӧ���ڻ���˾����"]
    pub BrokerFee: TThostFtdcFutureFeeType,
    #[doc = "��Ч��־"]
    pub AvailabilityFlag: TThostFtdcAvailabilityFlagType,
    #[doc = "����Ա"]
    pub OperatorCode: TThostFtdcOperatorCodeType,
    #[doc = "�������ʺ�"]
    pub BankNewAccount: TThostFtdcBankAccountType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcTransferSerialField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����ѯת����ˮ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTransferSerialField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���б���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "����ǩ��\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignInField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "PIN��Կ"]
    pub PinKey: TThostFtdcPasswordKeyType,
    #[doc = "MAC��Կ"]
    pub MacKey: TThostFtdcPasswordKeyType,
}
impl Default for CThostFtdcNotifyFutureSignInField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����ǩ��\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifyFutureSignOutField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcNotifyFutureSignOutField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���\u{5fa}��������ڱ��\u{337}�����Կ\u{36c}�����������\u{368}\u{5aa}"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcNotifySyncKeyField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "���\u{5fa}��ĸ����ڱ��\u{335}���Ϣ"]
    pub Message: TThostFtdcAddInfoType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "������"]
    pub RequestID: TThostFtdcRequestIDType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcNotifySyncKeyField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����ѯ����ǩԼ��ϵ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryAccountregisterField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "���б���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "�ͻ���������Ϣ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAccountregisterField {
    #[doc = "��������"]
    pub TradeDay: TThostFtdcTradeDateType,
    #[doc = "���б���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "�ڻ���˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�ڻ���˾��\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "���������"]
    pub OpenOrDestroy: TThostFtdcOpenOrDestroyType,
    #[doc = "ǩԼ����"]
    pub RegDate: TThostFtdcTradeDateType,
    #[doc = "��Լ����"]
    pub OutDate: TThostFtdcTradeDateType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcAccountregisterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ڿ�����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcOpenAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�㳮��־"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcOpenAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����������Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCancelAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�㳮��־"]
    pub CashExchangeCode: TThostFtdcCashExchangeCodeType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "������־"]
    pub DeviceID: TThostFtdcDeviceIDType,
    #[doc = "�ڻ���λ�ʺ�����"]
    pub BankSecuAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "�ڻ���λ�ʺ�"]
    pub BankSecuAcc: TThostFtdcBankAccountType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "���\u{5f9}�Ա"]
    pub OperNo: TThostFtdcOperNoType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "�û���ʶ"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcCancelAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ڱ�������˺���Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcChangeAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "�������ʺ�"]
    pub NewBankAccount: TThostFtdcBankAccountType,
    #[doc = "����������"]
    pub NewBankPassWord: TThostFtdcPasswordType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "���������־"]
    pub BankPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "�ڻ��ʽ�����˶Ա�־"]
    pub SecuPwdFlag: TThostFtdcPwdFlagType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
    #[doc = "���ͻ�����"]
    pub LongCustomerName: TThostFtdcLongIndividualNameType,
}
impl Default for CThostFtdcChangeAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������������Ա����Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSecAgentACIDMapField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�ʽ��˻�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�����н�����ʽ��ʺ�"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[doc = "������������Ա����Ȩ�\u{7b2}�ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySecAgentACIDMapField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�ʽ��˻�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "�\u{5b1}����Ľ���Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcUserRightsAssignField {
    #[doc = "Ӧ�õ�Ԫ����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "���ù�˾�Ƿ����ڱ���ʾ�Ľ���Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcBrokerUserRightAssignField {
    #[doc = "Ӧ�õ�Ԫ����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "�\u{737}���"]
    pub Tradeable: TThostFtdcBoolType,
}
#[doc = "�\u{5b1}�����ת������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcDRTransferField {
    #[doc = "ԭ�������Ĵ���"]
    pub OrigDRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "Ŀ�꽻�����Ĵ���"]
    pub DestDRIdentityID: TThostFtdcDRIdentityIDType,
    #[doc = "ԭӦ�õ�Ԫ����"]
    pub OrigBrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ŀ�����õ�Ԫ����"]
    pub DestBrokerID: TThostFtdcBrokerIDType,
}
#[doc = "Fens�û���Ϣ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcFensUserInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��¼ģʽ"]
    pub LoginMode: TThostFtdcLoginModeType,
}
#[doc = "��ǰ����������������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCurrTransferIdentityField {
    #[doc = "�������Ĵ���"]
    pub IdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "��\u{5b9}��¼�û�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcLoginForbiddenUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcLoginForbiddenUserField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��\u{5b9}��¼�û�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "�ʽ��˻�����\u{5fc}����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTradingAccountReserveField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
#[doc = "��ѯ��\u{5b9}��¼IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryLoginForbiddenIPField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcQryLoginForbiddenIPField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯIP�б�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryIPListField {
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcQryIPListField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�û��µ�Ȩ�\u{7b7}����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryUserRightsAssignField {
    #[doc = "Ӧ�õ�Ԫ����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "����ԤԼ����ȷ������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountConfirmField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcLongIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ڻ�����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "ԤԼ����������ˮ��"]
    pub BankReserveOpenSeq: TThostFtdcBankSerialType,
    #[doc = "ԤԼ��������"]
    pub BookDate: TThostFtdcTradeDateType,
    #[doc = "ԤԼ������\u{5a4}����"]
    pub BookPsw: TThostFtdcPasswordType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcReserveOpenAccountConfirmField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����ԤԼ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReserveOpenAccountField {
    #[doc = "ҵ������"]
    pub TradeCode: TThostFtdcTradeCodeType,
    #[doc = "���д���"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "���з�\u{5a7}��������"]
    pub BankBranchID: TThostFtdcBankBrchIDType,
    #[doc = "���\u{334}���"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "���\u{337}�\u{5a7}��������"]
    pub BrokerBranchID: TThostFtdcFutureBranchIDType,
    #[doc = "��������"]
    pub TradeDate: TThostFtdcTradeDateType,
    #[doc = "����ʱ��"]
    pub TradeTime: TThostFtdcTradeTimeType,
    #[doc = "������ˮ��"]
    pub BankSerial: TThostFtdcBankSerialType,
    #[doc = "����ϵͳ����"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "����ƽ\u{328}��Ϣ��ˮ��"]
    pub PlateSerial: TThostFtdcSerialType,
    #[doc = "����Ƭ��־"]
    pub LastFragment: TThostFtdcLastFragmentType,
    #[doc = "�Ự��"]
    pub SessionID: TThostFtdcSessionIDType,
    #[doc = "�ͻ�����"]
    pub CustomerName: TThostFtdcLongIndividualNameType,
    #[doc = "\u{5a4}������"]
    pub IdCardType: TThostFtdcIdCardTypeType,
    #[doc = "\u{5a4}������"]
    pub IdentifiedCardNo: TThostFtdcIdentifiedCardNoType,
    #[doc = "�Ա�"]
    pub Gender: TThostFtdcGenderType,
    #[doc = "���Ҵ���"]
    pub CountryCode: TThostFtdcCountryCodeType,
    #[doc = "�ͻ�����"]
    pub CustType: TThostFtdcCustTypeType,
    #[doc = "��\u{5b7}"]
    pub Address: TThostFtdcAddressType,
    #[doc = "�ʱ�"]
    pub ZipCode: TThostFtdcZipCodeType,
    #[doc = "�绰����"]
    pub Telephone: TThostFtdcTelephoneType,
    #[doc = "�\u{5bb}�"]
    pub MobilePhone: TThostFtdcMobilePhoneType,
    #[doc = "����"]
    pub Fax: TThostFtdcFaxType,
    #[doc = "�����ʼ�"]
    pub EMail: TThostFtdcEMailType,
    #[doc = "�ʽ��˻�״\u{32c}"]
    pub MoneyAccountStatus: TThostFtdcMoneyAccountStatusType,
    #[doc = "�����ʺ�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "��������"]
    pub BankPassWord: TThostFtdcPasswordType,
    #[doc = "��װ���"]
    pub InstallID: TThostFtdcInstallIDType,
    #[doc = "��\u{5a4}�ͻ�\u{5a4}�������־"]
    pub VerifyCertNoFlag: TThostFtdcYesNoIndicatorType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "ժҪ"]
    pub Digest: TThostFtdcDigestType,
    #[doc = "�����ʺ�����"]
    pub BankAccType: TThostFtdcBankAccTypeType,
    #[doc = "�ڻ���˾���б���"]
    pub BrokerIDByBank: TThostFtdcBankCodingForFutureType,
    #[doc = "����ID"]
    pub TID: TThostFtdcTIDType,
    #[doc = "ԤԼ����״\u{32c}"]
    pub ReserveOpenAccStas: TThostFtdcReserveOpenAccStasType,
    #[doc = "�������"]
    pub ErrorID: TThostFtdcErrorIDType,
    #[doc = "������Ϣ"]
    pub ErrorMsg: TThostFtdcErrorMsgType,
}
impl Default for CThostFtdcReserveOpenAccountField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����˻�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAccountPropertyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "����ͳһ��ʶ����"]
    pub BankID: TThostFtdcBankIDType,
    #[doc = "�����˻�"]
    pub BankAccount: TThostFtdcBankAccountType,
    #[doc = "�����˻��Ŀ���������"]
    pub OpenName: TThostFtdcInvestorFullNameType,
    #[doc = "�����˻��Ŀ�����"]
    pub OpenBank: TThostFtdcOpenBankType,
    #[doc = "�Ƿ��Ծ"]
    pub IsActive: TThostFtdcBoolType,
    #[doc = "�˻���Դ"]
    pub AccountSourceType: TThostFtdcAccountSourceTypeType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "ע������"]
    pub CancelDate: TThostFtdcDateType,
    #[doc = "¼��Ա����"]
    pub OperatorID: TThostFtdcOperatorIDType,
    #[doc = "¼������"]
    pub OperateDate: TThostFtdcDateType,
    #[doc = "¼��ʱ��"]
    pub OperateTime: TThostFtdcTimeType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
}
impl Default for CThostFtdcAccountPropertyField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��ǰ��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryCurrDRIdentityField {
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "��ǰ��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcCurrDRIdentityField {
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "��ѯ�����������ʽ�У��ģʽ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySecAgentCheckModeField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "��ѯ������������Ϣ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySecAgentTradeInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�����н�����ʽ��ʺ�"]
    pub BrokerSecAgentID: TThostFtdcAccountIDType,
}
#[doc = "�û�������ȡ��ȫ��ȫ��½��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcReqUserAuthMethodField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "�û�������ȡ��ȫ��ȫ��½�����ظ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcRspUserAuthMethodField {
    #[doc = "��ǰ�����õ���\u{5a4}ģʽ"]
    pub UsableAuthMethod: TThostFtdcCurrentAuthMethodType,
}
#[doc = "�û�������ȡ��ȫ��ȫ��½��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcReqGenUserCaptchaField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "���ɵ�ͼƬ��\u{5a4}����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspGenUserCaptchaField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "ͼƬ��Ϣ����"]
    pub CaptchaInfoLen: TThostFtdcCaptchaInfoLenType,
    #[doc = "ͼƬ��Ϣ"]
    pub CaptchaInfo: TThostFtdcCaptchaInfoType,
}
impl Default for CThostFtdcRspGenUserCaptchaField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û�������ȡ��ȫ��ȫ��½��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcReqGenUserTextField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "������\u{5a4}�����ɵĻظ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcRspGenUserTextField {
    #[doc = "������\u{5a4}�����"]
    pub UserTextSeq: TThostFtdcUserTextSeqType,
}
#[doc = "�û�������ͼ����\u{5a4}��ĵ�¼��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithCaptchaField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "ͼ����\u{5a4}�����������"]
    pub Captcha: TThostFtdcPasswordType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcReqUserLoginWithCaptchaField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û�������������\u{5a4}��ĵ�¼��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithTextField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "������\u{5a4}����������"]
    pub Text: TThostFtdcPasswordType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcReqUserLoginWithTextField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û���������\u{32c}��\u{5a4}��ĵ�¼��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginWithOTPField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "OTP����"]
    pub OTPPassword: TThostFtdcPasswordType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcReqUserLoginWithOTPField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "api��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcReqApiHandshakeField {
    #[doc = "api��front\u{368}����Կ�汾��"]
    pub CryptoKeyVersion: TThostFtdcCryptoKeyVersionType,
}
#[doc = "front����api�����\u{5bb}ظ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRspApiHandshakeField {
    #[doc = "���\u{5bb}ظ����ݳ���"]
    pub FrontHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    #[doc = "���\u{5bb}ظ�����"]
    pub FrontHandshakeData: TThostFtdcHandshakeDataType,
    #[doc = "API��\u{5a4}�Ƿ���"]
    pub IsApiAuthEnabled: TThostFtdcBoolType,
}
impl Default for CThostFtdcRspApiHandshakeField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "api��front����\u{5a4}key������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqVerifyApiKeyField {
    #[doc = "���\u{5bb}ظ����ݳ���"]
    pub ApiHandshakeDataLen: TThostFtdcHandshakeDataLenType,
    #[doc = "���\u{5bb}ظ�����"]
    pub ApiHandshakeData: TThostFtdcHandshakeDataType,
}
impl Default for CThostFtdcReqVerifyApiKeyField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����Ա��\u{5af}�\u{739}���ϵ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcDepartmentUserField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcDepartmentRangeType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "��ѯƵ�ʣ�ÿ���ѯ����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQueryFreqField {
    #[doc = "��ѯƵ��"]
    pub QueryFreq: TThostFtdcQueryFreqType,
    #[doc = "FTDƵ��"]
    pub FTDPkgFreq: TThostFtdcQueryFreqType,
}
#[doc = "��\u{5b9}��\u{5a4}IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthForbiddenIPField {
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcAuthForbiddenIPField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ��\u{5b9}��\u{5a4}IP"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryAuthForbiddenIPField {
    #[doc = "IP��\u{5b7}"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcQryAuthForbiddenIPField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "������ᶳ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncDelaySwapFrozenField {
    #[doc = "������ˮ��"]
    pub DelaySwapSeqNo: TThostFtdcDepositSeqNoType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Դ����"]
    pub FromCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "Դʣ�\u{efb}����(���ᶳ��)"]
    pub FromRemainSwap: TThostFtdcMoneyType,
    #[doc = "�Ƿ��\u{5b9}�����"]
    pub IsManualSwap: TThostFtdcBoolType,
}
#[doc = "�û�ϵͳ��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcUserSystemInfoField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "�û���ϵͳ�ڲ���Ϣ����"]
    pub ClientSystemInfoLen: TThostFtdcSystemInfoLenType,
    #[doc = "�û���ϵͳ�ڲ���Ϣ"]
    pub ClientSystemInfo: TThostFtdcClientSystemInfoType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "��¼�ɹ�ʱ��"]
    pub ClientLoginTime: TThostFtdcTimeType,
    #[doc = "App����"]
    pub ClientAppID: TThostFtdcAppIDType,
    #[doc = "�û�����IP"]
    pub ClientPublicIP: TThostFtdcIPAddressType,
    #[doc = "�ͻ���¼��ע2"]
    pub ClientLoginRemark: TThostFtdcClientLoginRemarkType,
}
impl Default for CThostFtdcUserSystemInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�ն��û�����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthUserIDField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "У������"]
    pub AuthType: TThostFtdcAuthTypeType,
}
impl Default for CThostFtdcAuthUserIDField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�û�IP����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcAuthIPField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "�û�����"]
    pub IPAddress: TThostFtdcIPAddressType,
}
impl Default for CThostFtdcAuthIPField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ�����Լ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryClassifiedInstrumentField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ����״\u{32c}"]
    pub TradingType: TThostFtdcTradingTypeType,
    #[doc = "��Լ��������"]
    pub ClassType: TThostFtdcClassTypeType,
}
impl Default for CThostFtdcQryClassifiedInstrumentField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ѯ����Żݱ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryCombPromotionParamField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryCombPromotionParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����Żݱ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcCombPromotionParamField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcCombHedgeFlagType,
    #[doc = "��Ȩ��ϱ�\u{5a4}�����"]
    pub Xparameter: TThostFtdcDiscountRatioType,
}
impl Default for CThostFtdcCombPromotionParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�����û���¼����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcReqUserLoginSMField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "����"]
    pub Password: TThostFtdcPasswordType,
    #[doc = "�û��˲�Ʒ��Ϣ"]
    pub UserProductInfo: TThostFtdcProductInfoType,
    #[doc = "�ӿڶ˲�Ʒ��Ϣ"]
    pub InterfaceProductInfo: TThostFtdcProductInfoType,
    #[doc = "Э����Ϣ"]
    pub ProtocolInfo: TThostFtdcProtocolInfoType,
    #[doc = "Mac��\u{5b7}"]
    pub MacAddress: TThostFtdcMacAddressType,
    #[doc = "��\u{32c}����"]
    pub OneTimePassword: TThostFtdcPasswordType,
    #[doc = "��������Ч�\u{5b6}�"]
    pub reserve1: TThostFtdcOldIPAddressType,
    #[doc = "��¼��ע"]
    pub LoginRemark: TThostFtdcLoginRemarkType,
    #[doc = "�ն�IP�˿�"]
    pub ClientIPPort: TThostFtdcIPPortType,
    #[doc = "�ն�IP��\u{5b7}"]
    pub ClientIPAddress: TThostFtdcIPAddressType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerName: TThostFtdcBrokerNameType,
    #[doc = "��\u{5a4}��"]
    pub AuthCode: TThostFtdcAuthCodeType,
    #[doc = "App����"]
    pub AppID: TThostFtdcAppIDType,
    #[doc = "PIN��"]
    pub PIN: TThostFtdcPasswordType,
}
impl Default for CThostFtdcReqUserLoginSMField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���߷��ս���\u{5b2}\u{5b2}�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRiskSettleInvstPositionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryRiskSettleInvstPositionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս����Ʒ��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRiskSettleProductStatusField {
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryRiskSettleProductStatusField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���߷��ս���\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRiskSettleInvstPositionField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�\u{5b2}\u{5b6}�շ���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�\u{5b2}�����"]
    pub PositionDate: TThostFtdcPositionDateType,
    #[doc = "���ճ\u{5b2}�"]
    pub YdPosition: TThostFtdcVolumeType,
    #[doc = "���ճ\u{5b2}�"]
    pub Position: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub LongFrozen: TThostFtdcVolumeType,
    #[doc = "��ͷ����"]
    pub ShortFrozen: TThostFtdcVolumeType,
    #[doc = "���\u{5b6}�����"]
    pub LongFrozenAmount: TThostFtdcMoneyType,
    #[doc = "���\u{5b6}�����"]
    pub ShortFrozenAmount: TThostFtdcMoneyType,
    #[doc = "������"]
    pub OpenVolume: TThostFtdcVolumeType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "���\u{5bd}��"]
    pub OpenAmount: TThostFtdcMoneyType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}\u{5b3}ɱ�"]
    pub PositionCost: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "ռ�õı�\u{5a4}��"]
    pub UseMargin: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{5b3}ɱ�"]
    pub OpenCost: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ϳɽ��γɵĳ\u{5b2}�"]
    pub CombPosition: TThostFtdcVolumeType,
    #[doc = "��϶�ͷ����"]
    pub CombLongFrozen: TThostFtdcVolumeType,
    #[doc = "��Ͽ�ͷ����"]
    pub CombShortFrozen: TThostFtdcVolumeType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ճ\u{5b2}�"]
    pub TodayPosition: TThostFtdcVolumeType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}�ж���"]
    pub StrikeFrozen: TThostFtdcVolumeType,
    #[doc = "\u{5b4}�ж�����"]
    pub StrikeFrozenAmount: TThostFtdcMoneyType,
    #[doc = "����\u{5b4}�ж���"]
    pub AbandonFrozen: TThostFtdcVolumeType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "\u{5b4}�ж�������"]
    pub YdStrikeFrozen: TThostFtdcVolumeType,
    #[doc = "Ͷ�ʵ�Ԫ����"]
    pub InvestUnitID: TThostFtdcInvestUnitIDType,
    #[doc = "�\u{5b2}\u{5b3}ɱ���\u{5b5}"]
    pub PositionCostOffset: TThostFtdcMoneyType,
    #[doc = "tas�\u{5b2}�����"]
    pub TasPosition: TThostFtdcVolumeType,
    #[doc = "tas�\u{5b2}\u{5b3}ɱ�"]
    pub TasPositionCost: TThostFtdcMoneyType,
}
impl Default for CThostFtdcRiskSettleInvstPositionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "����Ʒ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRiskSettleProductStatusField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ���"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��Ʒ����״\u{32c}"]
    pub ProductStatus: TThostFtdcProductStatusType,
}
impl Default for CThostFtdcRiskSettleProductStatusField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInfoField {
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
    #[doc = "\u{5f7}ƽ״\u{32c}"]
    pub SyncDeltaStatus: TThostFtdcSyncDeltaStatusType,
    #[doc = "\u{5f7}ƽ����"]
    pub SyncDescription: TThostFtdcSyncDescriptionType,
    #[doc = "�Ƿ�\u{5bb}���ʽ�\u{5f7}ƽ"]
    pub IsOnlyTrdDelta: TThostFtdcBoolType,
}
impl Default for CThostFtdcSyncDeltaInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ��Ʒ��Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaProductStatusField {
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "�Ƿ���������"]
    pub ProductStatus: TThostFtdcProductStatusType,
}
impl Default for CThostFtdcSyncDeltaProductStatusField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ�\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstPosDtlField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "�ɽ����"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "���\u{5bc}�"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "�ɽ�����"]
    pub TradeType: TThostFtdcTradeTypeType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ն���ƽ��ӯ��"]
    pub CloseProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�ƽ��ӯ��"]
    pub CloseProfitByTrade: TThostFtdcMoneyType,
    #[doc = "���ն��г\u{5b2}�ӯ��"]
    pub PositionProfitByDate: TThostFtdcMoneyType,
    #[doc = "��ʶԳ�\u{5b2}�ӯ��"]
    pub PositionProfitByTrade: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "������"]
    pub LastSettlementPrice: TThostFtdcPriceType,
    #[doc = "�����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "ƽ����"]
    pub CloseVolume: TThostFtdcVolumeType,
    #[doc = "ƽ�\u{5bd}��"]
    pub CloseAmount: TThostFtdcMoneyType,
    #[doc = "�ȿ���ƽʣ������"]
    pub TimeFirstVolume: TThostFtdcVolumeType,
    #[doc = "����\u{5b2}\u{5b1}�־"]
    pub SpecPosiType: TThostFtdcSpecPosiTypeType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaInvstPosDtlField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ��ϳ\u{5b2}���ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstPosCombDtlField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��������"]
    pub OpenDate: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ϱ��"]
    pub ComTradeID: TThostFtdcTradeIDType,
    #[doc = "��ϱ��"]
    pub TradeID: TThostFtdcTradeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "�\u{5b2}���"]
    pub TotalAmt: TThostFtdcVolumeType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "��\u{5a4}����"]
    pub MarginRateByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5a4}����(������)"]
    pub MarginRateByVolume: TThostFtdcRatioType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "���ȳ���"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "�ɽ����"]
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaInvstPosCombDtlField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ�ʽ�"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncDeltaTradingAccountField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "�ϴ���Ѻ���"]
    pub PreMortgage: TThostFtdcMoneyType,
    #[doc = "�ϴ����ö��"]
    pub PreCredit: TThostFtdcMoneyType,
    #[doc = "�ϴδ���"]
    pub PreDeposit: TThostFtdcMoneyType,
    #[doc = "�ϴν���\u{5fc}����"]
    pub PreBalance: TThostFtdcMoneyType,
    #[doc = "�ϴ�ռ�õı�\u{5a4}��"]
    pub PreMargin: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub InterestBase: TThostFtdcMoneyType,
    #[doc = "��Ϣ����"]
    pub Interest: TThostFtdcMoneyType,
    #[doc = "�����"]
    pub Deposit: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Withdraw: TThostFtdcMoneyType,
    #[doc = "����ı�\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "��ǰ��\u{5a4}���\u{736}�"]
    pub CurrMargin: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "ƽ��ӯ��"]
    pub CloseProfit: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}�ӯ��"]
    pub PositionProfit: TThostFtdcMoneyType,
    #[doc = "�ڻ�����\u{5fc}����"]
    pub Balance: TThostFtdcMoneyType,
    #[doc = "�����ʽ�"]
    pub Available: TThostFtdcMoneyType,
    #[doc = "��ȡ�ʽ�"]
    pub WithdrawQuota: TThostFtdcMoneyType,
    #[doc = "����\u{5fc}����"]
    pub Reserve: TThostFtdcMoneyType,
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "������"]
    pub SettlementID: TThostFtdcSettlementIDType,
    #[doc = "���ö��"]
    pub Credit: TThostFtdcMoneyType,
    #[doc = "��Ѻ���"]
    pub Mortgage: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchangeMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7fd}��\u{ec63}\u{5a4}��"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "���������\u{ec63}\u{5a4}��"]
    pub ExchangeDeliveryMargin: TThostFtdcMoneyType,
    #[doc = "�����ڻ�����\u{5fc}����"]
    pub ReserveBalance: TThostFtdcMoneyType,
    #[doc = "���\u{5b4}���"]
    pub CurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "�ϴλ���������"]
    pub PreFundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�ϴλ����ʳ����"]
    pub PreFundMortgageOut: TThostFtdcMoneyType,
    #[doc = "����������"]
    pub FundMortgageIn: TThostFtdcMoneyType,
    #[doc = "�����ʳ����"]
    pub FundMortgageOut: TThostFtdcMoneyType,
    #[doc = "������Ѻ���"]
    pub FundMortgageAvailable: TThostFtdcMoneyType,
    #[doc = "����Ѻ���ҽ��"]
    pub MortgageableFund: TThostFtdcMoneyType,
    #[doc = "�����Ʒռ�ñ�\u{5a4}��"]
    pub SpecProductMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ���ᱣ\u{5a4}��"]
    pub SpecProductFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�����Ʒ������"]
    pub SpecProductCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ����������"]
    pub SpecProductFrozenCommission: TThostFtdcMoneyType,
    #[doc = "�����Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfit: TThostFtdcMoneyType,
    #[doc = "�����Ʒƽ��ӯ��"]
    pub SpecProductCloseProfit: TThostFtdcMoneyType,
    #[doc = "���ݳ\u{5b2}�ӯ���㷨����������Ʒ�\u{5b2}�ӯ��"]
    pub SpecProductPositionProfitByAlg: TThostFtdcMoneyType,
    #[doc = "�����Ʒ��������\u{5a4}��"]
    pub SpecProductExchangeMargin: TThostFtdcMoneyType,
    #[doc = "��ʱ���㶳����"]
    pub FrozenSwap: TThostFtdcMoneyType,
    #[doc = "ʣ�\u{efb}����"]
    pub RemainSwap: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "Ͷ���߷��ս����\u{731}�\u{5a4}��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncDeltaInitInvstMarginField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "\u{5f7}ƽǰ�\u{737}��ձ�\u{5a4}��"]
    pub LastRiskTotalInvstMargin: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽǰ�������\u{737}��ձ�\u{5a4}��"]
    pub LastRiskTotalExchMargin: TThostFtdcMoneyType,
    #[doc = "����\u{5f7}ƽƷ���\u{731}�\u{5a4}��"]
    pub ThisSyncInvstMargin: TThostFtdcMoneyType,
    #[doc = "����\u{5f7}ƽƷ�\u{5bd}������\u{731}�\u{5a4}��"]
    pub ThisSyncExchMargin: TThostFtdcMoneyType,
    #[doc = "����δ\u{5f7}ƽƷ���\u{731}�\u{5a4}��"]
    pub RemainRiskInvstMargin: TThostFtdcMoneyType,
    #[doc = "����δ\u{5f7}ƽƷ�\u{5bd}������\u{731}�\u{5a4}��"]
    pub RemainRiskExchMargin: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽǰ�������Ʒ���ձ�\u{5a4}��"]
    pub LastRiskSpecTotalInvstMargin: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽǰ�������Ʒ���������ձ�\u{5a4}��"]
    pub LastRiskSpecTotalExchMargin: TThostFtdcMoneyType,
    #[doc = "����\u{5f7}ƽƷ�������Ʒ�\u{731}�\u{5a4}��"]
    pub ThisSyncSpecInvstMargin: TThostFtdcMoneyType,
    #[doc = "����\u{5f7}ƽƷ�������Ʒ�������\u{731}�\u{5a4}��"]
    pub ThisSyncSpecExchMargin: TThostFtdcMoneyType,
    #[doc = "����δ\u{5f7}ƽƷ�������Ʒ�\u{731}�\u{5a4}��"]
    pub RemainRiskSpecInvstMargin: TThostFtdcMoneyType,
    #[doc = "����δ\u{5f7}ƽƷ�������Ʒ�������\u{731}�\u{5a4}��"]
    pub RemainRiskSpecExchMargin: TThostFtdcMoneyType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "���ս���\u{5f7}ƽ������ȼ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaDceCombInstrumentField {
    #[doc = "��Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "�ɽ����"]
    pub TradeGroupID: TThostFtdcTradeGroupIDType,
    #[doc = "Ͷ���ױ���־"]
    pub CombHedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�������"]
    pub CombinationType: TThostFtdcDceCombinationTypeType,
    #[doc = "����"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "��Ȩ��ϱ�\u{5a4}�����"]
    pub Xparameter: TThostFtdcDiscountRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaDceCombInstrumentField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽͶ�����ڻ���\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstMarginRateField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���Խ�������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaInvstMarginRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ�������ڻ���\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaExchMarginRateField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaExchMarginRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ�н��\u{5bb}���Ȩ��������\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptExchMarginField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaOptExchMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ�н��\u{5bb}���ȨͶ���\u{7f1}�\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptInvstMarginField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "Ͷ����ͷ��\u{5a4}�����ϵ��"]
    pub SShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��\u{5b5}��ͷ��\u{5a4}�����ϵ��"]
    pub HShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "������ͷ��\u{5a4}�����ϵ��"]
    pub AShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "�Ƿ���潻������ȡ"]
    pub IsRelative: TThostFtdcBoolType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "�����\u{33f}�ͷ��\u{5a4}�����ϵ��"]
    pub MShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaOptInvstMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ��Ȩ��ĵ�����\u{5a4}����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstMarginRateULField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub LongMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub LongMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "��ͷ��\u{5a4}����"]
    pub ShortMarginRatioByMoney: TThostFtdcRatioType,
    #[doc = "��ͷ��\u{5a4}���"]
    pub ShortMarginRatioByVolume: TThostFtdcMoneyType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaInvstMarginRateULField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ��Ȩ��������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaOptInvstCommRateField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "\u{5b4}����������"]
    pub StrikeRatioByMoney: TThostFtdcRatioType,
    #[doc = "\u{5b4}��������"]
    pub StrikeRatioByVolume: TThostFtdcRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaOptInvstCommRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ�ڻ���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvstCommRateField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "������������"]
    pub OpenRatioByMoney: TThostFtdcRatioType,
    #[doc = "����������"]
    pub OpenRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseRatioByVolume: TThostFtdcRatioType,
    #[doc = "ƽ����������"]
    pub CloseTodayRatioByMoney: TThostFtdcRatioType,
    #[doc = "ƽ��������"]
    pub CloseTodayRatioByVolume: TThostFtdcRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaInvstCommRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaProductExchRateField {
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcInstrumentIDType,
    #[doc = "���۱�������"]
    pub QuoteCurrencyID: TThostFtdcCurrencyIDType,
    #[doc = "����"]
    pub ExchangeRate: TThostFtdcExchangeRateType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaProductExchRateField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaDepthMarketDataField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ�ڽ������Ĵ���"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "���¼�"]
    pub LastPrice: TThostFtdcPriceType,
    #[doc = "�ϴν����"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "������"]
    pub PreClosePrice: TThostFtdcPriceType,
    #[doc = "��\u{5b2}���"]
    pub PreOpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "����"]
    pub OpenPrice: TThostFtdcPriceType,
    #[doc = "��\u{7fc}�"]
    pub HighestPrice: TThostFtdcPriceType,
    #[doc = "��ͼ�"]
    pub LowestPrice: TThostFtdcPriceType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "�ɽ����"]
    pub Turnover: TThostFtdcMoneyType,
    #[doc = "�\u{5b2}���"]
    pub OpenInterest: TThostFtdcLargeVolumeType,
    #[doc = "������"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "���ν����"]
    pub SettlementPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub UpperLimitPrice: TThostFtdcPriceType,
    #[doc = "��\u{363}���"]
    pub LowerLimitPrice: TThostFtdcPriceType,
    #[doc = "����ʵ��"]
    pub PreDelta: TThostFtdcRatioType,
    #[doc = "����ʵ��"]
    pub CurrDelta: TThostFtdcRatioType,
    #[doc = "����\u{7b8}�ʱ��"]
    pub UpdateTime: TThostFtdcTimeType,
    #[doc = "����\u{7b8}ĺ���"]
    pub UpdateMillisec: TThostFtdcMillisecType,
    #[doc = "�����һ"]
    pub BidPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub BidVolume1: TThostFtdcVolumeType,
    #[doc = "������һ"]
    pub AskPrice1: TThostFtdcPriceType,
    #[doc = "������һ"]
    pub AskVolume1: TThostFtdcVolumeType,
    #[doc = "����۶�"]
    pub BidPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume2: TThostFtdcVolumeType,
    #[doc = "�����۶�"]
    pub AskPrice2: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume2: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume3: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice3: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume3: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume4: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice4: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume4: TThostFtdcVolumeType,
    #[doc = "�������"]
    pub BidPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub BidVolume5: TThostFtdcVolumeType,
    #[doc = "��������"]
    pub AskPrice5: TThostFtdcPriceType,
    #[doc = "��������"]
    pub AskVolume5: TThostFtdcVolumeType,
    #[doc = "���վ���"]
    pub AveragePrice: TThostFtdcPriceType,
    #[doc = "ҵ������"]
    pub ActionDay: TThostFtdcDateType,
    #[doc = "�ϴ���"]
    pub BandingUpperPrice: TThostFtdcPriceType,
    #[doc = "�´���"]
    pub BandingLowerPrice: TThostFtdcPriceType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaDepthMarketDataField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ�\u{5bb}�\u{5b8}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaIndexPriceField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "\u{5b8}���\u{5bb}����\u{33c}�"]
    pub ClosePrice: TThostFtdcPriceType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaIndexPriceField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽ�\u{5b5}��۵�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaEWarrantOffsetField {
    #[doc = "��������"]
    pub TradingDay: TThostFtdcTradeDateType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "����"]
    pub Volume: TThostFtdcVolumeType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaEWarrantOffsetField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPBM�ڻ���Լ��\u{5a4}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSPBMFutureParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڻ���Լ����"]
    pub Cvf: TThostFtdcVolumeMultipleType,
    #[doc = "�\u{5f6}α�ʶ"]
    pub TimeRange: TThostFtdcTimeRangeType,
    #[doc = "Ʒ�\u{5b1}�\u{5a4}���\u{5fc}"]
    pub MarginRate: TThostFtdcRatioType,
    #[doc = "�ڻ���Լ�ڲ������\u{5b7}����ۿ۱���"]
    pub LockRateX: TThostFtdcRatioType,
    #[doc = "��\u{7f1}�\u{5a4}���\u{5fc}"]
    pub AddOnRate: TThostFtdcRatioType,
    #[doc = "������"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "�ڻ���Լ�ڲ������\u{5b8}��ӷ����ۿ۱���"]
    pub AddOnLockRateX2: TThostFtdcRatioType,
}
impl Default for CThostFtdcSPBMFutureParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPBM��Ȩ��Լ��\u{5a4}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSPBMOptionParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��Ȩ��Լ����"]
    pub Cvf: TThostFtdcVolumeMultipleType,
    #[doc = "��Ȩ��\u{5bc}۸�"]
    pub DownPrice: TThostFtdcPriceType,
    #[doc = "Delta\u{5b5}"]
    pub Delta: TThostFtdcDeltaType,
    #[doc = "������Ȩ����ת�����\u{5b5}"]
    pub SlimiDelta: TThostFtdcDeltaType,
    #[doc = "������"]
    pub PreSettlementPrice: TThostFtdcPriceType,
}
impl Default for CThostFtdcSPBMOptionParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPBMƷ���ڶ������ۿ۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSPBMIntraParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "Ʒ���ں�Լ������\u{5b7}����ۿ۱���"]
    pub IntraRateY: TThostFtdcRatioType,
    #[doc = "Ʒ���ں�Լ������\u{5b8}��ӷ����ۿ۱���"]
    pub AddOnIntraRateY2: TThostFtdcRatioType,
}
impl Default for CThostFtdcSPBMIntraParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPBM��Ʒ�\u{5b5}\u{5bf}۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSPBMInterParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ȼ�"]
    pub SpreadId: TThostFtdcSpreadIdType,
    #[doc = "Ʒ�\u{5bc}�����\u{5b7}����ۿ۱���"]
    pub InterRateZ: TThostFtdcRatioType,
    #[doc = "��һ�ȹ���Ʒ��"]
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڶ��ȹ���Ʒ��"]
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcSPBMInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "\u{36c}��SPBM��������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncSPBMParameterEndField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
}
#[doc = "SPBM�ڻ���Լ��\u{5a4}�������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySPBMFutureParameterField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQrySPBMFutureParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPBM��Ȩ��Լ��\u{5a4}�������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySPBMOptionParameterField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQrySPBMOptionParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPBMƷ���ڶ������ۿ۲�����ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySPBMIntraParameterField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQrySPBMIntraParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPBM��Ʒ�\u{5b5}\u{5bf}۲�����ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySPBMInterParameterField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��һ�ȹ���Ʒ��"]
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڶ��ȹ���Ʒ��"]
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQrySPBMInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ϱ�\u{5a4}���ײ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSPBMPortfDefinitionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��ϱ�\u{5a4}���ײʹ���"]
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�Ƿ�����SPBM"]
    pub IsSPBM: TThostFtdcBoolType,
}
impl Default for CThostFtdcSPBMPortfDefinitionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ�����ײ�ѡ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSPBMInvestorPortfDefField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ϱ�\u{5a4}���ײʹ���"]
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
}
#[doc = "Ͷ����������ϱ�\u{5a4}��ϵ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorPortfMarginRatioField {
    #[doc = "Ͷ���߷�Χ"]
    pub InvestorRange: TThostFtdcInvestorRangeType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ա��Ͷ������ȡ�ı�\u{5a4}��ͽ�������Ͷ������ȡ�ı�\u{5a4}��ı���"]
    pub MarginRatio: TThostFtdcRatioType,
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
}
impl Default for CThostFtdcInvestorPortfMarginRatioField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "��ϱ�\u{5a4}���ײͲ�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySPBMPortfDefinitionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��ϱ�\u{5a4}���ײʹ���"]
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQrySPBMPortfDefinitionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ�����ײ�ѡ���ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQrySPBMInvestorPortfDefField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "Ͷ����������ϱ�\u{5a4}��ϵ����ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorPortfMarginRatioField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
}
impl Default for CThostFtdcQryInvestorPortfMarginRatioField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���\u{7f2}�ƷSPBM��ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorProdSPBMDetailField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��Լ�ڶ�����\u{5a4}��"]
    pub IntraInstrMargin: TThostFtdcMoneyType,
    #[doc = "��鼯��\u{5a4}��"]
    pub BCollectingMargin: TThostFtdcMoneyType,
    #[doc = "���鼯��\u{5a4}��"]
    pub SCollectingMargin: TThostFtdcMoneyType,
    #[doc = "Ʒ���ں�Լ�������\u{5a4}��"]
    pub IntraProdMargin: TThostFtdcMoneyType,
    #[doc = "����\u{5a4}��"]
    pub NetMargin: TThostFtdcMoneyType,
    #[doc = "��Ʒ�������\u{5a4}��"]
    pub InterProdMargin: TThostFtdcMoneyType,
    #[doc = "�㱣\u{5a4}��"]
    pub SingleMargin: TThostFtdcMoneyType,
    #[doc = "���ӱ�\u{5a4}��"]
    pub AddOnMargin: TThostFtdcMoneyType,
    #[doc = "�����±�\u{5a4}��"]
    pub DeliveryMargin: TThostFtdcMoneyType,
    #[doc = "������Ȩ��ͷ���"]
    pub CallOptionMinRisk: TThostFtdcMoneyType,
    #[doc = "������Ȩ��ͷ���"]
    pub PutOptionMinRisk: TThostFtdcMoneyType,
    #[doc = "������Ȩ��ͷ���"]
    pub OptionMinRisk: TThostFtdcMoneyType,
    #[doc = "����Ȩ��\u{5bc}�\u{5b5}"]
    pub OptionValueOffset: TThostFtdcMoneyType,
    #[doc = "������ȨȨ����"]
    pub OptionRoyalty: TThostFtdcMoneyType,
    #[doc = "��\u{5b5}���"]
    pub RealOptionValueOffset: TThostFtdcMoneyType,
    #[doc = "��\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
}
impl Default for CThostFtdcInvestorProdSPBMDetailField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���\u{7f2}�ƷSPBM��ϸ��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorProdSPBMDetailField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryInvestorProdSPBMDetailField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�鱣���ײ�������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcPortfTradeParamSettingField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "�����鱣�㷨"]
    pub Portfolio: TThostFtdcPortfolioType,
    #[doc = "�����Ƿ�����"]
    pub IsActionVerify: TThostFtdcBoolType,
    #[doc = "ƽ���Ƿ�����"]
    pub IsCloseVerify: TThostFtdcBoolType,
}
#[doc = "Ͷ���\u{7fd}���Ȩ������"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcInvestorTradingRightField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "����Ȩ��"]
    pub InvstTradingRight: TThostFtdcInvstTradingRightType,
}
#[doc = "��Ѻ��Ȳ���"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcMortgageParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "��Ѻ���ϵ��"]
    pub MortgageBalance: TThostFtdcRatioType,
    #[doc = "�����Ƿ���\u{5a4}��Ѻ���"]
    pub CheckMortgageRatio: TThostFtdcBoolType,
}
#[doc = "������Ʋ���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcWithDrawParamField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ�����ʺ�"]
    pub AccountID: TThostFtdcAccountIDType,
    #[doc = "��������"]
    pub WithDrawParamID: TThostFtdcWithDrawParamIDType,
    #[doc = "��������\u{5b5}"]
    pub WithDrawParamValue: TThostFtdcWithDrawParamValueType,
}
impl Default for CThostFtdcWithDrawParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Thost�ն��û�����Ȩ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcThostUserFunctionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
    #[doc = "Thost�ն˹��\u{734}���"]
    pub ThostFunctionCode: TThostFtdcThostFunctionCodeType,
}
#[doc = "Thost�ն��û�����Ȩ�\u{7b2}�ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryThostUserFunctionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "�û�����"]
    pub UserID: TThostFtdcUserIDType,
}
#[doc = "SPBM���ӿ�Ʒ�\u{5b5}\u{5bf}۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSPBMAddOnInterParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ȼ�"]
    pub SpreadId: TThostFtdcSpreadIdType,
    #[doc = "Ʒ�\u{5bc}�����\u{5b8}��ӷ����ۿ۱���"]
    pub AddOnInterRateZ2: TThostFtdcRatioType,
    #[doc = "��һ�ȹ���Ʒ��"]
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڶ��ȹ���Ʒ��"]
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcSPBMAddOnInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPBM���ӿ�Ʒ�\u{5b5}\u{5bf}۲�����ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySPBMAddOnInterParameterField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��һ�ȹ���Ʒ��"]
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڶ��ȹ���Ʒ��"]
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQrySPBMAddOnInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ������Ʒ��SPMM��¼��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorCommoditySPMMMarginField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Ʒ�����"]
    pub CommodityID: TThostFtdcSPMMProductIDType,
}
impl Default for CThostFtdcQryInvestorCommoditySPMMMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ������ƷȺSPMM��¼��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorCommodityGroupSPMMMarginField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ƷȺ����"]
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
}
impl Default for CThostFtdcQryInvestorCommodityGroupSPMMMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPMM��Լ������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySPMMInstParamField {
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQrySPMMInstParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPMM��Ʒ������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQrySPMMProductParamField {
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcSPMMProductIDType,
}
impl Default for CThostFtdcQrySPMMProductParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ������Ʒ��SPMM��¼"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorCommoditySPMMMarginField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Ʒ�����"]
    pub CommodityID: TThostFtdcSPMMProductIDType,
    #[doc = "�Żݲ�λӦ�ձ�\u{5a4}��"]
    pub MarginBeforeDiscount: TThostFtdcMoneyType,
    #[doc = "���Żݲ�λӦ�ձ�\u{5a4}��"]
    pub MarginNoDiscount: TThostFtdcMoneyType,
    #[doc = "��ͷʵ�\u{5b7}���"]
    pub LongPosRisk: TThostFtdcMoneyType,
    #[doc = "��ͷ���\u{5b6}������"]
    pub LongOpenFrozenRisk: TThostFtdcMoneyType,
    #[doc = "��ͷ��ƽ�������"]
    pub LongCloseFrozenRisk: TThostFtdcMoneyType,
    #[doc = "��ͷʵ�\u{5b7}���"]
    pub ShortPosRisk: TThostFtdcMoneyType,
    #[doc = "��ͷ���\u{5b6}������"]
    pub ShortOpenFrozenRisk: TThostFtdcMoneyType,
    #[doc = "��ͷ��ƽ�������"]
    pub ShortCloseFrozenRisk: TThostFtdcMoneyType,
    #[doc = "SPMMƷ���ڿ����Ż�ϵ��"]
    pub IntraCommodityRate: TThostFtdcSPMMDiscountRatioType,
    #[doc = "SPMM��Ȩ�Ż�ϵ��"]
    pub OptionDiscountRate: TThostFtdcSPMMDiscountRatioType,
    #[doc = "ʵ�\u{5b6}Գ��Żݽ��"]
    pub PosDiscount: TThostFtdcMoneyType,
    #[doc = "���\u{5b1}����Գ��Żݽ��"]
    pub OpenFrozenDiscount: TThostFtdcMoneyType,
    #[doc = "Ʒ�\u{5b7}��վ�ͷ"]
    pub NetRisk: TThostFtdcMoneyType,
    #[doc = "ƽ�\u{5b6}��ᱣ\u{5a4}��"]
    pub CloseFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "��Ȩ�����ʽ�"]
    pub StrikeFrozenMargin: TThostFtdcMoneyType,
}
impl Default for CThostFtdcInvestorCommoditySPMMMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ������ƷȺSPMM��¼"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorCommodityGroupSPMMMarginField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ƷȺ����"]
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
    #[doc = "�Żݲ�λӦ�ձ�\u{5a4}��"]
    pub MarginBeforeDiscount: TThostFtdcMoneyType,
    #[doc = "���Żݲ�λӦ�ձ�\u{5a4}��"]
    pub MarginNoDiscount: TThostFtdcMoneyType,
    #[doc = "��ͷ����"]
    pub LongRisk: TThostFtdcMoneyType,
    #[doc = "��ͷ����"]
    pub ShortRisk: TThostFtdcMoneyType,
    #[doc = "��ƷȺƽ�\u{5b6}��ᱣ\u{5a4}��"]
    pub CloseFrozenMargin: TThostFtdcMoneyType,
    #[doc = "SPMM��Ʒ���Ż�ϵ��"]
    pub InterCommodityRate: TThostFtdcSPMMDiscountRatioType,
    #[doc = "��ƷȺ��С��\u{5a4}�����"]
    pub MiniMarginRatio: TThostFtdcSPMMDiscountRatioType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��ͽ�������\u{5a4}��ı���"]
    pub AdjustRatio: TThostFtdcRatioType,
    #[doc = "SPMMƷ�����Żݻ���"]
    pub IntraCommodityDiscount: TThostFtdcMoneyType,
    #[doc = "SPMM��Ʒ���Ż�"]
    pub InterCommodityDiscount: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub InvestorMargin: TThostFtdcMoneyType,
    #[doc = "�����������"]
    pub FrozenCommission: TThostFtdcMoneyType,
    #[doc = "������"]
    pub Commission: TThostFtdcMoneyType,
    #[doc = "������ʽ�"]
    pub FrozenCash: TThostFtdcMoneyType,
    #[doc = "�ʽ���"]
    pub CashIn: TThostFtdcMoneyType,
    #[doc = "��Ȩ�����ʽ�"]
    pub StrikeFrozenMargin: TThostFtdcMoneyType,
}
impl Default for CThostFtdcInvestorCommodityGroupSPMMMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPMM��Լ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSPMMInstParamField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "SPMM��Լ��\u{5a4}���㷨"]
    pub InstMarginCalID: TThostFtdcInstMarginCalIDType,
    #[doc = "��Ʒ�����"]
    pub CommodityID: TThostFtdcSPMMProductIDType,
    #[doc = "��ƷȺ����"]
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
}
impl Default for CThostFtdcSPMMInstParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "SPMM��Ʒ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSPMMProductParamField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcSPMMProductIDType,
    #[doc = "��Ʒ�����"]
    pub CommodityID: TThostFtdcSPMMProductIDType,
    #[doc = "��ƷȺ����"]
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
}
impl Default for CThostFtdcSPMMProductParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "ϯλ�뽻�����Ķ�Ӧ��ϵά����ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryTraderAssignField {
    #[doc = "����Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
}
#[doc = "ϯλ�뽻�����Ķ�Ӧ��ϵ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcTraderAssignField {
    #[doc = "Ӧ�õ�Ԫ����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "����������Ա����"]
    pub TraderID: TThostFtdcTraderIDType,
    #[doc = "��Ա����"]
    pub ParticipantID: TThostFtdcParticipantIDType,
    #[doc = "�������Ĵ���"]
    pub DRIdentityID: TThostFtdcDRIdentityIDType,
}
#[doc = "Ͷ�����걨�ѽ�����ȡ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorInfoCntSettingField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcProductIDType,
    #[doc = "�Ƿ���ȡ�걨��"]
    pub IsCalInfoComm: TThostFtdcBoolType,
    #[doc = "�Ƿ�������Ϣ��"]
    pub IsLimitInfoMax: TThostFtdcBoolType,
    #[doc = "��Ϣ�����Ʊ���"]
    pub InfoMaxLimit: TThostFtdcVolumeType,
}
impl Default for CThostFtdcInvestorInfoCntSettingField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS��Ʒ�����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRCAMSCombProductInfoField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcProductIDType,
    #[doc = "��Ʒ�����"]
    pub CombProductID: TThostFtdcProductIDType,
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
}
impl Default for CThostFtdcRCAMSCombProductInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS\u{36c}��Լ���նԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRCAMSInstrParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcProductIDType,
    #[doc = "\u{36c}��Լ���նԳ����"]
    pub HedgeRate: TThostFtdcHedgeRateType,
}
impl Default for CThostFtdcRCAMSInstrParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMSƷ���ڷ��նԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRCAMSIntraParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ��ϴ���"]
    pub CombProductID: TThostFtdcProductIDType,
    #[doc = "Ʒ���ڶԳ����"]
    pub HedgeRate: TThostFtdcHedgeRateType,
}
impl Default for CThostFtdcRCAMSIntraParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS��Ʒ�\u{5b7}����۵\u{5b2}���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRCAMSInterParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
    #[doc = "���ȼ�"]
    pub Priority: TThostFtdcRCAMSPriorityType,
    #[doc = "�۵���"]
    pub CreditRate: TThostFtdcHedgeRateType,
    #[doc = "��Ʒ��ϴ���1"]
    pub CombProduct1: TThostFtdcProductIDType,
    #[doc = "��Ʒ��ϴ���2"]
    pub CombProduct2: TThostFtdcProductIDType,
}
impl Default for CThostFtdcRCAMSInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS��ͷ��Ȩ���յ�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRCAMSShortOptAdjustParamField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ��ϴ���"]
    pub CombProductID: TThostFtdcProductIDType,
    #[doc = "Ͷ�ױ�־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��Ȩ���յ�����\u{5fc}"]
    pub AdjustValue: TThostFtdcAdjustValueType,
}
impl Default for CThostFtdcRCAMSShortOptAdjustParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS������ϳ\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRCAMSInvestorCombPositionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ�ױ�־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�\u{5b2}\u{5b6}�շ���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "��������Ϻ�Լ����"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "�\u{5b2}���"]
    pub TotalAmt: TThostFtdcVolumeType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
}
impl Default for CThostFtdcRCAMSInvestorCombPositionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ����Ʒ��RCAMS��\u{5a4}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorProdRCAMSMarginField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Ʒ��ϴ���"]
    pub CombProductID: TThostFtdcProductIDType,
    #[doc = "Ͷ�ױ�־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
    #[doc = "Ʒ�����ǰ����"]
    pub RiskBeforeDiscount: TThostFtdcMoneyType,
    #[doc = "\u{36c}��Լ�Գ����"]
    pub IntraInstrRisk: TThostFtdcMoneyType,
    #[doc = "Ʒ����\u{5b2}\u{5b7}���"]
    pub BPosRisk: TThostFtdcMoneyType,
    #[doc = "Ʒ�����\u{5b2}\u{5b7}���"]
    pub SPosRisk: TThostFtdcMoneyType,
    #[doc = "Ʒ���ڶԳ����"]
    pub IntraProdRisk: TThostFtdcMoneyType,
    #[doc = "Ʒ�־��\u{5b2}\u{5b7}���"]
    pub NetRisk: TThostFtdcMoneyType,
    #[doc = "Ʒ�\u{5bc}�Գ����"]
    pub InterProdRisk: TThostFtdcMoneyType,
    #[doc = "��ͷ��Ȩ���յ���"]
    pub ShortOptRiskAdj: TThostFtdcMoneyType,
    #[doc = "��ͷ��ȨȨ����"]
    pub OptionRoyalty: TThostFtdcMoneyType,
    #[doc = "������ƽ�\u{5b6}��ᱣ\u{5a4}��"]
    pub MMSACloseFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�������ƽ��/��Ȩ���ᱣ\u{5a4}��"]
    pub CloseCombFrozenMargin: TThostFtdcMoneyType,
    #[doc = "ƽ��/��Ȩ���ᱣ\u{5a4}��"]
    pub CloseFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�����Ͽ��\u{5b6}��ᱣ\u{5a4}��"]
    pub MMSAOpenFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�������ڻ����\u{5b6}��ᱣ\u{5a4}��"]
    pub DeliveryOpenFrozenMargin: TThostFtdcMoneyType,
    #[doc = "���\u{5b6}��ᱣ\u{5a4}��"]
    pub OpenFrozenMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���߶��ᱣ\u{5a4}��"]
    pub UseFrozenMargin: TThostFtdcMoneyType,
    #[doc = "�����Ͻ������\u{5b2}\u{5b1}�\u{5a4}��"]
    pub MMSAExchMargin: TThostFtdcMoneyType,
    #[doc = "�������ڻ��������\u{5b2}\u{5b1}�\u{5a4}��"]
    pub DeliveryExchMargin: TThostFtdcMoneyType,
    #[doc = "������Ͻ�������\u{5a4}��"]
    pub CombExchMargin: TThostFtdcMoneyType,
    #[doc = "�������\u{5b2}\u{5b1}�\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7f3}\u{5b2}\u{5b1}�\u{5a4}��"]
    pub UseMargin: TThostFtdcMoneyType,
}
impl Default for CThostFtdcInvestorProdRCAMSMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS��Ʒ�����Ϣ��ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRCAMSCombProductInfoField {
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcProductIDType,
    #[doc = "��Ʒ�����"]
    pub CombProductID: TThostFtdcProductIDType,
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
}
impl Default for CThostFtdcQryRCAMSCombProductInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS\u{36c}��Լ���նԳ������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRCAMSInstrParameterField {
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcProductIDType,
}
impl Default for CThostFtdcQryRCAMSInstrParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMSƷ���ڷ��նԳ������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRCAMSIntraParameterField {
    #[doc = "��Ʒ��ϴ���"]
    pub CombProductID: TThostFtdcProductIDType,
}
impl Default for CThostFtdcQryRCAMSIntraParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS��Ʒ�\u{5b7}����۵\u{5b2}�����ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRCAMSInterParameterField {
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
    #[doc = "��Ʒ��ϴ���1"]
    pub CombProduct1: TThostFtdcProductIDType,
    #[doc = "��Ʒ��ϴ���2"]
    pub CombProduct2: TThostFtdcProductIDType,
}
impl Default for CThostFtdcQryRCAMSInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS��ͷ��Ȩ���յ���������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRCAMSShortOptAdjustParamField {
    #[doc = "��Ʒ��ϴ���"]
    pub CombProductID: TThostFtdcProductIDType,
}
impl Default for CThostFtdcQryRCAMSShortOptAdjustParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RCAMS������ϳ\u{5b2}\u{5b2}�ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRCAMSInvestorCombPositionField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryRCAMSInvestorCombPositionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ����Ʒ��RCAMS��\u{5a4}���ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorProdRCAMSMarginField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Ʒ��ϴ���"]
    pub CombProductID: TThostFtdcProductIDType,
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
}
impl Default for CThostFtdcQryInvestorProdRCAMSMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RULE��Լ��\u{5a4}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRULEInstrParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentClass: TThostFtdcInstrumentClassType,
    #[doc = "��\u{5fc}��Լ"]
    pub StdInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ��������ϵ��"]
    pub BSpecRatio: TThostFtdcRatioType,
    #[doc = "Ͷ��������ϵ��"]
    pub SSpecRatio: TThostFtdcRatioType,
    #[doc = "�ױ�������ϵ��"]
    pub BHedgeRatio: TThostFtdcRatioType,
    #[doc = "�ױ�������ϵ��"]
    pub SHedgeRatio: TThostFtdcRatioType,
    #[doc = "�\u{b8f7c}ӷ��ձ�\u{5a4}��"]
    pub BAddOnMargin: TThostFtdcMoneyType,
    #[doc = "�����ӷ��ձ�\u{5a4}��"]
    pub SAddOnMargin: TThostFtdcMoneyType,
    #[doc = "��ƷȺ��"]
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
}
impl Default for CThostFtdcRULEInstrParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RULEƷ���ڶ������ۿ۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRULEIntraParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��\u{5fc}��Լ"]
    pub StdInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��\u{5fc}��Լ��\u{5a4}��"]
    pub StdInstrMargin: TThostFtdcMoneyType,
    #[doc = "һ���·ݺ�Լ��ϱ�\u{5a4}��ϵ��"]
    pub UsualIntraRate: TThostFtdcRatioType,
    #[doc = "�ٽ������Լ��ϱ�\u{5a4}��ϵ��"]
    pub DeliveryIntraRate: TThostFtdcRatioType,
}
impl Default for CThostFtdcRULEIntraParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RULE��Ʒ�\u{5b5}\u{5bf}۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcRULEInterParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ȼ�"]
    pub SpreadId: TThostFtdcSpreadIdType,
    #[doc = "Ʒ�\u{5bc}�����\u{5b7}����ۿ۱���"]
    pub InterRate: TThostFtdcRatioType,
    #[doc = "��һ�ȹ���Ʒ��"]
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڶ��ȹ���Ʒ��"]
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��1����ϵ��"]
    pub Leg1PropFactor: TThostFtdcCommonIntType,
    #[doc = "��2����ϵ��"]
    pub Leg2PropFactor: TThostFtdcCommonIntType,
    #[doc = "��ƷȺ��"]
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
    #[doc = "��ƷȺ����"]
    pub CommodityGroupName: TThostFtdcInstrumentNameType,
}
impl Default for CThostFtdcRULEInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RULE��Լ��\u{5a4}�������ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRULEInstrParameterField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryRULEInstrParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RULEƷ���ڶ������ۿ۲�����ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRULEIntraParameterField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
}
impl Default for CThostFtdcQryRULEIntraParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "RULE��Ʒ�\u{5b5}\u{5bf}۲�����ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryRULEInterParameterField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��һ�ȹ���Ʒ��"]
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڶ��ȹ���Ʒ��"]
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��ƷȺ��"]
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
}
impl Default for CThostFtdcQryRULEInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���\u{7f2}�ƷRULE��\u{5a4}��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcInvestorProdRULEMarginField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentClass: TThostFtdcInstrumentClassType,
    #[doc = "��ƷȺ��"]
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
    #[doc = "���\u{5fc}�\u{5b2}�"]
    pub BStdPosition: TThostFtdcStdPositionType,
    #[doc = "����\u{5fc}�\u{5b2}�"]
    pub SStdPosition: TThostFtdcStdPositionType,
    #[doc = "���\u{5fc}���\u{5b6}���"]
    pub BStdOpenFrozen: TThostFtdcStdPositionType,
    #[doc = "����\u{5fc}���\u{5b6}���"]
    pub SStdOpenFrozen: TThostFtdcStdPositionType,
    #[doc = "���\u{5fc}ƽ�\u{5b6}���"]
    pub BStdCloseFrozen: TThostFtdcStdPositionType,
    #[doc = "����\u{5fc}ƽ�\u{5b6}���"]
    pub SStdCloseFrozen: TThostFtdcStdPositionType,
    #[doc = "Ʒ���ڶԳ��\u{5fc}�\u{5b2}�"]
    pub IntraProdStdPosition: TThostFtdcStdPositionType,
    #[doc = "Ʒ���ڵ��ȱ�\u{5fc}�\u{5b2}�"]
    pub NetStdPosition: TThostFtdcStdPositionType,
    #[doc = "Ʒ�\u{5bc}�Գ��\u{5fc}�\u{5b2}�"]
    pub InterProdStdPosition: TThostFtdcStdPositionType,
    #[doc = "���ȱ�\u{5fc}�\u{5b2}�"]
    pub SingleStdPosition: TThostFtdcStdPositionType,
    #[doc = "Ʒ���ڶ�����\u{5a4}��"]
    pub IntraProdMargin: TThostFtdcMoneyType,
    #[doc = "Ʒ�\u{5bc}������\u{5a4}��"]
    pub InterProdMargin: TThostFtdcMoneyType,
    #[doc = "��Ʒ�\u{5b5}��ȱ�\u{5a4}��"]
    pub SingleMargin: TThostFtdcMoneyType,
    #[doc = "����Ϻ�Լ��\u{5a4}��"]
    pub NonCombMargin: TThostFtdcMoneyType,
    #[doc = "���ӱ�\u{5a4}��"]
    pub AddOnMargin: TThostFtdcMoneyType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "���Ӷ��ᱣ\u{5a4}��"]
    pub AddOnFrozenMargin: TThostFtdcMoneyType,
    #[doc = "���\u{5b6}��ᱣ\u{5a4}��"]
    pub OpenFrozenMargin: TThostFtdcMoneyType,
    #[doc = "ƽ�\u{5b6}��ᱣ\u{5a4}��"]
    pub CloseFrozenMargin: TThostFtdcMoneyType,
    #[doc = "Ʒ�\u{5b1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "���ᱣ\u{5a4}��"]
    pub FrozenMargin: TThostFtdcMoneyType,
}
impl Default for CThostFtdcInvestorProdRULEMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "Ͷ���\u{7f2}�ƷRULE��\u{5a4}���ѯ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcQryInvestorProdRULEMarginField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��ƷȺ��"]
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
}
impl Default for CThostFtdcQryInvestorProdRULEMarginField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽSPBM��ϱ�\u{5a4}���ײ�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMPortfDefinitionField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��ϱ�\u{5a4}���ײʹ���"]
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�Ƿ�����SPBM"]
    pub IsSPBM: TThostFtdcBoolType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaSPBMPortfDefinitionField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽͶ����SPBM�ײ�ѡ��"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMInvstPortfDefField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��ϱ�\u{5a4}���ײʹ���"]
    pub PortfolioDefID: TThostFtdcPortfolioDefIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
#[doc = "���ս���\u{5f7}ƽSPBM�ڻ���Լ��\u{5a4}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMFutureParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڻ���Լ����"]
    pub Cvf: TThostFtdcVolumeMultipleType,
    #[doc = "�\u{5f6}α�ʶ"]
    pub TimeRange: TThostFtdcTimeRangeType,
    #[doc = "Ʒ�\u{5b1}�\u{5a4}���\u{5fc}"]
    pub MarginRate: TThostFtdcRatioType,
    #[doc = "�ڻ���Լ�ڲ������\u{5b7}����ۿ۱���"]
    pub LockRateX: TThostFtdcRatioType,
    #[doc = "��\u{7f1}�\u{5a4}���\u{5fc}"]
    pub AddOnRate: TThostFtdcRatioType,
    #[doc = "������"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "�ڻ���Լ�ڲ������\u{5b8}��ӷ����ۿ۱���"]
    pub AddOnLockRateX2: TThostFtdcRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaSPBMFutureParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽSPBM��Ȩ��Լ��\u{5a4}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMOptionParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��Ȩ��Լ����"]
    pub Cvf: TThostFtdcVolumeMultipleType,
    #[doc = "��Ȩ��\u{5bc}۸�"]
    pub DownPrice: TThostFtdcPriceType,
    #[doc = "Delta\u{5b5}"]
    pub Delta: TThostFtdcDeltaType,
    #[doc = "������Ȩ����ת�����\u{5b5}"]
    pub SlimiDelta: TThostFtdcDeltaType,
    #[doc = "������"]
    pub PreSettlementPrice: TThostFtdcPriceType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaSPBMOptionParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽSPBMƷ���ڶ������ۿ۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMIntraParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "Ʒ���ں�Լ������\u{5b7}����ۿ۱���"]
    pub IntraRateY: TThostFtdcRatioType,
    #[doc = "Ʒ���ں�Լ������\u{5b8}��ӷ����ۿ۱���"]
    pub AddOnIntraRateY2: TThostFtdcRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaSPBMIntraParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽSPBM��Ʒ�\u{5b5}\u{5bf}۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMInterParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ȼ�"]
    pub SpreadId: TThostFtdcSpreadIdType,
    #[doc = "Ʒ�\u{5bc}�����\u{5b7}����ۿ۱���"]
    pub InterRateZ: TThostFtdcRatioType,
    #[doc = "��һ�ȹ���Ʒ��"]
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڶ��ȹ���Ʒ��"]
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaSPBMInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽSPBM���ӿ�Ʒ�\u{5b5}\u{5bf}۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPBMAddOnInterParamField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ȼ�"]
    pub SpreadId: TThostFtdcSpreadIdType,
    #[doc = "Ʒ�\u{5bc}�����\u{5b8}��ӷ����ۿ۱���"]
    pub AddOnInterRateZ2: TThostFtdcRatioType,
    #[doc = "��һ�ȹ���Ʒ��"]
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڶ��ȹ���Ʒ��"]
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaSPBMAddOnInterParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽSPMM��Լ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPMMInstParamField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "SPMM��Լ��\u{5a4}���㷨"]
    pub InstMarginCalID: TThostFtdcInstMarginCalIDType,
    #[doc = "��Ʒ�����"]
    pub CommodityID: TThostFtdcSPMMProductIDType,
    #[doc = "��ƷȺ����"]
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaSPMMInstParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽSPMM��Ʒ��ز���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPMMProductParamField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcSPMMProductIDType,
    #[doc = "��Ʒ�����"]
    pub CommodityID: TThostFtdcSPMMProductIDType,
    #[doc = "��ƷȺ����"]
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaSPMMProductParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽͶ����SPMMģ��ѡ��"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaInvestorSPMMModelField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "SPMMģ��ID"]
    pub SPMMModelID: TThostFtdcSPMMModelIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaInvestorSPMMModelField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽSPMMģ���������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaSPMMModelParamField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "SPMMģ��ID"]
    pub SPMMModelID: TThostFtdcSPMMModelIDType,
    #[doc = "��ƷȺ����"]
    pub CommodityGroupID: TThostFtdcSPMMProductIDType,
    #[doc = "SPMMƷ���ڿ����Ż�ϵ��"]
    pub IntraCommodityRate: TThostFtdcSPMMDiscountRatioType,
    #[doc = "SPMMƷ�\u{5bc}��Ż�ϵ��"]
    pub InterCommodityRate: TThostFtdcSPMMDiscountRatioType,
    #[doc = "SPMM��Ȩ�Ż�ϵ��"]
    pub OptionDiscountRate: TThostFtdcSPMMDiscountRatioType,
    #[doc = "��ƷȺ��С��\u{5a4}�����"]
    pub MiniMarginRatio: TThostFtdcSPMMDiscountRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaSPMMModelParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRCAMS��Ʒ�����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSCombProdInfoField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcProductIDType,
    #[doc = "��Ʒ�����"]
    pub CombProductID: TThostFtdcProductIDType,
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRCAMSCombProdInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRCAMS\u{36c}��Լ���նԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSInstrParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ����"]
    pub ProductID: TThostFtdcProductIDType,
    #[doc = "\u{36c}��Լ���նԳ����"]
    pub HedgeRate: TThostFtdcHedgeRateType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRCAMSInstrParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRCAMSƷ���ڷ��նԳ����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSIntraParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ��ϴ���"]
    pub CombProductID: TThostFtdcProductIDType,
    #[doc = "Ʒ���ڶԳ����"]
    pub HedgeRate: TThostFtdcHedgeRateType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRCAMSIntraParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRCAMS��Ʒ�\u{5b7}����۵\u{5b2}���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSInterParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��ƷȺ����"]
    pub ProductGroupID: TThostFtdcProductIDType,
    #[doc = "���ȼ�"]
    pub Priority: TThostFtdcRCAMSPriorityType,
    #[doc = "�۵���"]
    pub CreditRate: TThostFtdcHedgeRateType,
    #[doc = "��Ʒ��ϴ���1"]
    pub CombProduct1: TThostFtdcProductIDType,
    #[doc = "��Ʒ��ϴ���2"]
    pub CombProduct2: TThostFtdcProductIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRCAMSInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRCAMS��ͷ��Ȩ���յ�������"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSSOptAdjParamField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Ʒ��ϴ���"]
    pub CombProductID: TThostFtdcProductIDType,
    #[doc = "Ͷ�ױ�־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ͷ��Ȩ���յ�����\u{5fc}"]
    pub AdjustValue: TThostFtdcAdjustValueType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRCAMSSOptAdjParamField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRCAMS������Ϲ�����ϸ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSCombRuleDtlField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���Բ�Ʒ"]
    pub ProdGroup: TThostFtdcProductIDType,
    #[doc = "����id"]
    pub RuleId: TThostFtdcRuleIdType,
    #[doc = "���ȼ�"]
    pub Priority: TThostFtdcRCAMSPriorityType,
    #[doc = "Ͷ�ױ�־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "��ϱ�\u{5a4}���\u{5fc}"]
    pub CombMargin: TThostFtdcMoneyType,
    #[doc = "��������Ϻ�Լ����"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "���Ⱥ�Լ����"]
    pub LegInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��������"]
    pub Direction: TThostFtdcDirectionType,
    #[doc = "���ȳ���"]
    pub LegMultiple: TThostFtdcLegMultipleType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRCAMSCombRuleDtlField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRCAMS������ϳ\u{5b2}�"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRCAMSInvstCombPosField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ�ױ�־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�\u{5b2}\u{5b6}�շ���"]
    pub PosiDirection: TThostFtdcPosiDirectionType,
    #[doc = "��Ϻ�Լ����"]
    pub CombInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "���ȱ��"]
    pub LegID: TThostFtdcLegIDType,
    #[doc = "��������Ϻ�Լ����"]
    pub ExchangeInstID: TThostFtdcExchangeInstIDType,
    #[doc = "�\u{5b2}���"]
    pub TotalAmt: TThostFtdcVolumeType,
    #[doc = "��������\u{5a4}��"]
    pub ExchMargin: TThostFtdcMoneyType,
    #[doc = "Ͷ���\u{7f1}�\u{5a4}��"]
    pub Margin: TThostFtdcMoneyType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRCAMSInvstCombPosField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRULE��Լ��\u{5a4}�����"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRULEInstrParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "��Լ����"]
    pub InstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��Լ����"]
    pub InstrumentClass: TThostFtdcInstrumentClassType,
    #[doc = "��\u{5fc}��Լ"]
    pub StdInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "Ͷ��������ϵ��"]
    pub BSpecRatio: TThostFtdcRatioType,
    #[doc = "Ͷ��������ϵ��"]
    pub SSpecRatio: TThostFtdcRatioType,
    #[doc = "�ױ�������ϵ��"]
    pub BHedgeRatio: TThostFtdcRatioType,
    #[doc = "�ױ�������ϵ��"]
    pub SHedgeRatio: TThostFtdcRatioType,
    #[doc = "�\u{b8f7c}ӷ��ձ�\u{5a4}��"]
    pub BAddOnMargin: TThostFtdcMoneyType,
    #[doc = "�����ӷ��ձ�\u{5a4}��"]
    pub SAddOnMargin: TThostFtdcMoneyType,
    #[doc = "��ƷȺ��"]
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRULEInstrParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRULEƷ���ڶ������ۿ۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRULEIntraParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "Ʒ�\u{5b4}���"]
    pub ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��\u{5fc}��Լ"]
    pub StdInstrumentID: TThostFtdcInstrumentIDType,
    #[doc = "��\u{5fc}��Լ��\u{5a4}��"]
    pub StdInstrMargin: TThostFtdcMoneyType,
    #[doc = "һ���·ݺ�Լ��ϱ�\u{5a4}��ϵ��"]
    pub UsualIntraRate: TThostFtdcRatioType,
    #[doc = "�ٽ������Լ��ϱ�\u{5a4}��ϵ��"]
    pub DeliveryIntraRate: TThostFtdcRatioType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRULEIntraParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "���ս���\u{5f7}ƽRULE��Ʒ�\u{5b5}\u{5bf}۲���"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcSyncDeltaRULEInterParameterField {
    #[doc = "������"]
    pub TradingDay: TThostFtdcDateType,
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���ȼ�"]
    pub SpreadId: TThostFtdcSpreadIdType,
    #[doc = "Ʒ�\u{5bc}�����\u{5b7}����ۿ۱���"]
    pub InterRate: TThostFtdcRatioType,
    #[doc = "��һ�ȹ���Ʒ��"]
    pub Leg1ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "�ڶ��ȹ���Ʒ��"]
    pub Leg2ProdFamilyCode: TThostFtdcInstrumentIDType,
    #[doc = "��1����ϵ��"]
    pub Leg1PropFactor: TThostFtdcCommonIntType,
    #[doc = "��2����ϵ��"]
    pub Leg2PropFactor: TThostFtdcCommonIntType,
    #[doc = "��ƷȺ��"]
    pub CommodityGroupID: TThostFtdcCommodityGroupIDType,
    #[doc = "��ƷȺ����"]
    pub CommodityGroupName: TThostFtdcInstrumentNameType,
    #[doc = "������־"]
    pub ActionDirection: TThostFtdcActionDirectionType,
    #[doc = "\u{5f7}ƽ���"]
    pub SyncDeltaSequenceNo: TThostFtdcSequenceNoType,
}
impl Default for CThostFtdcSyncDeltaRULEInterParameterField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[doc = "�˳�����״\u{32c}����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcExitEmergencyField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
}
#[doc = "���鱣��\u{5a4}��ϵ��Ͷ����ģ���Ӧ��ϵ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcInvestorPortfMarginModelField {
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���ߴ���"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "��\u{5a4}��ϵ��ģ��"]
    pub MarginModelID: TThostFtdcInvestorIDType,
}
#[doc = "Ͷ�������鱣����"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcInvestorPortfSettingField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���\u{7f1}��"]
    pub InvestorID: TThostFtdcInvestorIDType,
    #[doc = "Ͷ���ױ���־"]
    pub HedgeFlag: TThostFtdcHedgeFlagType,
    #[doc = "�Ƿ������鱣"]
    pub UsePortf: TThostFtdcBoolType,
}
#[doc = "Ͷ�������鱣���ò�ѯ"]
#[repr(C)]
#[derive(Default, Copy, Clone)]
pub struct CThostFtdcQryInvestorPortfSettingField {
    #[doc = "����������"]
    pub ExchangeID: TThostFtdcExchangeIDType,
    #[doc = "���\u{379}�˾����"]
    pub BrokerID: TThostFtdcBrokerIDType,
    #[doc = "Ͷ���\u{7f1}��"]
    pub InvestorID: TThostFtdcInvestorIDType,
}
#[doc = "ǰ����Ϣ"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct CThostFtdcFrontInfoField {
    #[doc = "ǰ�õ�\u{5b7}"]
    pub FrontAddr: TThostFtdcAddressType,
    #[doc = "��ѯƵ��"]
    pub QryFreq: TThostFtdcQueryFreqType,
    #[doc = "FTDƵ��"]
    pub FTDPkgFreq: TThostFtdcQueryFreqType,
}
impl Default for CThostFtdcFrontInfoField {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
